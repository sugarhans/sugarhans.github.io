<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jenkins</title>
      <link href="/2020/05/12/jenkins/"/>
      <url>/2020/05/12/jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="通过微信发送状态"><a href="#通过微信发送状态" class="headerlink" title="通过微信发送状态"></a>通过微信发送状态</h2><p><a href="https://www.jianshu.com/p/7eccb5ba0deb" target="_blank" rel="noopener">https://www.jianshu.com/p/7eccb5ba0deb</a></p><h2 id="定位执行任务"><a href="#定位执行任务" class="headerlink" title="定位执行任务"></a>定位执行任务</h2><p>* <em> </em> <em> </em></p><p>(五颗星，中间用空格隔开）</p><p>第一颗*表示分钟，取值0~59</p><p>第二颗*表示小时，取值0~23</p><p>第三颗*表示一个月的第几天，取值1~31</p><p>第四颗*表示第几月，取值1~12</p><p>第五颗*表示一周中的第几天，取值0~7，其中0和7代表的都是周日</p><p>1.每30分钟构建一次：</p><p>H/30 <em> </em> <em> </em></p><p>2.每2个小时构建一次</p><p>H H/2 <em> </em> *</p><p>3.每天早上8点构建一次</p><p>0 8 <em> </em> *</p><p>4.每天的8点，12点，22点，一天构建3次</p><p>0 8,12,22 <em> </em> *</p><p>（多个时间点，中间用逗号隔开）<br><a href="https://www.cnblogs.com/caoj/p/7815820.html" target="_blank" rel="noopener">https://www.cnblogs.com/caoj/p/7815820.html</a></p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见问题</title>
      <link href="/2020/05/07/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/07/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p>每次都要输入账号名密码：</p><p>  使用git pull或者git push每次都需要输入用户名和密码很繁琐，耽误时间，现在教大家一条命令实现保存用户名和密码不用再输入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br><span class="line">git pull /git push (第一次输入，后续就不用再次数据)</span><br></pre></td></tr></table></figure><p>  push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住, 下次再push代码时就不用输入用户名密码 ! 这一步会在用户目录下生成文件.git-credential记录用户名密码的信息。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 安装虚拟环境</title>
      <link href="/2020/04/27/python-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/04/27/python-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>安装 virtualenv</p><p>$ sudo pip install virtualenv</p><p>然后建立一个测试目录：</p><p>$ mkdir testvirtual</p><p>$ cd testvirtual</p><p>就可以成功创建一个虚拟环境 env1：</p><p>$ virtualenv env1</p><p>就可以成功创建另一个虚拟环境 env2：</p><p>$ virtualenv env2</p><p>然后想进入哪个虚拟环境就CD进去就可以了，比如进入env1：</p><p>$ cd env1</p><p>安装 virtualenvwrapper</p><p>Virtaulenvwrapper是virtualenv的扩展包，可以更方便地新增，删除，复制，切换虚拟环境。</p><p>运行下面命令就安装成功了，默认安装在 /usr/local/bin下面：</p><p>$ sudo easy_install virtualenvwrapper </p><p>接下来创建一个文件夹，用来存放所有的虚拟环境：</p><p>$ mkdir ~/workspaces<br>$ cd ~/workspaces</p><p>先用<br>which virtualenvwrapper.sh</p><p>which python3</p><p>这个命令找到正确路径</p><p>然后用<br>vi ~/.bash_profile 进入</p><p>输入</p><p>export WORKON_HOME=’~/.virtualenvs’</p><p>export VIRTUALENVWRAPPER_PYTHON=’/Users/mac/anaconda/bin/python3’</p><p>source /Users/mac/anaconda/bin/virtualenvwrapper.sh</p><p>esc退出后：wq进行保存</p><p>再运行这个命令 source ~/.bash_profile</p><p>接下来，创建一个或者多个虚拟环境 env1，env2：</p><p>$     env1<br>成功后，当前路径前面就会有 (env1)</p><p>$ mkvirtualenv env2</p><p>下面是一些基本操作命令</p><p>列出虚拟环境：</p><p>$ lsvirtualenv -b</p><p>env1</p><p>env2</p><p>切换虚拟环境：</p><p>$ workon env1</p><p>查看环境里安装了哪些包：</p><p>$ lssitepackages</p><p>进入当前环境：</p><p>$ cdvirtualenv</p><p>进入当前环境的site-packages：</p><p>$ cdsitepackages</p><p>$ cdsitepackages pip</p><p>复制虚拟环境：</p><p>$ cpvirtualenv env1 env3</p><p>Copying env1 as env3…</p><p>退出虚拟环境：</p><p>$ deactivate</p><p>删除虚拟环境：</p><p>$ rmvirtualenv env2</p><p>Removing env2…</p><p>迁移包：<br>pip freeze &gt; requirements.txt<br>pip install -r requirements.txt</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 安装虚拟环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装虚拟环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档管理</title>
      <link href="/2020/04/26/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
      <url>/2020/04/26/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.showdoc.cc/" target="_blank" rel="noopener">https://www.showdoc.cc/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android 路由</title>
      <link href="/2020/02/21/android-%E8%B7%AF%E7%94%B1/"/>
      <url>/2020/02/21/android-%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="ARout"><a href="#ARout" class="headerlink" title="ARout"></a>ARout</h2><p>基本用法:<br><a href="https://www.jianshu.com/p/6021f3f61fa6" target="_blank" rel="noopener">https://www.jianshu.com/p/6021f3f61fa6</a></p><p>官方：<br><a href="https://github.com/alibaba/ARouter/tree/master" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/tree/master</a></p><p>解析：<br><a href="https://www.jianshu.com/p/31a1c2c3ee72" target="_blank" rel="noopener">https://www.jianshu.com/p/31a1c2c3ee72</a></p><p>1、在Fragment 中使用startActivityForResult 需要在Fragment onActivityResult方法中接收，需要做下面的处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postcard = ARouter.getInstance().build(uri)</span><br><span class="line">                                        .withBoolean(<span class="string">"xxx"</span>, xxxx)</span><br><span class="line">                                LogisticsCenter.completion(postcard);</span><br><span class="line">                                    intent = new Intent(getActivity(), postcard.getDestination());</span><br><span class="line">                                    intent.putExtras(postcard.getExtras());</span><br><span class="line">                                    startActivityForResult(intent, CODE);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android 动态申请权限</title>
      <link href="/2020/02/17/android-%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%9D%83%E9%99%90/"/>
      <url>/2020/02/17/android-%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="实现方式-利用注释"><a href="#实现方式-利用注释" class="headerlink" title="实现方式 利用注释"></a>实现方式 利用注释</h2><p>Android 6.0后需要动态申请权限</p><p>判断是否大于6.0<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M</span><br></pre></td></tr></table></figure></p><p>遍历activity，fragment中的所有方法,查找出相对应注释的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Method <span class="title">findMethodWithRequestCode</span><span class="params">(Class clazz, Class&lt;A&gt; annotation, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(annotation)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isEqualRequestCodeFromAnnotation(method, annotation, requestCode)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> method;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqualRequestCodeFromAnnotation</span><span class="params">(Method m, Class clazz, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.equals(OnMPermissionDenied.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> requestCode == m.getAnnotation(OnMPermissionDenied.class).value();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.equals(OnMPermissionGranted.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> requestCode == m.getAnnotation(OnMPermissionGranted.class).value();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.equals(OnMPermissionNeverAskAgain.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> requestCode == m.getAnnotation(OnMPermissionNeverAskAgain.class).value();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在利用反射执行该方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (executeMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (!executeMethod.isAccessible()) &#123;</span><br><span class="line">                 executeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             executeMethod.invoke(activity, args);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>回调函数里面进行判断，执行相应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestResult</span><span class="params">(Object obj, <span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; deniedPermissions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grantResults.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (grantResults[i] != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">               deniedPermissions.add(permissions[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (deniedPermissions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (MPermissionUtil.hasNeverAskAgainPermission(getActivity(obj), deniedPermissions)) &#123;</span><br><span class="line">               doExecuteFailAsNeverAskAgain(obj, requestCode);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               doExecuteFail(obj, requestCode);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           doExecuteSuccess(obj, requestCode);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@TargetApi</span>(value = Build.VERSION_CODES.M)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasNeverAskAgainPermission</span><span class="params">(Activity activity, List&lt;String&gt; permission)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (String value : permission) &#123;</span><br><span class="line">           <span class="keyword">if</span> (activity.checkSelfPermission(value) != PackageManager.PERMISSION_GRANTED &amp;&amp;</span><br><span class="line">                   !activity.shouldShowRequestPermissionRationale(value)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>文件地址：<a href="/file/permission.zip">permission.zip</a> </p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler</title>
      <link href="/2020/01/13/fiddler/"/>
      <url>/2020/01/13/fiddler/</url>
      
        <content type="html"><![CDATA[<h2 id="bpu-拦截多个请求"><a href="#bpu-拦截多个请求" class="headerlink" title="bpu 拦截多个请求"></a>bpu 拦截多个请求</h2><p><a href="https://blog.csdn.net/Julia_Zxr/article/details/78331224" target="_blank" rel="noopener">https://blog.csdn.net/Julia_Zxr/article/details/78331224</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System;</span><br><span class="line"><span class="keyword">import</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">import</span> Fiddler;</span><br><span class="line"></span><br><span class="line"><span class="comment">// INTRODUCTION</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Well, hello there!</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Don't be scared! :-)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This is the FiddlerScript Rules file, which creates some of the menu commands and</span></span><br><span class="line"><span class="comment">// other features of Fiddler. You can edit this file to modify or add new commands.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The original version of this file is named SampleRules.js and it is in the</span></span><br><span class="line"><span class="comment">// \Program Files\Fiddler\ folder. When Fiddler first runs, it creates a copy named</span></span><br><span class="line"><span class="comment">// CustomRules.js inside your \Documents\Fiddler2\Scripts folder. If you make a </span></span><br><span class="line"><span class="comment">// mistake in editing this file, simply delete the CustomRules.js file and restart</span></span><br><span class="line"><span class="comment">// Fiddler. A fresh copy of the default rules will be created from the original</span></span><br><span class="line"><span class="comment">// sample rules file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The best way to edit this file is to install the FiddlerScript Editor, part of</span></span><br><span class="line"><span class="comment">// the free SyntaxEditing addons. Get it here: http://fiddler2.com/r/?SYNTAXVIEWINSTALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GLOBALIZATION <span class="doctag">NOTE:</span> Save this file using UTF-8 Encoding.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JScript.NET Reference</span></span><br><span class="line"><span class="comment">// http://fiddler2.com/r/?msdnjsnet</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// FiddlerScript Reference</span></span><br><span class="line"><span class="comment">// http://fiddler2.com/r/?fiddlerscriptcookbook</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handlers</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// *****************</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This is the Handlers class. Pretty much everything you ever add to FiddlerScript</span></span><br><span class="line">    <span class="comment">// belongs right inside here, or inside one of the already-existing functions below.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// *****************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following snippet demonstrates a custom-bound column for the Web Sessions list.</span></span><br><span class="line">    <span class="comment">// See http://fiddler2.com/r/?fiddlercolumns for more info</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static BindUIColumn("Method", 60)</span></span><br><span class="line"><span class="comment">    function FillMethodColumn(oS: Session): String &#123;</span></span><br><span class="line"><span class="comment">    return oS.RequestMethod;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following snippet demonstrates how to create a custom tab that shows simple text</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public BindUITab("Flags")</span></span><br><span class="line"><span class="comment">    static function FlagsReport(arrSess: Session[]):String &#123;</span></span><br><span class="line"><span class="comment">    var oSB: System.Text.StringBuilder = new System.Text.StringBuilder();</span></span><br><span class="line"><span class="comment">    for (var i:int = 0; i&lt;arrSess.Length; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    oSB.AppendLine("SESSION FLAGS");</span></span><br><span class="line"><span class="comment">    oSB.AppendFormat("&#123;0&#125;: &#123;1&#125;\n", arrSess[i].id, arrSess[i].fullUrl);</span></span><br><span class="line"><span class="comment">    for(var sFlag in arrSess[i].oFlags)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    oSB.AppendFormat("\t&#123;0&#125;:\t\t&#123;1&#125;\n", sFlag.Key, sFlag.Value);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return oSB.ToString();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can create a custom menu like so:</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    QuickLinkMenu("&amp;Links") </span></span><br><span class="line"><span class="comment">    QuickLinkItem("IE GeoLoc TestDrive", "http://ie.microsoft.com/testdrive/HTML5/Geolocation/Default.html")</span></span><br><span class="line"><span class="comment">    QuickLinkItem("FiddlerCore", "http://fiddler2.com/fiddlercore")</span></span><br><span class="line"><span class="comment">    public static function DoLinksMenu(sText: String, sAction: String)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    Utilities.LaunchHyperlink(sAction);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"Hide 304s"</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">BindPref</span><span class="params">(<span class="string">"fiddlerscript.rules.Hide304s"</span>)</span></span></span><br><span class="line"><span class="function">    var m_Hide304s: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cause Fiddler to override the Accept-Language header with one of the defined values</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"Request &amp;Japanese Content"</span>)</span></span></span><br><span class="line"><span class="function">    var m_Japanese: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Automatic Authentication</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"&amp;Automatically Authenticate"</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">BindPref</span><span class="params">(<span class="string">"fiddlerscript.rules.AutoAuth"</span>)</span></span></span><br><span class="line"><span class="function">    var m_AutoAuth: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cause Fiddler to override the User-Agent header with one of the defined values</span></span><br><span class="line">    <span class="comment">// The page http://browserscope2.org/browse?category=selectors&amp;ua=Mobile%20Safari is a good place to find updated versions of these</span></span><br><span class="line">    RulesString(<span class="string">"&amp;User-Agents"</span>, <span class="keyword">true</span>) </span><br><span class="line">    BindPref(<span class="string">"fiddlerscript.ephemeral.UserAgentString"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">0</span>,<span class="string">"Netscape &amp;3"</span>, <span class="string">"Mozilla/3.0 (Win95; I)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">1</span>,<span class="string">"WinPhone8.1"</span>, <span class="string">"Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 520) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">2</span>,<span class="string">"&amp;Safari5 (Win7)"</span>, <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">3</span>,<span class="string">"Safari9 (Mac)"</span>, <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">4</span>,<span class="string">"iPad"</span>, <span class="string">"Mozilla/5.0 (iPad; CPU OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F5027d Safari/600.1.4"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">5</span>,<span class="string">"iPhone6"</span>, <span class="string">"Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">6</span>,<span class="string">"IE &amp;6 (XPSP2)"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">7</span>,<span class="string">"IE &amp;7 (Vista)"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">8</span>,<span class="string">"IE 8 (Win2k3 x64)"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; WOW64; Trident/4.0)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">9</span>,<span class="string">"IE &amp;8 (Win7)"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">10</span>,<span class="string">"IE 9 (Win7)"</span>, <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">11</span>,<span class="string">"IE 10 (Win8)"</span>, <span class="string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">12</span>,<span class="string">"IE 11 (Surface2)"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; ARM; Trident/7.0; Touch; rv:11.0) like Gecko"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">13</span>,<span class="string">"IE 11 (Win8.1)"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">14</span>,<span class="string">"Edge (Win10)"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.11082"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">15</span>,<span class="string">"&amp;Opera"</span>, <span class="string">"Opera/9.80 (Windows NT 6.2; WOW64) Presto/2.12.388 Version/12.17"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">16</span>,<span class="string">"&amp;Firefox 3.6"</span>, <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.7) Gecko/20100625 Firefox/3.6.7"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">17</span>,<span class="string">"&amp;Firefox 43"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">18</span>,<span class="string">"&amp;Firefox Phone"</span>, <span class="string">"Mozilla/5.0 (Mobile; rv:18.0) Gecko/18.0 Firefox/18.0"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">19</span>,<span class="string">"&amp;Firefox (Mac)"</span>, <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">20</span>,<span class="string">"Chrome (Win)"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.48 Safari/537.36"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">21</span>,<span class="string">"Chrome (Android)"</span>, <span class="string">"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.78 Mobile Safari/537.36"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">22</span>,<span class="string">"ChromeBook"</span>, <span class="string">"Mozilla/5.0 (X11; CrOS x86_64 6680.52.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.74 Safari/537.36"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">23</span>,<span class="string">"GoogleBot Crawler"</span>, <span class="string">"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">24</span>,<span class="string">"Kindle Fire (Silk)"</span>, <span class="string">"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.0.22.79_10013310) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true"</span>)</span><br><span class="line">    RulesStringValue(<span class="number">25</span>,<span class="string">"&amp;Custom..."</span>, <span class="string">"%CUSTOM%"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> var sUA: String = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cause Fiddler to delay HTTP traffic to simulate typical 56k modem conditions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"Simulate &amp;Modem Speeds"</span>, <span class="string">"Per&amp;formance"</span>)</span></span></span><br><span class="line"><span class="function">    var m_SimulateModem: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Removes HTTP-caching related headers and specifies "no-cache" on requests and responses</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"&amp;Disable Caching"</span>, <span class="string">"Per&amp;formance"</span>)</span></span></span><br><span class="line"><span class="function">    var m_DisableCaching: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">RulesOption</span><span class="params">(<span class="string">"Cache Always &amp;Fresh"</span>, <span class="string">"Per&amp;formance"</span>)</span></span></span><br><span class="line"><span class="function">    var m_AlwaysFresh: <span class="keyword">boolean</span> </span>= <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Force a manual reload of the script file.  Resets all</span></span><br><span class="line">    <span class="comment">// RulesOption variables to their defaults.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">ToolsAction</span><span class="params">(<span class="string">"Reset Script"</span>)</span></span></span><br><span class="line"><span class="function">    function <span class="title">DoManualReload</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        FiddlerObject.ReloadScript();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">ContextAction</span><span class="params">(<span class="string">"Decode Selected Sessions"</span>)</span></span></span><br><span class="line"><span class="function">    function <span class="title">DoRemoveEncoding</span><span class="params">(oSessions: Session[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (var x:<span class="keyword">int</span> = <span class="number">0</span>; x &lt; oSessions.Length; x++)&#123;</span><br><span class="line">            oSessions[x].utilDecodeRequest();</span><br><span class="line">            oSessions[x].utilDecodeResponse();</span><br><span class="line">        &#125;</span><br><span class="line">        UI.actUpdateInspector(<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">OnBeforeRequest</span><span class="params">(oSession: Session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Sample Rule: Color ASPX requests in RED</span></span><br><span class="line">        <span class="comment">// if (oSession.uriContains(".aspx")) &#123; oSession["ui-color"] = "red";   &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sample Rule: Flag POSTs to fiddler2.com in italics</span></span><br><span class="line">        <span class="comment">// if (oSession.HostnameIs("www.fiddler2.com") &amp;&amp; oSession.HTTPMethodIs("POST")) &#123;  oSession["ui-italic"] = "yup";  &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sample Rule: Break requests for URLs containing "/sandbox/"</span></span><br><span class="line">        <span class="comment">// if (oSession.uriContains("/sandbox/")) &#123;</span></span><br><span class="line">        <span class="comment">//     oSession.oFlags["x-breakrequest"] = "yup";   // Existence of the x-breakrequest flag creates a breakpoint; the "yup" value is unimportant.</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span> != gs_ReplaceToken) &amp;&amp; (oSession.url.indexOf(gs_ReplaceToken)&gt;-<span class="number">1</span>)) &#123;   <span class="comment">// Case sensitive</span></span><br><span class="line">            oSession.url = oSession.url.Replace(gs_ReplaceToken, gs_ReplaceTokenWith); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span> != gs_OverridenHost) &amp;&amp; (oSession.host.toLowerCase() == gs_OverridenHost)) &#123;</span><br><span class="line">            oSession[<span class="string">"x-overridehost"</span>] = gs_OverrideHostWith; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*if ((null!=bpRequestURI) &amp;&amp; oSession.uriContains(bpRequestURI)) &#123;</span></span><br><span class="line"><span class="comment">            oSession["x-breakrequest"]="uri";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        var len = bpRequestURIs.Length;</span><br><span class="line">        <span class="keyword">for</span>(var i = <span class="number">0</span>; i&lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bpRequestURIs[i]!=<span class="keyword">null</span> &amp;&amp; bpRequestURIs[i]!= <span class="string">" "</span>&amp;&amp; oSession.uriContains(bpRequestURIs[i]) )&#123;</span><br><span class="line">                oSession[<span class="string">"x-breakrequest"</span>]=<span class="string">"uri"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span>!=bpMethod) &amp;&amp; (oSession.HTTPMethodIs(bpMethod))) &#123;</span><br><span class="line">            oSession[<span class="string">"x-breakrequest"</span>]=<span class="string">"method"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span>!=uiBoldURI) &amp;&amp; oSession.uriContains(uiBoldURI)) &#123;</span><br><span class="line">            oSession[<span class="string">"ui-bold"</span>]=<span class="string">"QuickExec"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">            <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">            oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">"300"</span>; </span><br><span class="line">            <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">            oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">"150"</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_DisableCaching) &#123;</span><br><span class="line">            oSession.oRequest.headers.Remove(<span class="string">"If-None-Match"</span>);</span><br><span class="line">            oSession.oRequest.headers.Remove(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">            oSession.oRequest[<span class="string">"Pragma"</span>] = <span class="string">"no-cache"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User-Agent Overrides</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != sUA) &#123;</span><br><span class="line">            oSession.oRequest[<span class="string">"User-Agent"</span>] = sUA; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_Japanese) &#123;</span><br><span class="line">            oSession.oRequest[<span class="string">"Accept-Language"</span>] = <span class="string">"ja"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_AutoAuth) &#123;</span><br><span class="line">            <span class="comment">// Automatically respond to any authentication challenges using the </span></span><br><span class="line">            <span class="comment">// current Fiddler user's credentials. You can change (default)</span></span><br><span class="line">            <span class="comment">// to a domain\\username:password string if preferred.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// WARNING: This setting poses a security risk if remote </span></span><br><span class="line">            <span class="comment">// connections are permitted!</span></span><br><span class="line">            oSession[<span class="string">"X-AutoAuth"</span>] = <span class="string">"(default)"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_AlwaysFresh &amp;&amp; (oSession.oRequest.headers.Exists(<span class="string">"If-Modified-Since"</span>) || oSession.oRequest.headers.Exists(<span class="string">"If-None-Match"</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            oSession.utilCreateResponseAndBypassServer();</span><br><span class="line">            oSession.responseCode = <span class="number">304</span>;</span><br><span class="line">            oSession[<span class="string">"ui-backcolor"</span>] = <span class="string">"Lavender"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function is called immediately after a set of request headers has</span></span><br><span class="line">    <span class="comment">// been read from the client. This is typically too early to do much useful</span></span><br><span class="line">    <span class="comment">// work, since the body hasn't yet been read, but sometimes it may be useful.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// For instance, see </span></span><br><span class="line">    <span class="comment">// http://blogs.msdn.com/b/fiddler/archive/2011/11/05/http-expect-continue-delays-transmitting-post-bodies-by-up-to-350-milliseconds.aspx</span></span><br><span class="line">    <span class="comment">// for one useful thing you can do with this handler.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Note: oSession.requestBodyBytes is not available within this function!</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnPeekAtRequestHeaders(oSession: Session) &#123;</span></span><br><span class="line"><span class="comment">    var sProc = ("" + oSession["x-ProcessInfo"]).ToLower();</span></span><br><span class="line"><span class="comment">    if (!sProc.StartsWith("mylowercaseappname")) oSession["ui-hide"] = "NotMyApp";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If a given session has response streaming enabled, then the OnBeforeResponse function </span></span><br><span class="line">    <span class="comment">// is actually called AFTER the response was returned to the client.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// In contrast, this OnPeekAtResponseHeaders function is called before the response headers are </span></span><br><span class="line">    <span class="comment">// sent to the client (and before the body is read from the server).  Hence this is an opportune time </span></span><br><span class="line">    <span class="comment">// to disable streaming (oSession.bBufferResponse = true) if there is something in the response headers </span></span><br><span class="line">    <span class="comment">// which suggests that tampering with the response body is necessary.</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// Note: oSession.responseBodyBytes is not available within this function!</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">OnPeekAtResponseHeaders</span><span class="params">(oSession: Session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//FiddlerApplication.Log.LogFormat("Session &#123;0&#125;: Response header peek shows status is &#123;1&#125;", oSession.id, oSession.responseCode);</span></span><br><span class="line">        <span class="keyword">if</span> (m_DisableCaching) &#123;</span><br><span class="line">            oSession.oResponse.headers.Remove(<span class="string">"Expires"</span>);</span><br><span class="line">            oSession.oResponse[<span class="string">"Cache-Control"</span>] = <span class="string">"no-cache"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((bpStatus&gt;<span class="number">0</span>) &amp;&amp; (oSession.responseCode == bpStatus)) &#123;</span><br><span class="line">            oSession[<span class="string">"x-breakresponse"</span>]=<span class="string">"status"</span>;</span><br><span class="line">            oSession.bBufferResponse = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span>!=bpResponseURI) &amp;&amp; oSession.uriContains(bpResponseURI)) &#123;</span><br><span class="line">            oSession[<span class="string">"x-breakresponse"</span>]=<span class="string">"uri"</span>;</span><br><span class="line">            oSession.bBufferResponse = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">OnBeforeResponse</span><span class="params">(oSession: Session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_Hide304s &amp;&amp; oSession.responseCode == <span class="number">304</span>) &#123;</span><br><span class="line">            oSession[<span class="string">"ui-hide"</span>] = <span class="string">"true"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // This function executes just before Fiddler returns an error that it has </span></span><br><span class="line"><span class="comment">    // itself generated (e.g. "DNS Lookup failure") to the client application.</span></span><br><span class="line"><span class="comment">    // These responses will not run through the OnBeforeResponse function above.</span></span><br><span class="line"><span class="comment">    static function OnReturningError(oSession: Session) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // This function executes after Fiddler finishes processing a Session, regardless</span></span><br><span class="line"><span class="comment">    // of whether it succeeded or failed. Note that this typically runs AFTER the last</span></span><br><span class="line"><span class="comment">    // update of the Web Sessions UI listitem, so you must manually refresh the Session's</span></span><br><span class="line"><span class="comment">    // UI if you intend to change it.</span></span><br><span class="line"><span class="comment">    static function OnDone(oSession: Session) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnBoot() &#123;</span></span><br><span class="line"><span class="comment">        MessageBox.Show("Fiddler has finished booting");</span></span><br><span class="line"><span class="comment">        System.Diagnostics.Process.Start("iexplore.exe");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        UI.ActivateRequestInspector("HEADERS");</span></span><br><span class="line"><span class="comment">        UI.ActivateResponseInspector("HEADERS");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnBeforeShutdown(): Boolean &#123;</span></span><br><span class="line"><span class="comment">        // Return false to cancel shutdown.</span></span><br><span class="line"><span class="comment">        return ((0 == FiddlerApplication.UI.lvSessions.TotalItemCount()) ||</span></span><br><span class="line"><span class="comment">                (DialogResult.Yes == MessageBox.Show("Allow Fiddler to exit?", "Go Bye-bye?",</span></span><br><span class="line"><span class="comment">                 MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2)));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnShutdown() &#123;</span></span><br><span class="line"><span class="comment">            MessageBox.Show("Fiddler has shutdown");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnAttach() &#123;</span></span><br><span class="line"><span class="comment">        MessageBox.Show("Fiddler is now the system proxy");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static function OnDetach() &#123;</span></span><br><span class="line"><span class="comment">        MessageBox.Show("Fiddler is no longer the system proxy");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Main() function runs everytime your FiddlerScript compiles</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        var today: Date = <span class="keyword">new</span> Date();</span><br><span class="line">        FiddlerObject.StatusText = <span class="string">" CustomRules.js was loaded at: "</span> + today;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Uncomment to add a "Server" column containing the response "Server" header, if present</span></span><br><span class="line">        <span class="comment">// UI.lvSessions.AddBoundColumn("Server", 50, "@response.server");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Uncomment to add a global hotkey (Win+G) that invokes the ExecAction method below...</span></span><br><span class="line">        <span class="comment">// UI.RegisterCustomHotkey(HotkeyModifiers.Windows, Keys.G, "screenshot"); </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These static variables are used for simple breakpointing &amp; other QuickExec rules </span></span><br><span class="line">    <span class="comment">/*BindPref("fiddlerscript.ephemeral.bpRequestURI")</span></span><br><span class="line"><span class="comment">    public static var bpRequestURI:String = null;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    BindPref(<span class="string">"fiddlerscript.ephemeral.bpRequestURI"</span>)</span><br><span class="line">    <span class="comment">//数组的长度10，10个阻塞的命令，内容为空格，和bpu命令用空格分割保持一致</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> var bpRequestURIs:String[] = [<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>,<span class="string">" "</span>];</span><br><span class="line"></span><br><span class="line">    BindPref(<span class="string">"fiddlerscript.ephemeral.bpResponseURI"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> var bpResponseURI:String = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    BindPref(<span class="string">"fiddlerscript.ephemeral.bpMethod"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> var bpMethod: String = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> var bpStatus:<span class="keyword">int</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> var uiBoldURI: String = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> var gs_ReplaceToken: String = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> var gs_ReplaceTokenWith: String = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> var gs_OverridenHost: String = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> var gs_OverrideHostWith: String = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The OnExecAction function is called by either the QuickExec box in the Fiddler window,</span></span><br><span class="line">    <span class="comment">// or by the ExecAction.exe command line utility.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">OnExecAction</span><span class="params">(sParams: String[])</span>: Boolean </span>&#123;</span><br><span class="line"></span><br><span class="line">        FiddlerObject.StatusText = <span class="string">"ExecAction: "</span> + sParams[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        var sAction = sParams[<span class="number">0</span>].toLowerCase();</span><br><span class="line">        <span class="keyword">switch</span> (sAction) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bold"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123;uiBoldURI=<span class="keyword">null</span>; FiddlerObject.StatusText=<span class="string">"Bolding cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                uiBoldURI = sParams[<span class="number">1</span>]; FiddlerObject.StatusText=<span class="string">"Bolding requests for "</span> + uiBoldURI;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bp"</span>:</span><br><span class="line">                FiddlerObject.alert(<span class="string">"bpu = breakpoint request for uri\nbpm = breakpoint request method\nbps=breakpoint response status\nbpafter = breakpoint response for URI"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bps"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123;bpStatus=-<span class="number">1</span>; FiddlerObject.StatusText=<span class="string">"Response Status breakpoint cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                bpStatus = parseInt(sParams[<span class="number">1</span>]); FiddlerObject.StatusText=<span class="string">"Response status breakpoint for "</span> + sParams[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bpv"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bpm"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123;bpMethod=<span class="keyword">null</span>; FiddlerObject.StatusText=<span class="string">"Request Method breakpoint cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                bpMethod = sParams[<span class="number">1</span>].toUpperCase(); FiddlerObject.StatusText=<span class="string">"Request Method breakpoint for "</span> + bpMethod;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">/*case "bpu":</span></span><br><span class="line"><span class="comment">                if (sParams.Length&lt;2) &#123;bpRequestURI=null; FiddlerObject.StatusText="RequestURI breakpoint cleared"; return false;&#125;</span></span><br><span class="line"><span class="comment">                bpRequestURI = sParams[1]; </span></span><br><span class="line"><span class="comment">                FiddlerObject.StatusText="RequestURI breakpoint for "+sParams[1];</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bpu"</span>:</span><br><span class="line">                var len1 = sParams.Length ;</span><br><span class="line">                var len2 = bpRequestURIs.Length;</span><br><span class="line">                <span class="comment">//每次赋值之前先恢复原始值</span></span><br><span class="line">                <span class="keyword">for</span>(var i = <span class="number">0</span>; i&lt; len2; i++)&#123;</span><br><span class="line">                    bpRequestURIs[i]=<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (len1 &lt; <span class="number">2</span>) &#123;FiddlerObject.StatusText=<span class="string">"RequestURI breakpoint cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var text = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span>(var i = <span class="number">1</span>; i &lt; len1; i++)&#123;</span><br><span class="line">                    bpRequestURIs[i-<span class="number">1</span>] = sParams[i];</span><br><span class="line">                    text += sParams[i] +<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                FiddlerObject.StatusText=<span class="string">"RequestURI breakpoint for "</span> + text;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bpa"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bpafter"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123;bpResponseURI=<span class="keyword">null</span>; FiddlerObject.StatusText=<span class="string">"ResponseURI breakpoint cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                bpResponseURI = sParams[<span class="number">1</span>]; </span><br><span class="line">                FiddlerObject.StatusText=<span class="string">"ResponseURI breakpoint for "</span>+sParams[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"overridehost"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">3</span>) &#123;gs_OverridenHost=<span class="keyword">null</span>; FiddlerObject.StatusText=<span class="string">"Host Override cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                gs_OverridenHost = sParams[<span class="number">1</span>].toLowerCase();</span><br><span class="line">                gs_OverrideHostWith = sParams[<span class="number">2</span>];</span><br><span class="line">                FiddlerObject.StatusText=<span class="string">"Connecting to ["</span> + gs_OverrideHostWith + <span class="string">"] for requests to ["</span> + gs_OverridenHost + <span class="string">"]"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"urlreplace"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">3</span>) &#123;gs_ReplaceToken=<span class="keyword">null</span>; FiddlerObject.StatusText=<span class="string">"URL Replacement cleared"</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                gs_ReplaceToken = sParams[<span class="number">1</span>];</span><br><span class="line">                gs_ReplaceTokenWith = sParams[<span class="number">2</span>].Replace(<span class="string">" "</span>, <span class="string">"%20"</span>);  <span class="comment">// Simple helper</span></span><br><span class="line">                FiddlerObject.StatusText=<span class="string">"Replacing ["</span> + gs_ReplaceToken + <span class="string">"] in URIs with ["</span> + gs_ReplaceTokenWith + <span class="string">"]"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"allbut"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"keeponly"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123; FiddlerObject.StatusText=<span class="string">"Please specify Content-Type to retain during wipe."</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                UI.actSelectSessionsWithResponseHeaderValue(<span class="string">"Content-Type"</span>, sParams[<span class="number">1</span>]);</span><br><span class="line">                UI.actRemoveUnselectedSessions();</span><br><span class="line">                UI.lvSessions.SelectedItems.Clear();</span><br><span class="line">                FiddlerObject.StatusText=<span class="string">"Removed all but Content-Type: "</span> + sParams[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"stop"</span>:</span><br><span class="line">                UI.actDetachProxy();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"start"</span>:</span><br><span class="line">                UI.actAttachProxy();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"cls"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"clear"</span>:</span><br><span class="line">                UI.actRemoveAllSessions();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"g"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"go"</span>:</span><br><span class="line">                UI.actResumeAllSessions();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"goto"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length != <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                Utilities.LaunchHyperlink(<span class="string">"http://www.google.com/search?hl=en&amp;btnI=I%27m+Feeling+Lucky&amp;q="</span> + Utilities.UrlEncode(sParams[<span class="number">1</span>]));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"help"</span>:</span><br><span class="line">                Utilities.LaunchHyperlink(<span class="string">"http://fiddler2.com/r/?quickexec"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"hide"</span>:</span><br><span class="line">                UI.actMinimizeToTray();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"log"</span>:</span><br><span class="line">                FiddlerApplication.Log.LogString((sParams.Length&lt;<span class="number">2</span>) ? <span class="string">"User couldn't think of anything to say..."</span> : sParams[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"nuke"</span>:</span><br><span class="line">                UI.actClearWinINETCache();</span><br><span class="line">                UI.actClearWinINETCookies(); </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"screenshot"</span>:</span><br><span class="line">                UI.actCaptureScreenshot(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">                UI.actRestoreWindow();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"tail"</span>:</span><br><span class="line">                <span class="keyword">if</span> (sParams.Length&lt;<span class="number">2</span>) &#123; FiddlerObject.StatusText=<span class="string">"Please specify # of sessions to trim the session list to."</span>; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                UI.TrimSessionList(<span class="keyword">int</span>.Parse(sParams[<span class="number">1</span>]));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"quit"</span>:</span><br><span class="line">                UI.actExit();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"dump"</span>:</span><br><span class="line">                UI.actSelectAll();</span><br><span class="line">                UI.actSaveSessionsToZip(CONFIG.GetPath(<span class="string">"Captures"</span>) + <span class="string">"dump.saz"</span>);</span><br><span class="line">                UI.actRemoveAllSessions();</span><br><span class="line">                FiddlerObject.StatusText = <span class="string">"Dumped all sessions to "</span> + CONFIG.GetPath(<span class="string">"Captures"</span>) + <span class="string">"dump.saz"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span> (sAction.StartsWith(<span class="string">"http"</span>) || sAction.StartsWith(<span class="string">"www."</span>)) &#123;</span><br><span class="line">                    System.Diagnostics.Process.Start(sParams[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    FiddlerObject.StatusText = <span class="string">"Requested ExecAction: '"</span> + sAction + <span class="string">"' not found. Type HELP to learn more."</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> fiddler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 工具</title>
      <link href="/2020/01/12/html-%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/01/12/html-%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p><a href="https://www.babeljs.cn/docs/usage" target="_blank" rel="noopener">https://www.babeljs.cn/docs/usage</a></p><p>安装babel-cli用于命令行转码<br>npm install -g babel-cli<br>babel-cli 需要全局安装 -g代表 -global。需要在项目中也安装babel-cli<br>npm install –save-dev babel-cli</p><p>安装转码规则<br>npm install –save-dev babel-preset-es2015<br>安装完以后想知道是否成功查看package.json中是否生成</p><p>“devDependencies”: {<br>“babel-cli”: “^6.26.0”,<br>“babel-preset-es2015”: “^6.24.1”<br>}</p><p>配置.babelrc<br>在跟目录下建立新文件.babelrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;es2015&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中presets是规则，plugins是插件支持。<br>接下来就可以转码了用<br>babel  原文件.js -o 转换文件.js。-o表示–out-file 写入文件。</p><p>监视代码的变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel --watch script.js -o a.js --source-maps</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android基础</title>
      <link href="/2020/01/02/android%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/02/android%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="设置富文本"><a href="#设置富文本" class="headerlink" title="设置富文本"></a>设置富文本</h2><p><a href="https://www.cnblogs.com/qynprime/p/8026672.html" target="_blank" rel="noopener">https://www.cnblogs.com/qynprime/p/8026672.html</a></p><h2 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list <span class="keyword">package</span></span><br></pre></td></tr></table></figure><p>列出所有包名</p><h2 id="Dagger2"><a href="#Dagger2" class="headerlink" title="Dagger2"></a>Dagger2</h2><p>java：<br><a href="https://www.jianshu.com/p/39d1df6c877d/" target="_blank" rel="noopener">https://www.jianshu.com/p/39d1df6c877d/</a><br>android：<br><a href="https://www.jianshu.com/p/2cd491f0da01" target="_blank" rel="noopener">https://www.jianshu.com/p/2cd491f0da01</a><br>@Binds：<br><a href="https://www.jianshu.com/p/1190fc9e4ab3" target="_blank" rel="noopener">https://www.jianshu.com/p/1190fc9e4ab3</a><br>Component.Builder：<br><a href="https://blog.csdn.net/weixin_34295316/article/details/91362551" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34295316/article/details/91362551</a></p><h2 id="RxJava和RxAndroid"><a href="#RxJava和RxAndroid" class="headerlink" title="RxJava和RxAndroid"></a>RxJava和RxAndroid</h2><p><a href="https://www.jianshu.com/p/1cad42c4bc04" target="_blank" rel="noopener">https://www.jianshu.com/p/1cad42c4bc04</a></p><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a><br>RxJava 线程的自由切换：<br><a href="https://blog.csdn.net/johnny901114/article/details/80032801" target="_blank" rel="noopener">https://blog.csdn.net/johnny901114/article/details/80032801</a></p><h2 id="RxBinding"><a href="#RxBinding" class="headerlink" title="RxBinding"></a>RxBinding</h2><p><a href="https://www.jianshu.com/p/a74843cf1b18" target="_blank" rel="noopener">https://www.jianshu.com/p/a74843cf1b18</a></p><h2 id="RxLifecycle"><a href="#RxLifecycle" class="headerlink" title="RxLifecycle"></a>RxLifecycle</h2><p><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">https://github.com/trello/RxLifecycle</a></p><h2 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h2><p><a href="https://blog.csdn.net/nnmmbb/article/details/103801193" target="_blank" rel="noopener">https://blog.csdn.net/nnmmbb/article/details/103801193</a></p><h2 id="greenDao"><a href="#greenDao" class="headerlink" title="greenDao"></a>greenDao</h2><p>实体转化：<br><a href="https://blog.csdn.net/qq_26413249/article/details/79046323" target="_blank" rel="noopener">https://blog.csdn.net/qq_26413249/article/details/79046323</a></p><p>外键：<br><a href="https://www.jianshu.com/p/e6ac52498576" target="_blank" rel="noopener">https://www.jianshu.com/p/e6ac52498576</a></p><p>加密：<br><a href="https://www.cnblogs.com/dsxniubility/archive/2016/07/28/5699543.html" target="_blank" rel="noopener">https://www.cnblogs.com/dsxniubility/archive/2016/07/28/5699543.html</a></p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p><a href="https://www.jianshu.com/p/186fa07fc48a" target="_blank" rel="noopener">https://www.jianshu.com/p/186fa07fc48a</a></p><h2 id="android手机各种路径的区别"><a href="#android手机各种路径的区别" class="headerlink" title="android手机各种路径的区别"></a>android手机各种路径的区别</h2><p><a href="https://blog.csdn.net/Kelaker/article/details/80471352" target="_blank" rel="noopener">https://blog.csdn.net/Kelaker/article/details/80471352</a></p><h2 id="webView"><a href="#webView" class="headerlink" title="webView"></a>webView</h2><h3 id="webView加载自定义错误页面"><a href="#webView加载自定义错误页面" class="headerlink" title="webView加载自定义错误页面"></a>webView加载自定义错误页面</h3><p><a href="https://my.oschina.net/u/1777508/blog/308323" target="_blank" rel="noopener">https://my.oschina.net/u/1777508/blog/308323</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unbuntu</title>
      <link href="/2019/12/29/unbuntu/"/>
      <url>/2019/12/29/unbuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="传输文件："><a href="#传输文件：" class="headerlink" title="传输文件："></a>传输文件：</h2><p><a href="https://www.cnblogs.com/reddusty/p/4747481.html" target="_blank" rel="noopener">https://www.cnblogs.com/reddusty/p/4747481.html</a><br>1、获取远程服务器上的文件</p><p>scp -P 2222 <a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a>:/root/lnmp0.4.tar.gz /home/lnmp0.4.tar.gz<br>上端口大写P 为参数，2222 表示更改SSH端口后的端口，如果没有更改SSH端口可以不用添加该参数。 <a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a> 表示使用root用户登录远程服务器<a href="http://www.vpser.net，:/root/lnmp0.4.tar.gz" target="_blank" rel="noopener">www.vpser.net，:/root/lnmp0.4.tar.gz</a> 表示远程服务器上的文件，最后面的/home/lnmp0.4.tar.gz表示保存在本地上的路径和文件名。</p><p>2、获取远程服务器上的目录</p><p>scp -P 2222 -r <a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a>:/root/lnmp0.4/ /home/lnmp0.4/<br>上端口大写P 为参数，2222 表示更改SSH端口后的端口，如果没有更改SSH端口可以不用添加该参数。-r 参数表示递归复制(即复制该目录下面的文件和目录);<a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a> 表示使用root用户登录远程服务器<a href="http://www.vpser.net，:/root/lnmp0.4/" target="_blank" rel="noopener">www.vpser.net，:/root/lnmp0.4/</a> 表示远程服务器上的目录，最后面的/home/lnmp0.4/表示保存在本地上的路径。</p><p>3、将本地文件上传到服务器上</p><p>scp -P 2222 /home/lnmp0.4.tar.gz <a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a>:/root/lnmp0.4.tar.gz<br>上端口大写P 为参数，2222 表示更改SSH端口后的端口，如果没有更改SSH端口可以不用添加该参数。 /home/lnmp0.4.tar.gz表示本地上准备上传文件的路径和文件名。<a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a> 表示使用root用户登录远程服务器<a href="http://www.vpser.net，:/root/lnmp0.4.tar.gz" target="_blank" rel="noopener">www.vpser.net，:/root/lnmp0.4.tar.gz</a> 表示保存在远程服务器上目录和文件名。</p><p>4、将本地目录上传到服务器上</p><p>scp -P 2222 -r /home/lnmp0.4/ <a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a>:/root/lnmp0.4/<br>上 端口大写P 为参数，2222 表示更改SSH端口后的端口，如果没有更改SSH端口可以不用添加该参数。-r 参数表示递归复制(即复制该目录下面的文件和目录);/home/lnmp0.4/表示准备要上传的目录，<a href="mailto:root@www.vpser.net" target="_blank" rel="noopener">root@www.vpser.net</a> 表示使用root用户登录远程服务器<a href="http://www.vpser.net，:/root/lnmp0.4/" target="_blank" rel="noopener">www.vpser.net，:/root/lnmp0.4/</a> 表示保存在远程服务器上的目录位置。</p><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><p>api:<br><a href="https://wiki.jenkins.io/display/JENKINS/Remote+access+API" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/Remote+access+API</a></p><p>wget -q -O - <a href="https://pkg.jenkins.io/debian/jenkins-ci.org.key" target="_blank" rel="noopener">https://pkg.jenkins.io/debian/jenkins-ci.org.key</a> | sudo apt-key add -<br>sudo sh -c ‘echo deb <a href="http://pkg.jenkins.io/debian-stable" target="_blank" rel="noopener">http://pkg.jenkins.io/debian-stable</a> binary/ &gt; /etc/apt/sources.list.d/jenkins.list’<br>sudo apt-get update<br>sudo apt-get install jenkins</p><p>安装完之后就可以用了，jenkins是没有桌面图标的。<br>使用浏览器访问： 自己的IP地址：8080<br>默认端口是8080  可以在 /etc/init.d/jenkins</p><p>建立软连接： ln -s [当前java地址] /usr/bin/java</p><p>service jenkins start|stop|restart  </p><p>远程构建的时候可能会出现403：<br><a href="http://blog.kainaodong.com/?p=90" target="_blank" rel="noopener">http://blog.kainaodong.com/?p=90</a></p><h3 id="下载环境"><a href="#下载环境" class="headerlink" title="下载环境"></a>下载环境</h3><p>gradle的下载地址：<br><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ sudo unzip gradle<span class="number">-2.6</span>-all.zip -d /opt/gradle/</span><br><span class="line"></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> GRADLE_HOME=<span class="regexp">/opt/g</span>radle/gradle<span class="number">-2.6</span></span><br><span class="line"><span class="keyword">export</span> PATH=$GRADLE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br><span class="line">gradle -v</span><br></pre></td></tr></table></figure><p>git：<br>sudo apt-get install git</p><p>mysql:<br>sudo apt-get install mysql-server<br><a href="https://blog.csdn.net/weixx3/article/details/80782479" target="_blank" rel="noopener">https://blog.csdn.net/weixx3/article/details/80782479</a></p>]]></content>
      
      
      <categories>
          
          <category> unbuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unbuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript 复习</title>
      <link href="/2019/12/24/javaScript-%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/12/24/javaScript-%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h2><ul><li><p>写在行内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写在script标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    alert('Hello World!');</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写在外部js文件中，在页面引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意点<br><strong><em>引用外部js文件的script标签中不可以写JavaScript代码</em></strong></p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Number、String、Boolean、Undefined、Null</p><ul><li>Number<br>  数值判断<ul><li>NaN：not a number<ul><li>NaN 与任何值都不相等，包括他本身</li></ul></li><li>isNaN: is not a number</li></ul></li></ul><h3 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h3><ol><li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</li><li>null表示一个空，变量的值如果想为null，必须手动设置</li></ol><h3 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h3><p>typeof<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);  <span class="comment">// 'number'</span></span><br></pre></td></tr></table></figure></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li><p>转换成字符串类型<br>toString()<br>String()<br>拼接字符串方式</p></li><li><p>转换成数值类型<br>Number()<br>parseInt()<br>parseFloat()<br>+，-0等运算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'500'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);<span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str);<span class="comment">// 取负</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>转换成布尔类型<br>Boolean()</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>==与===的区别：==只进行值得比较，===类型和值同时相等，则相等<br>var result = ‘55’ == 55;      // true<br>var result = ‘55’ === 55;     // false 值相等，类型不相等<br>var result = 55 === 55;     // true</p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，在提升function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(a);<span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">abc();</span><br><span class="line"><span class="comment">// 如果变量和函数同名的话，函数优先</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//25</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaaaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建方式"><a href="#对象的创建方式" class="headerlink" title="对象的创建方式"></a>对象的创建方式</h3><ul><li><p>对象字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="literal">true</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Object创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">'lisi'</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line">person.job = <span class="string">'actor'</span>;</span><br><span class="line">person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li><li><p>自定义构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line"><span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解<br>现在我们需要掌握函数内部的this几个特点</p><ol><li>函数在定义的时候this是不确定的，只有在调用的时候才可以确定</li><li>一般函数直接执行，内部this指向全局window</li><li>函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象</li><li>构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化</li></ol><h2 id="JavaScript高级"><a href="#JavaScript高级" class="headerlink" title="JavaScript高级"></a>JavaScript高级</h2><h3 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h3><p><img src="/images/构造函数-实例-原型之间的关系.png" alt=""></p><p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></p><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></p><p></p><p class="tip"><br>  <code>__proto__</code> 是非标准属性。<br></p><br>实例对象可以直接访问原型对象成员。<p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure><h3 id="实例对象读取原型对象成员"><a href="#实例对象读取原型对象成员" class="headerlink" title="实例对象读取原型对象成员"></a>实例对象读取原型对象成员</h3><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><p>更简单的原型语法：<br>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。<br>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h2><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>…</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li><p>问题1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class="line"><span class="comment">// 下面代码会报错</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class="line"><span class="comment">// 下面代码没有问题</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure></li><li><p>问题2 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'11'</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'22'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数继承属性成员</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">  Student.prototype[key] = Person.prototype[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h3 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用原型的特性实现继承</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h2 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h2><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p></p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><br>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p></p><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p></p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><br>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p></p><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code><br><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure></p><p>参数：</p><ul><li>thisArg<ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li>arg1, arg2, …<ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。<br>返回值：<br>返回由指定的this值和初始化参数改造的原函数拷贝。<br>示例1：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></span><br><span class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</span><br><span class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</span><br><span class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol start="2"><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h2 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p>3<br>[Arguments] { ‘0’: 10, ‘1’: 20, ‘2’: 30 }<br>true<br>[Function: f]<br>fn</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>验证手机号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">11</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证日期 2012-5-01</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮箱 <a href="mailto:xxx@itcast.cn" target="_blank" rel="noopener">xxx@itcast.cn</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br></pre></td></tr></table></figure><p>验证IP地址 192.168.1.10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h2><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure><h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// function fruit() &#123;</span></span><br><span class="line"><span class="comment">//     return &#123;apple:'',banana:'🍌'&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let &#123;apple:apple,banana:banana&#125; = fruit();</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">''</span>,<span class="string">'🍌'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [apple,banana] = fruit();</span><br><span class="line"><span class="built_in">console</span>.log(apple,banana)</span><br></pre></td></tr></table></figure><h3 id="字符模板"><a href="#字符模板" class="headerlink" title="字符模板"></a>字符模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = <span class="string">''</span>,</span><br><span class="line">    banana = <span class="string">'🍌'</span>;</span><br><span class="line"><span class="keyword">let</span> fruit = <span class="string">`苹果：<span class="subst">$&#123;apple&#125;</span>  香蕉<span class="subst">$&#123;banana&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><p>带标签的模板<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = <span class="string">''</span>,</span><br><span class="line">    banana = <span class="string">'🍌'</span>;</span><br><span class="line"><span class="keyword">let</span> fruit = test<span class="string">`苹果：<span class="subst">$&#123;apple&#125;</span>  香蕉<span class="subst">$&#123;banana&#125;</span>`</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">strings,...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings);</span><br><span class="line">    <span class="built_in">console</span>.log(values)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure></p><p>[ ‘苹果：’, ‘  香蕉’, ‘’ ]<br>[ ‘’, ‘🍌’ ]</p><h3 id="新增字符串方法"><a href="#新增字符串方法" class="headerlink" title="新增字符串方法"></a>新增字符串方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = <span class="string">''</span>,</span><br><span class="line">    banana = <span class="string">'🍌'</span>;</span><br><span class="line"><span class="keyword">let</span> fruit = test<span class="string">`苹果：<span class="subst">$&#123;apple&#125;</span>  香蕉<span class="subst">$&#123;banana&#125;</span>`</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">strings,...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings);</span><br><span class="line">    <span class="built_in">console</span>.log(values)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abcd'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit.startsWith(<span class="string">'a'</span>),fruit.endsWith(<span class="string">'d'</span>),fruit.includes(<span class="string">'b'</span>))</span><br></pre></td></tr></table></figure><p>true true true</p><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruit</span>(<span class="params">apple = <span class="string">''</span>,banana = <span class="string">'🍌'</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;apple&#125;</span><span class="subst">$&#123;banana&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit())</span><br></pre></td></tr></table></figure><p>🍌</p><h3 id="操作符…"><a href="#操作符…" class="headerlink" title="操作符…"></a>操作符…</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = [<span class="string">''</span>,<span class="string">'🍌'</span>],</span><br><span class="line">    foods = [<span class="string">'🎂'</span>,...fruit]</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br><span class="line"><span class="built_in">console</span>.log(...fruit)</span><br><span class="line"><span class="built_in">console</span>.log(foods)</span><br></pre></td></tr></table></figure><p>[ ‘’, ‘🍌’ ]<br> 🍌<br>[ ‘🎂’, ‘’, ‘🍌’ ]</p><p>参数上面也可以用… </p><h3 id="函数的名字"><a href="#函数的名字" class="headerlink" title="函数的名字"></a>函数的名字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit.name)</span><br><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.name)</span><br></pre></td></tr></table></figure><p>fruit<br>b</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let breakfast =  apple =&gt; apple;</span></span><br><span class="line"><span class="comment">// let breakfast =  (apple,banana) =&gt; apple+banana;</span></span><br><span class="line"><span class="comment">// let breakfast =  (apple,banana) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     return apple+banana;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="keyword">let</span> breakfast =  <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(breakfast(<span class="string">'haha'</span>))</span><br></pre></td></tr></table></figure><h3 id="属性和函数简写"><a href="#属性和函数简写" class="headerlink" title="属性和函数简写"></a>属性和函数简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = &#123;</span><br><span class="line">    apple,</span><br><span class="line">    banana,</span><br><span class="line">    eat()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否相等</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>))</span><br><span class="line"><span class="keyword">let</span> fruit = &#123;&#125;</span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line"><span class="built_in">Object</span>.assign(fruit,&#123;<span class="attr">apple</span>:<span class="string">''</span>&#125;,&#123;<span class="attr">banana</span>:<span class="string">'🍌'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><p>false<br>true<br>{ apple: ‘’, banana: ‘🍌’ }</p><p>改变PrototypeOf的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> breakfast = &#123;</span><br><span class="line">    getFruit()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dinner = &#123;</span><br><span class="line">    getFruit()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'🍌'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sunday =  <span class="built_in">Object</span>.create(breakfast);</span><br><span class="line"><span class="built_in">console</span>.log(sunday.getFruit())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(sunday) == breakfast)</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(sunday,dinner);</span><br><span class="line"><span class="built_in">console</span>.log(sunday.getFruit())</span><br></pre></td></tr></table></figure><p><br>true<br>🍌<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Student = &#123;</span><br><span class="line">    age : <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> Person =  &#123;</span><br><span class="line">    __proto__:Student</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.age)</span><br></pre></td></tr></table></figure></p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Student = &#123;</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'zhangsan'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> Person =  &#123;</span><br><span class="line">    __proto__:Student,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName()+<span class="string">'11'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.getName())</span><br><span class="line"><span class="built_in">console</span>.log(Student.age)</span><br></pre></td></tr></table></figure><p>注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。</p><h3 id="生成器-迭代器"><a href="#生成器-迭代器" class="headerlink" title="生成器 迭代器"></a>生成器 迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chef = <span class="function"><span class="keyword">function</span>* (<span class="params">fruits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fruits.length; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> fruits[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test =  chef([<span class="string">'苹果'</span>,<span class="string">'香蕉'</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.next())</span><br><span class="line"><span class="built_in">console</span>.log(test.next())</span><br><span class="line"><span class="built_in">console</span>.log(test.next())</span><br></pre></td></tr></table></figure><p>{ value: ‘苹果’, done: false }<br>{ value: ‘香蕉’, done: false }<br>{ value: undefined, done: true }</p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fruit) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fruit = fruit;</span><br><span class="line">    &#125;</span><br><span class="line">    cook()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Chef(<span class="string">''</span>).cook()</span><br></pre></td></tr></table></figure><h3 id="geter-seter"><a href="#geter-seter" class="headerlink" title="geter seter"></a>geter seter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chef</span> </span>&#123;</span><br><span class="line">    get eat()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fruit;</span><br><span class="line">    &#125;</span><br><span class="line">    set eat(fruit)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fruit = fruit</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> chef = <span class="keyword">new</span> Chef()</span><br><span class="line">chef.fruit = <span class="string">'苹果'</span></span><br><span class="line"><span class="built_in">console</span>.log(chef.fruit)</span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  cook()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'cook'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Chef.cook()</span><br></pre></td></tr></table></figure><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,birth) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    log()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'.'</span> + <span class="keyword">this</span>.birth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,birth) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,birth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student(<span class="string">'hans'</span>,<span class="string">'1999-9-9'</span>);</span><br><span class="line">student.log();</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'🍌'</span>)</span><br><span class="line">fruit.add(<span class="string">'🌰'</span>);</span><br><span class="line">fruit.add(<span class="string">'🌰'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br><span class="line"><span class="built_in">console</span>.log(fruit.size);</span><br><span class="line"><span class="built_in">console</span>.log(fruit.has(<span class="string">'🌰'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fruit.delete(<span class="string">'🌰'</span>))</span><br><span class="line">fruit.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line">fruit.clear()</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><p>Set { ‘’, ‘🍌’, ‘🌰’ }<br>3<br>true<br>true<br><br>🍌<br>Set {}</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> apple = &#123;&#125;,cook = <span class="function"><span class="params">cook</span> =&gt;</span>&#123;&#125;</span><br><span class="line">fruit.set(apple,<span class="string">'🌰'</span>);</span><br><span class="line">fruit.set(cook,<span class="string">'🍊'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br><span class="line"><span class="built_in">console</span>.log(fruit.size);</span><br><span class="line"><span class="built_in">console</span>.log(fruit.get(apple))</span><br><span class="line"><span class="built_in">console</span>.log(fruit.has(apple))</span><br><span class="line"><span class="built_in">console</span>.log(fruit.delete(apple))</span><br><span class="line">fruit.forEach(<span class="function">(<span class="params">value,key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value+<span class="string">''</span>+key)</span><br><span class="line">&#125;)</span><br><span class="line">fruit.clear()</span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><p>Map { {} =&gt; ‘🌰’, [Function: cook] =&gt; ‘🍊’ }<br>2<br>🌰<br>true<br>true<br>🍊cook =&gt;{}<br>Map {}</p><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>export{xx,xx}</p><p>export{xx as default} == export default xxx</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html html、css复习</title>
      <link href="/2019/12/23/html-html%E3%80%81css%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/12/23/html-html%E3%80%81css%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用，或者页面中最重要标题信息</p><p>div  span    是没有语义的     是我们网页布局主要的2个盒子     css+div<br>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。<br>span, 跨度，跨距；范围<br>语法格式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/tab.png"><br>b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li></ol><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前面一个是绝对路径，后面一个是相对路径。</span><br><span class="line">假设你的这个html文件的路径是www.example.com/path/to/html/a.html，</span><br><span class="line">那么src="/js/ibanner.js"指向www.example.com/js/ibanner.js，</span><br><span class="line">src="js/ibanner.js"指向www.example.com/path/to/html/js/ibanner.js。</span><br></pre></td></tr></table></figure></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/tt.png" alt="image"></p><h3 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h3><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可<br><img src="/images/th.png" alt="image"></p><h3 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span>：用于定义表格的头部。</span><br><span class="line">必须位于<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 标签中，一般包含网页的logo和导航等头部信息。</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>：用于定义表格的主体。</span><br><span class="line">位于<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>标签中，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure><h3 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>跨行合并：rowspan    跨列合并：colspan<br>合并单元格的思想：<br>将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。<br>公式：  删除的个数  =  合并的个数  - 1<br>合并的顺序 先上   先左 </p><p>总结：</p><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li></ol><h2 id="input-控件"><a href="#input-控件" class="headerlink" title="input 控件"></a>input 控件</h2><p><img src="/images/input.png" alt="image"></p><h2 id="label的理解"><a href="#label的理解" class="headerlink" title="label的理解"></a>label的理解</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="textarea控件"><a href="#textarea控件" class="headerlink" title="textarea控件"></a>textarea控件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>引入css样式</p><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    选择器 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。<br>type=”text/CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略</p><h3 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用</p><h3 id="外部样式表（外链式"><a href="#外部样式表（外链式" class="headerlink" title="外部样式表（外链式)"></a>外部样式表（外链式)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span>  <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：  link 是个单标签哦!!!<br>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。<br>type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。<br>rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p><h3 id="css字体样式属性"><a href="#css字体样式属性" class="headerlink" title="css字体样式属性"></a>css字体样式属性</h3><ul><li>font-size：字号大小<br>  <img src="/images/dd.png" alt="image"></li><li><p>font-family:字体<br>  font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：<br>  p{ font-family:”微软雅黑”;}<br>  可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><blockquote><ol><li>现在网页中普遍使用14px+。<ol start="2"><li>尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</li><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New        Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li></ol></li></ol></blockquote></li><li>CSS Unicode字体<br>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。<br>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。<br>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。<br>可以通过escape()  来测试属于什么字体。</li></ul><table><thead><tr><th>字体名称</th><th style="text-align:center">英文名称</th><th style="text-align:right">Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td style="text-align:center">SimSun</td><td style="text-align:right">\5B8B\4F53           </td></tr><tr><td>新宋体</td><td style="text-align:center">NSimSun</td><td style="text-align:right">\65B0\5B8B\4F53     </td></tr><tr><td>黑体</td><td style="text-align:center">SimHei</td><td style="text-align:right">\9ED1\4F53       </td></tr><tr><td>微软雅黑</td><td style="text-align:center">Microsoft YaHei</td><td style="text-align:right">\5FAE\8F6F\96C5\9ED1 </td></tr><tr><td>楷体_GB2312</td><td style="text-align:center">KaiTi_GB2312</td><td style="text-align:right">\6977\4F53_GB2312    </td></tr><tr><td>隶书</td><td style="text-align:center">LiSu</td><td style="text-align:right">\96B6\4E66           </td></tr><tr><td>幼园</td><td style="text-align:center">YouYuan</td><td style="text-align:right">\5E7C\5706           </td></tr><tr><td>华文细黑</td><td style="text-align:center">STXihei</td><td style="text-align:right">\534E\6587\7EC6\9ED1 </td></tr><tr><td>细明体</td><td style="text-align:center">MingLiU</td><td style="text-align:right">\7EC6\660E\4F53      </td></tr><tr><td>新细明体</td><td style="text-align:center">PMingLiU</td><td style="text-align:right">\65B0\7EC6\660E\4F53 </td></tr></tbody></table><ul><li>font-weight:字体粗细<br>font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。<br>数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。</li><li>font-style:字体风格<br>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：<br>normal：默认值，浏览器会显示标准的字体样式。<br>italic：浏览器会显示斜体的字体样式。<br>oblique：浏览器会显示倾斜的字体样式。</li><li>综合设置字体<br>选择器{font: font-style  font-weight  font-size/line-height  font-family;}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br></pre></td></tr></table></figure></li></ul><h3 id="css外观属性"><a href="#css外观属性" class="headerlink" title="css外观属性"></a>css外观属性</h3><ul><li>color:文本颜色</li><li>line-height:行间距</li><li>text-align:水平对齐方式<br>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下</li><li>text-indent:首行缩进<br>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。<br>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</li><li>text-decoration 文本的装饰</li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul><li>交集选择器<br>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special</li><li>并集选择器<br>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式</li><li>后代选择器<br>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代</li><li>子元素选择器<br>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</li><li>伪类选择器<ul><li>:link      /<em> 未访问的链接 </em>/</li><li>:visited   /<em> 已访问的链接 </em>/</li><li>:hover     /<em> 鼠标移动到链接上 </em>/</li><li>:active    /<em> 选定的链接 </em>/<br>注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao </li></ul></li></ul><h3 id="标签显示模式"><a href="#标签显示模式" class="headerlink" title="标签显示模式"></a>标签显示模式</h3><ul><li><p>块级元素(block-level)<br>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p>块级元素的特点：<br>（1）总是从新行开始<br>（2）高度，行高、外边距以及内边距都可以控制。<br>（3）宽度默认是容器的100%<br>（4）可以容纳内联元素和其他块元素。</p></li><li><p>行内元素(inline-level)<br>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure><p>行内元素的特点：<br>（1）和相邻行内元素在一行上。<br>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br>（3）默认宽度就是它本身内容的宽度。<br>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p></li></ul><p><strong style="color:#f00">注意：</strong></p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li><p>链接里面不能再放链接。</p><ul><li>行内块元素（inline-block）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure></li></ul><p>行内块元素的特点：<br>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">去掉两边的空隙方法：</span><br><span class="line">方法1.给父元素添加font-size:0</span><br><span class="line">方法2.把两个html元素标签挨着写。eg:&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h3><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p></li></ol><ul><li>层叠<br>相同选择器，样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式</li><li>继承性<br>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</li><li><p>优先级<br>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式</p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p></li></ul><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）<br>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。<br>实际工作中常用这种方式进行网页布局，示例代码如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header&#123; width:960px; margin:0 auto;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="外边距合并、塌陷"><a href="#外边距合并、塌陷" class="headerlink" title="外边距合并、塌陷"></a>外边距合并、塌陷</h3><h4 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h4><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。<br><img src="/images/www.png"><br>解决方案：  避免就好了</p><h4 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h4><p><img src="/images/www.png"><br>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。<br>待续。。。。</li></ol><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。<br><img src="/images/one.jpg" width="500"><br>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。<br><img src="/images/two.jpg" width="400"></p><h3 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h3><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：<br>1、确定页面的版心（可视区）。<br>2、分析页面中的行模块，以及每个行模块中的列模块。<br>3、制作HTML结构 。<br>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。<br><img src="/images/n.jpg"><br><img src="/images/no.jpg"></p><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><p>优点： 通俗易懂，书写方便<br>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p><h4 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h4><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure></p><p>优点：  代码简洁<br>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong><br>使用方法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">"."</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure></p><p>优点： 符合闭合浮动思想  结构语义化正确<br>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。<br>代表网站： 百度、淘宝网、网易等<br><img src="/images/163.png" style="border: 1px dashed #3c3c3c;"><br>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><h4 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h4><p>使用方法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优点：  代码更简洁<br>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。<br>代表网站： 小米、腾讯等</p><h3 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h3><p>边偏移：<br>元素的定位属性主要包括定位模式和边偏移两部分<br>| 边偏移属性  | 描述                      |<br>| —— | ———————– |<br>| top    | 顶端偏移量，定义元素相对于其父元素上边线的距离 |<br>| bottom | 底部偏移量，定义元素相对于其父元素下边线的距离 |<br>| left   | 左侧偏移量，定义元素相对于其父元素左边线的距离 |<br>| right  | 右侧偏移量，定义元素相对于其父元素右边线的距离 |</p><p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p><p>定位模式(定位的分类)：<br>| 值        | 描述                       |<br>| ——– | ———————— |<br>| static   | 自动定位（默认定位方式）             |<br>| relative | 相对定位，相对于其原文档流的位置进行定位     |<br>| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |<br>| fixed    | 固定定位，相对于浏览器窗口进行定位        |</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：<br><img src="/images/r.png"><br>注意：   </p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）<br>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</li></ol><p>注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><h4 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h4><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。<br><img src="/images/ab.png"></p><h4 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h4><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。<br><img src="/images/ab1.png"></p><h3 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h3><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了<br>定位的盒子也可以水平或者垂直居中，有一个算法。</p><ol><li>首先left 50%   父盒子的一半大小</li><li>然后走自己外边距负的一半值就可以了 margin-left。</li></ol><h3 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h3><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><h3 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h3><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动（自恋型）</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置（拼爹型）</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置（认死理型）</td></tr></tbody></table><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p>display visibility 和 overflow</p><h4 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h4><p>display 设置或检索对象是否及如何显示。<br>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。<br>特点： 隐藏之后，不再保留位置。</p><h4 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h4><p>设置或检索是否显示对象。<br>visible : 　对象可视<br>hidden : 　对象隐藏<br>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p><h4 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h4><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。<br>visible : 　不剪切内容也不添加滚动条。<br>auto : 　 超出自动显示滚动条，不超出不显示滚动条<br>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉<br>scroll : 　不管超出内容否，总是显示滚动条</p><h2 id="css高级"><a href="#css高级" class="headerlink" title="css高级"></a>css高级</h2><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure><p>鼠标放我身上查看效果哦：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:default"</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:pointer"</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:move"</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:text"</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure></p><p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ：  outline: 0;   或者  outline: none;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">style</span>=<span class="string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。<br>右下角可以拖拽： </p><p><textarea></textarea><br>右下角不可以拖拽：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">"resize: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。<br>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p><p><img src="/images/1498467742995.png" alt="1498467742995"></p><h4 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h4><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h4 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h4><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。<br><img src="/images/3.jpg"><br>解决的方法就是：  </p><ol><li><p>给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src="/images/1633.png" width="500" style="border: 1px dashed #ccc;"></p></li><li><p>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="/images/sina1.png" width="500" style="border: 1px dashed #ccc;"></p></li></ol><h3 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h3><h4 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h4><p>normal   使用浏览器默认的换行规则。<br>break-all   允许在单词内换行。<br>keep-all    只能在半角空格或连字符处换行。<br>主要处理英文单词</p><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h4><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容<br>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。<br>可以处理中文</p><h6 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h6><p>text-overflow : clip | ellipsis<br>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出<br>clip : 　不显示省略标记（…），而是简单的裁切<br>ellipsis : 　当对象内文本溢出时显示省略标记（…）<br>注意一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><h3 id="CSS精灵技术（sprite）-小妖精-雪碧"><a href="#CSS精灵技术（sprite）-小妖精-雪碧" class="headerlink" title="CSS精灵技术（sprite） 小妖精  雪碧"></a>CSS精灵技术（sprite） 小妖精  雪碧</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位</p><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><h4 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h4><p>总体来说，字体图标按照如下流程：<br><img src="/images/fontt.png"></p><h4 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：<br><img src="/images/03.jpg"><br>之后保存为svg格式，然后给我们前端人员就好了。<br>其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h4><p>当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。<br>​推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a><br><strong>icomoon字库</strong><br>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。<br>推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a><br><strong>阿里icon font字库</strong><br><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a><br>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！<br><strong>fontello</strong><br><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a><br>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。<br><strong>Font-Awesome</strong><br><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a><br>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。<br><strong>Glyphicon Halflings</strong><br><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a><br>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。<br><strong>Icons8</strong><br><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a><br>提供PNG免费下载，像素大能到500PX</p><h4 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了<br>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。<br><img src="/images/fontt1.png"></p><p><img src="/images/fontt2.png"></p><h4 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法<br><img src="/images/1498032122244.png" alt="1498032122244"></p><h5 id="第一步：在样式里面声明字体：-告诉别人我们自己定义的字体"><a href="#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体" class="headerlink" title="第一步：在样式里面声明字体： 告诉别人我们自己定义的字体"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'icomoon'</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2'</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.ttf?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.woff?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.svg?7kkyc2#icomoon'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：给盒子使用字体"><a href="#第二步：给盒子使用字体" class="headerlink" title="第二步：给盒子使用字体"></a>第二步：给盒子使用字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"icomoon"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：盒子里面添加结构"><a href="#第三步：盒子里面添加结构" class="headerlink" title="第三步：盒子里面添加结构"></a>第三步：盒子里面添加结构</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">"\e900"</span>;</span><br><span class="line">&#125;</span><br><span class="line">或者  </span><br><span class="line">&lt;span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h4><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做<br>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。<br><img src="/images/fontt5.png"></p></li></ol><h3 id="运用知识点"><a href="#运用知识点" class="headerlink" title="运用知识点"></a>运用知识点</h3><h4 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h4><p><img src="/images/ico.png" style="border: 1px dashed #ccc; padding:3px;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：  &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot;  type=&quot;image/x-icon&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>注意： </p><ol><li>她(它)不是iconfont字体哦。</li><li>位置是放到 head 标签中间。</li><li>后面的type=”image/x-icon”  属性可以省略。（我相信你也愿意省略。）</li><li>为了兼容性，请将favicon.ico 这个图标放到根目录下。（我们就不要任性了，听话放位置，省很多麻烦。。你好，我也好）<br><img src="media/icotu.png"></li></ol><h4 id="转换ico图标"><a href="#转换ico图标" class="headerlink" title="转换ico图标"></a>转换ico图标</h4><p>我们可以自己做的图片，转换为 ico图标，以便放到我们站点里面。 <a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a></p><h3 id="网站优化三大标签"><a href="#网站优化三大标签" class="headerlink" title="网站优化三大标签"></a>网站优化三大标签</h3><p>title Description Keywords</p><h3 id="CSS-W3C-统一验证工具"><a href="#CSS-W3C-统一验证工具" class="headerlink" title="CSS W3C 统一验证工具"></a>CSS W3C 统一验证工具</h3><p>CssStats 是一个在线的 CSS 代码分析工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网址是：  http://www.cssstats.com/</span><br></pre></td></tr></table></figure></p><p>如果你想要更全面的，这个神奇，你值得拥有：<br>W3C 统一验证工具：    <a href="http://validator.w3.org/unicorn/" target="_blank" rel="noopener">http://validator.w3.org/unicorn/</a>  ☆☆☆☆☆<br>因为它可以检测本地文件哦！！</p><p>弹性布局：<br><a href="https://www.jb51.net/css/632494.html" target="_blank" rel="noopener">https://www.jb51.net/css/632494.html</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/2019/12/22/react/"/>
      <url>/2019/12/22/react/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>React 可以开发单页面应用</li><li>React 组件化模块化  开发模式</li><li>React通过对DOM的模拟(虚拟dom)，最大限度地减少与DOM的交互  （数据绑定）</li><li>React灵活  React可以与已知的库或框架很好地配合</li><li>React基于jsx的语法，JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，  html  js混写模式</li></ul><h2 id="搭建react的环境"><a href="#搭建react的环境" class="headerlink" title="搭建react的环境"></a>搭建react的环境</h2><ul><li>安装nodejs</li><li><p>安装cnpm用cnpm代替npm</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>用yarn替代npm</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g yarn  或者 npm install -g yarn</span><br></pre></td></tr></table></figure></li></ul><p>搭建React开发环境</p><ul><li><p>安装脚手架工具   （单文件组件项目生成工具）   只需要安装一次<br>  npm install -g create-react-app   /  cnpm install -g create-react-app</p></li><li><p>创建项目   （可能创建多次）<br>  create-react-app reactdemo</p></li><li><p>编译运行</p><pre><code>npm start             yarn start运行项目npm run build         yarn build 生成项目</code></pre></li></ul><p><strong style="color:#f00">react 绑定属性注意：</strong><br>    class-&gt;className<br>    for-&gt;htmlfor<br>    style: 里面是个对象，JavaScript形式<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;&apos;color&apos;:&apos;red&apos;&#125;&#125;&gt;标题&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h2><p>第一方法：按模块<br>第二种方法：require</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React ,&#123;Component&#125;<span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../assets/images/logo.svg'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            name:<span class="string">'张三'</span>,</span><br><span class="line">            title:<span class="string">'标题'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;img src=&#123;logo&#125; alt=<span class="string">""</span>/&gt;</span><br><span class="line">                &lt;img src=&#123;<span class="built_in">require</span>(<span class="string">'../assets/images/logo.svg'</span>)&#125; alt=<span class="string">""</span>/&gt;</span><br><span class="line">                #远程图片</span><br><span class="line">                &lt;img src=<span class="string">"https://www.baidu.com/img/bd_logo1.png?where=super"</span> alt=<span class="string">""</span>/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>循环数据要加key</p><p>组件的构造函数中一定要注意 super</p><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);  <span class="comment">/*用于父子组件传值  固定写法*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            userinfo:<span class="string">'张三'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>组件名称首字母大写、组件类名称首字母大写</p><p>setState(obj)<br>setState(fn) </p><p>jsx里大括号里除了js表达式外，for 赋值语句，条件语句都不能用</p><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../assets/images/logo.svg'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            list: [<span class="string">'1111'</span>, <span class="string">'2222'</span>, <span class="string">'333'</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.state.list.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><h2 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h2><p>绑定时间处理函数this的几种方法</p><ul><li><p>第一种方法：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run()&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.state.name)</span><br><span class="line">&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.run.bind(<span class="keyword">this</span>)&#125;&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种方法：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">构造函数中改变</span><br><span class="line"><span class="keyword">this</span>.run = <span class="keyword">this</span>.run.bind(<span class="keyword">this</span>);</span><br><span class="line">run()&#123;</span><br><span class="line">       alert(<span class="keyword">this</span>.state.name)</span><br><span class="line"> &#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.run&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三种方法：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> run=<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">   alert(<span class="keyword">this</span>.state.name)</span><br><span class="line"> &#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.run&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../assets/images/logo.svg'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            list: [<span class="string">'1111'</span>, <span class="string">'2222'</span>, <span class="string">'333'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            list: [<span class="string">'1111'</span>, <span class="string">'2222'</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">        event.target.style.background = <span class="string">'red'</span>;</span><br><span class="line">        alert(event.target.getAttribute(<span class="string">'aid'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.state.list.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &#123;/</span>*事件对象*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;事件对象&lt;/</span>p&gt;</span><br><span class="line">                &lt;button aid=<span class="string">'123'</span> onClick=&#123;<span class="keyword">this</span>.run&#125;&gt;点击事件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="string">'username'</span>&#125; onChange=&#123;<span class="keyword">this</span>.inputChange&#125;/&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getinput&#125;</span>&gt;</span>获取input的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>获取值两种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">inputChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            username:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inputChange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val = <span class="keyword">this</span>.refs.username.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            username:val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>通过e.target来获取值，或者是refs</p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> onKeyUp=&#123;<span class="keyword">this</span>.keyup&#125;/&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keyup = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">13</span> == e.keyCode)&#123;</span><br><span class="line">         alert(e.target.value)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>MVVM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todolist</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            username:<span class="string">'111'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    change = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            username : e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;双向数据绑定&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input value=&#123;this.state.username&#125;  onChange=&#123;this.change&#125; type="text"/</span>&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.username&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default  Todolist;</span></span><br></pre></td></tr></table></figure><p>约束性和非约束性组件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">非约束性组:&lt;input type=&quot;text&quot; defaultValue=&quot;a&quot; /&gt;   这个 defaultValue 其实就是原生DOM中的 value 属性。</span><br><span class="line"></span><br><span class="line">这样写出的来的组件，其value值就是用户输入的内容，React完全不管理输入的过程。</span><br><span class="line"></span><br><span class="line">约束性组件：&lt;input value=&#123;this.state.username&#125; type=&quot;text&quot; onChange=&#123;this.handleUsername&#125;  /&gt; </span><br><span class="line"></span><br><span class="line">这里，value属性不再是一个写死的值，他是 this.state.username, this.state.username 是由 this.handleChange 负责管理的。</span><br><span class="line"></span><br><span class="line">这个时候实际上 input 的 value 根本不是用户输入的内容。而是onChange 事件触发之后，由于 this.setState 导致了一次重新渲染。不过React会优化这个渲染过程。看上去有点类似双休数据绑定</span><br></pre></td></tr></table></figure></p><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><p>React中的组件: 解决html 标签构建应用的不足。<br>使用组件的好处：把公共的功能单独抽离成一个文件作为一个组件，哪里里使用哪里引入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父子组件：组件的相互调用中，我们把调用者称为父组件，被调用者称为子组件</span><br><span class="line">父子组件传值：</span><br><span class="line">父组件给子组件传值 </span><br><span class="line">        1.在调用子组件的时候定义一个属性  &lt;Header msg=&apos;首页&apos;&gt;&lt;/Header&gt;</span><br><span class="line">        2.子组件里面 this.props.msg          </span><br><span class="line">说明：父组件不仅可以给子组件传值，还可以给子组件传方法,以及把整个父组件传给子组件。</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父组件主动获取子组件的数据</span><br><span class="line">    1、调用子组件的时候指定ref的值   &lt;Header ref=&apos;header&apos;&gt;&lt;/Header&gt;      </span><br><span class="line">    2、通过this.refs.header  获取整个子组件实例</span><br><span class="line">或者在子组件调用父组件的方法把需要的值传过去</span><br></pre></td></tr></table></figure><p>代码:<br>子组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.title&#125;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.run&#125;&gt; 执行父组件的方法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br/</span>&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.home.getData&#125;&gt;获取整个组件实例&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure></p><p>父组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            msg:<span class="string">'我是一个首页组件'</span>,</span><br><span class="line">            title:<span class="string">'首页组件'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    run = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">'我是父组件的run'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getData = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.state.title)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Header title = &#123;<span class="keyword">this</span>.state.title&#125; run = &#123;<span class="keyword">this</span>.run&#125; home = &#123;<span class="keyword">this</span>&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line">                &lt;br/&gt;</span><br><span class="line">                &lt;br/&gt;</span><br><span class="line">                主页</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export  default Home;</span></span><br></pre></td></tr></table></figure></p><h3 id="事件传值"><a href="#事件传值" class="headerlink" title="事件传值"></a>事件传值</h3><p>可以用直接在事件方法里使用箭头函数进行传值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;()=&gt;<span class="keyword">this</span>.add(good)&#125;&gt; 添加商品&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="defaultProps和propTypes"><a href="#defaultProps和propTypes" class="headerlink" title="defaultProps和propTypes"></a>defaultProps和propTypes</h2><p>defaultProps:父子组件传值中，如果父组件调用子组件的时候不给子组件传值，可以在子组件中使用defaultProps定义的默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header.defaultProps = &#123;</span><br><span class="line">    title:<span class="string">'标题'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>propTypes：验证父组件传值的类型合法性<br>1、引入import PropTypes from ‘prop-types’;<br>2、类.propTypes = {<br>    name: PropTypes.string<br>};<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header.prototypes = &#123;</span><br><span class="line">    title: PropTypes.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>都是定义在子组件里面<br><a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">https://reactjs.org/docs/typechecking-with-proptypes.html</a></p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>react获取服务器APi接口的数据：<br>react中没有提供专门的请求数据的模块。但是我们可以使用任何第三方请求数据模块实现请求数据<br>1、axios          <a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a><br>axios的作者觉得jsonp不太友好，推荐用CORS方式更为干净（后端运行跨域）<br>1、安装axios模块npm install axios  –save   /  npm install axios  –save<br>2、在哪里使用就在哪里引入import axios from ‘axios’<br>3、看文档使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api=<span class="string">'http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20'</span>;</span><br><span class="line">axios.get(api)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2、fetch-jsonp    <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">https://github.com/camsong/fetch-jsonp</a><br>1、安装 npm install fetch-jsonp  –save<br>2、import fetchJsonp from ‘fetch-jsonp’<br>3、看文档使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetchJsonp(<span class="string">'/users.jsonp'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parsed json'</span>, json)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parsing failed'</span>, ex)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>3、其他请求数据的方法也可以…自己封装模块用原生js实现数据请求也可以…<br>远程测试API接口：<br>get请求：<br>    <a href="http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20" target="_blank" rel="noopener">http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20</a><br>jsonp请求地址:<br>    <a href="http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;callback=" target="_blank" rel="noopener">http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;callback=</a>?</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/images/react_life_cycle.png" alt="file"><br>React生命周期函数：<br>组件加载之前，组件加载完成，以及组件更新数据，组件销毁。<br>触发的一系列的方法 ，这就是组件的生命周期函数<br>组件加载的时候触发的函数：<br>constructor 、componentWillMount、 render 、componentDidMount<br>组件数据更新的时候触发的生命周期函数：<br>shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate<br>你在父组件里面改变props传值的时候触发的：<br>componentWillReceiveProps<br>组件销毁的时候触发的：<br>componentWillUnmount<br>必须记住的生命周期函数：<br><em>加载的时候：componentWillMount、 render 、componentDidMount（dom操作）<br>更新的时候：componentWillUpdate、render、componentDidUpdate</em>销毁的时候： componentWillUnmount<br>React v16.4 的生命周期<br><img src="/images/react_life_cycle2.png" alt="file"><br>原来（React v16.0前）的生命周期在React v16推出的Fiber之后就不合适了，因为如果要开启async rendering，<br>在render函数之前的所有函数，都有可能被执行多次<br>原来（React v16.0前）的生命周期有哪些是在render前执行的呢？<br>componentWillMount componentWillReceiveProps shouldComponentUpdate componentWillUpdate<br>如果开发者开了async rendering，而且又在以上这些render前执行的生命周期方法做AJAX请求的话，那AJAX将被 无谓地多次调用。。。明显不是我们期望的结果。而且在componentWillMount里发起AJAX，不管多快得到结果 也赶不上首次render，而且componentWillMount在服务器端渲染也会被调用到（当然，也许这是预期的结果），这样的IO操作放在componentDidMount里更合适</p><p>禁止不能用比劝导开发者不要这样用的效果更好，所以除了shouldComponentUpdate，其他在render函数之前的 所有函数（componentWillMount，componentWillReceiveProps，componentWillUpdate）都被 getDerivedStateFromProps替代。</p><ul><li><p>static getDerivedStateFromProps(props, state)<br>在组件创建时和更新时的render方法之前调用，它应该返回一个对象来更新状态，或者返回null来不更新任何内容。<br>getSnapshotBeforeUpdate</p></li><li><p>getSnapshotBeforeUpdate()<br>被调用于render之后，可以读取但无法使用DOM的时候。它使您的组件可以在可 能更改之前从DOM捕获一些信息（例如滚动位置）。此生命周期返回的任何值都将作为参数传递给 componentDidUpdate()<br>官网给的例子：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.listRef = React.createRef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">        <span class="comment">//我们是否要添加新的 items 到列表?</span></span><br><span class="line">        <span class="comment">// 捕捉滚动位置，以便我们可以稍后调整滚动.</span></span><br><span class="line">        <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</span><br><span class="line">            <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">            <span class="keyword">return</span> list.scrollHeight - list.scrollTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">        <span class="comment">//如果我们有snapshot值, 我们已经添加了 新的items.</span></span><br><span class="line">        <span class="comment">// 调整滚动以至于这些新的items 不会将旧items推出视图。 // (这边的snapshot是 getSnapshotBeforeUpdate方法的返回值) if (snapshot !== null) &#123;</span></span><br><span class="line">        <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">        list.scrollTop = list.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.listRef&#125;</span>&gt;</span>&#123;/* ...contents... */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><a href="https://reacttraining.com/react-router/web/example/url-params" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/example/url-params</a><br>react路由的配置：<br>    1、找到官方文档 <a href="https://reacttraining.com/react-router/web/example/basic" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/example/basic</a><br>    2、安装  cnpm install react-router-dom –save<br>    3、找到项目的根组件引入react-router-dom<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br></pre></td></tr></table></figure></p><pre><code>4、复制官网文档根组件里面的内容进行修改  （加载的组件要提前引入）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/"</span>&gt;首页&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Link to="/</span>news<span class="string">"&gt;新闻&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;Link to="</span>/product<span class="string">"&gt;商品&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/news<span class="string">" component=&#123;News&#125; /&gt;    </span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/product<span class="string">" component=&#123;Product&#125; /&gt;   </span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br></pre></td></tr></table></figure>exact表示严格匹配</code></pre><p>react动态路由传值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、动态路由配置</span><br><span class="line">    &lt;Route path=<span class="string">"/content/:aid"</span> component=&#123;Content&#125; /&gt;   </span><br><span class="line"><span class="number">2</span>、对应的动态路由加载的组件里面获取传值</span><br><span class="line">    <span class="keyword">this</span>.props.match.params</span><br><span class="line">跳转：&lt;Link to=&#123;<span class="string">`/content/<span class="subst">$&#123;value.aid&#125;</span>`</span>&#125;&gt;&#123;value.title&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp"> react get传值  </span></span><br><span class="line"><span class="regexp">1、获取 this.props.location.search</span></span><br></pre></td></tr></table></figure></p><h2 id="使用js跳转路由"><a href="#使用js跳转路由" class="headerlink" title="使用js跳转路由"></a>使用js跳转路由</h2><p>实现js跳转路由：<br><a href="https://reacttraining.com/react-router/web/example/auth-workflow" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/example/auth-workflow</a></p><p>1、要引入Redirect</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">Route,</span><br><span class="line">Link,</span><br><span class="line">Redirect,</span><br><span class="line">withRouter</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br></pre></td></tr></table></figure></code></pre><p>2、定义一个flag</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123; </span><br><span class="line">        loginFlag:<span class="literal">false</span>            </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><p>3、render里面判断flag 来决定是否跳转</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.state.loginFlag)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> "/" &#125;&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><p>4、要执行js跳转<br>    通过js改变loginFlag的状态<br>    改变以后从新render 就可以通过Redirect自己来跳转</p><h2 id="andt的使用"><a href="#andt的使用" class="headerlink" title="andt的使用"></a>andt的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>antd官网：</span><br><span class="line">https:<span class="comment">//ant.design/docs/react/introduce-cn</span></span><br><span class="line"><span class="number">2</span>、React中使用Antd</span><br><span class="line"><span class="number">1</span>、安装antd   npm install antd --save    /   yarn add antd     /  cnpm install antd --save</span><br><span class="line"><span class="number">2</span>、在您的react项目的css文件中引入 Antd的css</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'~antd/dist/antd.css'</span>;</span><br><span class="line"><span class="number">3</span>、看文档使用：</span><br><span class="line">如使用Button： </span><br><span class="line"><span class="number">1</span>、在对应的组件中引入Antd        <span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="number">2</span>、&lt;Button type=<span class="string">"primary"</span>&gt;Primary&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">3、React中使用Antd高级配置，按需引入css样式</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">我们现在已经把组件成功运行起来了，但是在实际开发过程中还有很多问题，例如上面的例子实际上加载了全部的 antd 组件的样式（对前端性能是个隐患）。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    1、安装antd         npm install antd --save</span></span><br><span class="line"><span class="regexp">2、安装（react-app-rewired）一个对 create-react-app 进行自定义配置的社区解决方案 </span></span><br><span class="line"><span class="regexp">   yarn add react-app-rewired    /</span>  cnpm install  react-app-rewired --save</span><br><span class="line"><span class="number">3</span>、修改 package.json</span><br><span class="line">react-scripts 需改为react-app-rewired</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"react-app-rewired test --env=jsdom"</span>,</span><br><span class="line">    <span class="string">"eject"</span>: <span class="string">"react-app-rewired eject"</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">4</span>、在项目根目录创建一个 config-overrides.js 用于修改默认配置</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="number">5</span>、安装babel-plugin-<span class="keyword">import</span>   babel-plugin-<span class="keyword">import</span>是一个用于按需加载组件代码和样式的 babel 插件</span><br><span class="line">yarn add babel-plugin-<span class="keyword">import</span>   /  cnpm install babel-plugin-<span class="keyword">import</span> --save</span><br><span class="line"><span class="number">6</span>、修改 config-overrides.js</span><br><span class="line"><span class="keyword">const</span> &#123; injectBabelPlugin &#125; = <span class="built_in">require</span>(<span class="string">'react-app-rewired'</span>);</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    config = injectBabelPlugin(</span><br><span class="line">        [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;],</span><br><span class="line">           config,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="number">7</span>、然后移除前面在 src/App.css 里全量添加的 @<span class="keyword">import</span> <span class="string">'~antd/dist/antd.css'</span>; 直接引入组件使用就会有对应的css</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line">        &lt;Button type=<span class="string">"primary"</span>&gt;Primary&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><h2 id="防止重复渲染"><a href="#防止重复渲染" class="headerlink" title="防止重复渲染"></a>防止重复渲染</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            comments: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                comments: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        header: <span class="string">'react'</span>, <span class="attr">body</span>: <span class="string">'is good'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        header: <span class="string">'redux'</span>, <span class="attr">body</span>: <span class="string">'is good'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.state.comments.map(<span class="function">(<span class="params">(value, index</span>) =&gt;</span> &lt;Comment key=&#123;index&#125; data=&#123;value&#125;/&gt;))&#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Comment render'</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&#123;<span class="keyword">this</span>.props.data.header&#125;&lt;<span class="regexp">/p&gt;&lt;p&gt;&#123;this.props.data.body&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Comments;</span></span><br></pre></td></tr></table></figure><p>上面会重复打印Comment render，会导致子组件重复渲染</p><p>解决办法：</p><ul><li><p>在子组件里面使用shouldComponentUpdate来控制</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState, nextContext) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextProps.data.header == <span class="keyword">this</span>.props.data.header &amp;&amp; nextProps.data.body === <span class="keyword">this</span>.props.data.body) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Comment render'</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&#123;<span class="keyword">this</span>.props.data.header&#125;&lt;<span class="regexp">/p&gt;&lt;p&gt;&#123;this.props.data.body&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>通过继承PureComponent（浅比较对象之间）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Comment render'</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;&#123;<span class="keyword">this</span>.props.header&#125;&lt;<span class="regexp">/p&gt;&lt;p&gt;&#123;this.props.body&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">父组件：把属性都传给子组件</span></span><br><span class="line"><span class="regexp"> &#123;this.state.comments.map(((value, index) =&gt; &lt;Comment key=&#123;index&#125; &#123;...value&#125;/</span>&gt;))&#125;</span><br></pre></td></tr></table></figure></li></ul><p>或者使用高阶组件：传入一个组件返回一个新的组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  Comment = React.memo(<span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Comment render'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;&#123;props.header&#125;&lt;<span class="regexp">/p&gt;&lt;p&gt;&#123;props.body&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>高阶组件也是一个组件，但是他返回另外一个组件，产生新的组件可以对属性进行包装，甚至重写部分生命周期<br>使傻瓜组件功能更强大<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hoc</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;NewCourse title=&#123;<span class="string">'react'</span>&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">NewCourse</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Course(props) &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &#123;props.title&#125;:&#123;props.des&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withCourse = <span class="function"><span class="params">Comp</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> des = <span class="string">'高阶组件'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> &lt;Comp &#123;...props&#125; des=&#123;des&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者下面的实现方式</span></span><br><span class="line"><span class="comment">// const withCourse = Comp=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     const des = '高阶组件'</span></span><br><span class="line"><span class="comment">//     // return props =&gt; &lt;Comp &#123;...props&#125; des=&#123;des&#125;&gt;&lt;/Comp&gt;</span></span><br><span class="line"><span class="comment">//     //NewComp可以省略</span></span><br><span class="line"><span class="comment">//     return class NewComp extends Component&#123;</span></span><br><span class="line"><span class="comment">//         render() &#123;</span></span><br><span class="line"><span class="comment">//             return &lt;Comp &#123;...this.props&#125; des=&#123;des&#125;&gt;&lt;/Comp&gt;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewCourse = withCourse(Course)</span><br><span class="line"></span><br><span class="line">Hoc.propTypes = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hoc;</span><br></pre></td></tr></table></figure></p><h3 id="高阶组件装饰器写法"><a href="#高阶组件装饰器写法" class="headerlink" title="高阶组件装饰器写法"></a>高阶组件装饰器写法</h3><p>ES7装饰器可用于简化高阶组件写法<br>npm install –save-dev babel-plugin-transform-decorators-legacy<br>在根目录config-overrides.js中添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; injectBabelPlugin &#125; = <span class="built_in">require</span>(<span class="string">'react-app-rewired'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">config = injectBabelPlugin( [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;], config, )</span><br><span class="line">config = injectBabelPlugin( [<span class="string">'@babel/plugin-proposal-decorators'</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;], config, )</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span> </span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">const</span> withKaikeba = <span class="function">(<span class="params">Component</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> NewComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">name</span>=<span class="string">"开课吧高阶组件"</span> /&gt;</span>; &#125;;</span></span><br><span class="line"><span class="xml">     return NewComponent; </span></span><br><span class="line"><span class="xml">     &#125;;</span></span><br><span class="line"><span class="xml">const withLog = Component=&gt;&#123;</span></span><br><span class="line"><span class="xml">    class NewComponent extends React.Component&#123; </span></span><br><span class="line">        render()&#123; return &lt;Component &#123;...this.props&#125; /&gt;; </span><br><span class="line">        &#125; </span><br><span class="line">        componentDidMount()&#123; console.log(Component.name ,'didMount',this.props) &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    return NewComponent</span><br><span class="line">&#125;</span><br><span class="line">@withKaikeba </span><br><span class="line">@withLog </span><br><span class="line">class App extends Component &#123;</span><br><span class="line">render() &#123; </span><br><span class="line">    return ( &lt;div className="App"&gt; &lt;h2&gt;hi,&#123;this.props.name&#125;&lt;/h2&gt; &lt;Button type="primary"&gt;Button&lt;/Button&gt; &lt;/div&gt; )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件复合"><a href="#组件复合" class="headerlink" title="组件复合"></a>组件复合</h2><p>组件复合给与你足够的敏捷去定义自定义组件的外观和行为，而且是以一种明确和安全的方式进行，如果组件间有公用的非UI逻辑，将他们抽取为js模块导入使用而不是继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WelcomeDialog</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Dialog&gt;</span><br><span class="line">                &lt;h1&gt;欢迎光临&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;感谢使用react&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Dialog(props)&#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;div style=&#123;&#123;border:'4px solid blue'&#125;&#125;&gt;&#123;props.children&#125;&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WelcomeDialog.propTypes = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WelcomeDialog;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dialog作为容器不关心内容和逻辑</span></span><br><span class="line"><span class="comment">// 等同于vue中slot</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div style=&#123;&#123; <span class="attr">border</span>: <span class="string">`4px solid <span class="subst">$&#123;props.color || <span class="string">"blue"</span>&#125;</span>`</span> &#125;&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">      &lt;div className=<span class="string">"footer"</span>&gt;&#123;props.footer&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WelcomeDialog通过复合提供内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WelcomeDialog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Dialog &#123;...props&#125;&gt;</span><br><span class="line">      &lt;h1&gt;欢迎光临&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;感谢使用react&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/Dialog&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Api = &#123;</span></span><br><span class="line"><span class="regexp">  getUser() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123; name: "jerry", age: 20 &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Fetcher(props) &#123;</span></span><br><span class="line"><span class="regexp">  const user = Api[props.name]();</span></span><br><span class="line"><span class="regexp">  return props.children(user);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Filter(&#123; children, type &#125;) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;React.Children.map(children, child =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        if (child.type !== type) &#123;</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return child;</span></span><br><span class="line"><span class="regexp">      &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改children</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RadioGroup</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;React.Children.map(props.children, child =&gt; &#123;</span><br><span class="line">        <span class="comment">//   vdom不可更改，克隆一个新的去改才行</span></span><br><span class="line">        <span class="keyword">return</span> React.cloneElement(child, &#123; <span class="attr">name</span>: props.name &#125;);</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Radio(&#123;children, ...rest&#125;) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="radio" &#123;...rest&#125; /</span>&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default function() &#123;</span></span><br><span class="line"><span class="regexp">  const footer = &lt;button onClick=&#123;() =&gt; alert("确定！")&#125;&gt;确定&lt;/</span>button&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="comment">/* &lt;WelcomeDialog color="green" footer=&#123;footer&#125; /&gt; */</span>&#125;</span><br><span class="line">      &#123;<span class="comment">/* &lt;Fetcher name="getUser"&gt;</span></span><br><span class="line"><span class="comment">        &#123;(&#123; name, age &#125;) =&gt; (</span></span><br><span class="line"><span class="comment">          &lt;p&gt;</span></span><br><span class="line"><span class="comment">            &#123;name&#125;-&#123;age&#125;</span></span><br><span class="line"><span class="comment">          &lt;/p&gt;</span></span><br><span class="line"><span class="comment">        )&#125;</span></span><br><span class="line"><span class="comment">      &lt;/Fetcher&gt; */</span>&#125;</span><br><span class="line">      &#123;<span class="comment">/* 过滤器，可以过滤出指定标签类型 */</span>&#125;</span><br><span class="line">      &#123;<span class="comment">/* &lt;Filter type="p"&gt;</span></span><br><span class="line"><span class="comment">        &lt;h1&gt;react&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;react很不错&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;h1&gt;vue&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;vue很不错&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;/Filter&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line">      &lt;RadioGroup name=<span class="string">"mvvm"</span>&gt;</span><br><span class="line">        &lt;Radio value=<span class="string">"vue"</span>&gt;vue&lt;<span class="regexp">/Radio&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Radio value="react"&gt;react&lt;/</span>Radio&gt;</span><br><span class="line">        &lt;Radio value=<span class="string">"react"</span>&gt;angular&lt;<span class="regexp">/Radio&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>RadioGroup&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><p>Hook是React16.8一个新增项，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><p>状态钩子 - State Hook<br>副作用钩子 - Eﬀect Hook<br>副作用钩子给函数组件增加了操作副作用的能力，它跟class组件中的componentDidMount、componentDidUpdate和componentwillUnmount具有相同的用途，只不过被合并成了一个api。<br>自定义hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义hook是一个函数，名称用“use"开头，函数内部可以调用其他钩子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setAge(<span class="number">20</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HookTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// useState(initState)</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 副作用钩子会在每次渲染时都执行</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`您点击了<span class="subst">$&#123;count&#125;</span>次`</span>;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   如果仅打算执行一次，传递第二个参数为[]</span></span><br><span class="line">  <span class="comment">//   componentDidMount</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// api调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"api调用"</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多个状态</span></span><br><span class="line">  <span class="keyword">const</span> age = useAge();</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">"banana"</span>);</span><br><span class="line">  <span class="keyword">const</span> [input, setInput] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruits, setFruits] = useState([<span class="string">"apple"</span>, <span class="string">"banana"</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;点击了&#123;count&#125;次&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点击&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;年龄：&#123;age ? age : <span class="string">'loading...'</span>&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;选择的水果：&#123;fruit&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          value=&#123;input&#125;</span><br><span class="line">          onChange=&#123;e =&gt; setInput(e.target.value)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; setFruits([...fruits, input])&#125;&gt;新增水果&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;fruits.map(<span class="function"><span class="params">f</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;f&#125; onClick=&#123;() =&gt; setFruit(f)&#125;&gt;</span><br><span class="line">            &#123;f&#125;</span><br><span class="line">          &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        ))&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>上下文提供一种不需要每层设置props就能跨多级组件传递数据的方式<br>Context相关API：<br>React.createContext<br>Context.Provider<br>Class.contextType<br>Context.Consumer<br>三种实现方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建上下文</span></span><br><span class="line"><span class="keyword">const</span> MyContext = React.createContext();</span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = MyContext;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child: &#123;prop.foo&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用hook消费</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> context = useContext(MyContext);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child2: &#123;context.foo&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用class指定静态contextType</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child3</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置静态属性通知编译器获取上下文中数据并赋值给this.context</span></span><br><span class="line">    <span class="keyword">static</span> contextType = MyContext;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child3: &#123;this.context.foo&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ContextTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Provider value=&#123;&#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* 消费方法1：Consumer */</span>&#125;</span><br><span class="line">        &lt;Consumer&gt;&#123;value =&gt; <span class="xml"><span class="tag">&lt;<span class="name">Child</span> &#123;<span class="attr">...value</span>&#125; /&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line">        &#123;<span class="comment">/* 消费方法2：hook */</span>&#125;</span><br><span class="line">        &lt;Child2 /&gt;</span><br><span class="line">        &#123;<span class="comment">/* 消费方法3：contextType */</span>&#125;</span><br><span class="line">        &lt;Child3 /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="组件的设计和实现"><a href="#组件的设计和实现" class="headerlink" title="组件的设计和实现"></a>组件的设计和实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Input, Button &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个高阶组件：扩展现有表单，事件处理、数据收集、校验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kFormCreate</span>(<span class="params">Comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.options = &#123;&#125;;</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, value &#125; = e.target;</span><br><span class="line">      <span class="built_in">console</span>.log(name, value);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; [name]: value &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//   确保值发生变化再校验</span></span><br><span class="line">        <span class="keyword">this</span>.validateField(name);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单项校验</span></span><br><span class="line">    validateField = <span class="function"><span class="params">field</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 1. 获取校验规则</span></span><br><span class="line">      <span class="keyword">const</span> rules = <span class="keyword">this</span>.options[field].rules;</span><br><span class="line">      <span class="comment">// 任意一项失败则返回false</span></span><br><span class="line">      <span class="keyword">const</span> ret = !rules.some(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rule.required) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.state[field]) &#123;</span><br><span class="line">            <span class="comment">//校验失败</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">              [field + <span class="string">"Message"</span>]: rule.message</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ret) &#123; <span class="comment">// 校验成功</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          [field + <span class="string">"Message"</span>]: <span class="string">""</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验所有字段</span></span><br><span class="line">    validate = <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> rets = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.options).map(<span class="function"><span class="params">field</span> =&gt;</span></span><br><span class="line">        <span class="keyword">this</span>.validateField(field)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> ret = rets.every(<span class="function"><span class="params">v</span> =&gt;</span> v == <span class="literal">true</span>);</span><br><span class="line">      cb(ret, <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建input包装器</span></span><br><span class="line">    getFieldDec = <span class="function">(<span class="params">field, option</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 保存当前输入项配置</span></span><br><span class="line">      <span class="keyword">this</span>.options[field] = option;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">InputComp</span> =&gt;</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;React.cloneElement(InputComp, &#123;</span><br><span class="line">            name: field,</span><br><span class="line">            value: <span class="keyword">this</span>.state[field] || <span class="string">""</span>,</span><br><span class="line">            onChange: <span class="keyword">this</span>.handleChange</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">          &#123;<span class="comment">/* 校验错误信息 */</span>&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state[field+<span class="string">'Message'</span>] &amp;&amp; (</span><br><span class="line">              &lt;p style=&#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;&#125;&gt;&#123;<span class="keyword">this</span>.state[field+<span class="string">'Message'</span>]&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          )&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Comp</span> <span class="attr">getFieldDec</span>=<span class="string">&#123;this.getFieldDec&#125;</span> <span class="attr">validate</span>=<span class="string">&#123;this.validate&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@kFormCreate</span></span><br><span class="line"><span class="xml">class KForm extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  onSubmit = () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    console.log("submit");</span></span><br><span class="line"><span class="xml">    // 校验所有项</span></span><br><span class="line"><span class="xml">    this.props.validate((isValid, data) =&gt; &#123;</span></span><br><span class="line"><span class="xml">      if (isValid) &#123;</span></span><br><span class="line"><span class="xml">        //提交登录</span></span><br><span class="line"><span class="xml">        console.log("登录：", data);</span></span><br><span class="line"><span class="xml">        // 后续登录逻辑</span></span><br><span class="line"><span class="xml">      &#125; else &#123;</span></span><br><span class="line"><span class="xml">        alert("校验失败");</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    const &#123; getFieldDec &#125; = this.props;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;getFieldDec("uname", &#123;</span><br><span class="line">          rules: [&#123; required: true, message: "用户名必填" &#125;]</span><br><span class="line">        &#125;)(&lt;Input /&gt;)&#125;</span><br><span class="line"></span><br><span class="line">        &#123;getFieldDec("pwd", &#123;</span><br><span class="line">          rules: [&#123; required: true, message: "密码必填" &#125;]</span><br><span class="line">        &#125;)(&lt;Input type="password" /&gt;)&#125;</span><br><span class="line"></span><br><span class="line">        &lt;Button onClick=&#123;this.onSubmit&#125;&gt;登录&lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default KForm;</span><br></pre></td></tr></table></figure><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p><img src="/images/redux.png" alt="file]"><br>安装<br>npm install redux –save<br>创建store.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123; <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">        <span class="keyword">return</span> state + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'minus'</span>:</span><br><span class="line">        <span class="keyword">return</span> state - <span class="number">1</span> <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(counterReducer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>应用<br>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span> <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">              &lt;div&gt;</span><br><span class="line">               &lt;button onClick=&#123;()=&gt;store.dispatch(&#123;type:"add"&#125;)&#125;&gt;+&lt;/button&gt; </span><br><span class="line">               &lt;button onClick=&#123;()=&gt;store.dispatch(&#123;type:"minus"&#125;)&#125;&gt;-&lt;/button&gt; </span><br><span class="line"><span class="xml">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></p><p>订阅<br>index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    ReactDom.render(</span><br><span class="line">        &lt;App/&gt;,</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure></p><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>react整合redux，简化使用难度，需要react-redux的支持<br>安装<br>npm install react-redux –save<br>注入store<br>index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span> <span class="tag">&lt;<span class="name">App</span>/&gt;</span> <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>))</span><br></pre></td></tr></table></figure></p><p>使用状态<br>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">num</span>: state&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">add</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123;<span class="attr">type</span>: <span class="string">"add"</span>&#125;), <span class="attr">minus</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123;<span class="attr">type</span>: <span class="string">"add"</span>&#125;)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; this.props.add()&#125;&gt;+&lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; this.props.minus()&#125;&gt;-&lt;/button&gt;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure></p><h3 id="装饰器写法"><a href="#装饰器写法" class="headerlink" title="装饰器写法"></a>装饰器写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line">@connect(</span><br><span class="line">    state =&gt; (&#123;<span class="attr">num</span>: state&#125;), dispatch =&gt; (&#123;</span><br><span class="line"></span><br><span class="line">        add: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123;<span class="attr">type</span>: <span class="string">"add"</span>&#125;),</span><br><span class="line"></span><br><span class="line">        minus: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123;<span class="attr">type</span>: <span class="string">"add"</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; this.props.add()&#125;&gt;+&lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; this.props.minus()&#125;&gt;-&lt;/button&gt;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>redux只支持同步，实现异步任务需要中间件支持<br>安装<br>npm install redux-thunk redux-logger –save<br>试用redux-logger<br>store.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;applyMiddleware, createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    counterReducer, applyMiddleware(logger));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>试用redux-thunk<br>配置<br>store.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;applyMiddleware, createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    counterReducer, applyMiddleware(logger, thunk));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p>应用<br>App.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line">@connect(</span><br><span class="line">    state =&gt; (&#123;<span class="attr">num</span>: state&#125;), &#123;</span><br><span class="line">        add: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">"add"</span>&#125;), <span class="attr">minus</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">"minus"</span>&#125;), <span class="attr">asyncAdd</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步结束后，手动执行dispatch dispatch(&#123; type: "add" &#125;); &#125;, 1000); &#125;</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                render() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;button onClick=&#123;() =&gt; this.props.add()&#125;&gt;+&lt;/button&gt;</span><br><span class="line">                            &lt;button onClick=&#123;() =&gt; this.props.minus()&#125;&gt;-&lt;/button&gt;</span><br><span class="line">                            &lt;button onClick=&#123;() =&gt; this.props.asyncAdd()&#125;&gt;延迟添加&lt;/button&gt;</span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></p><p>多个reducer<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  combineReducers(&#123; <span class="attr">counter</span>: counterReducer, user &#125;),</span><br><span class="line">  applyMiddleware(logger, thunk)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//需要加个.counter</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">num</span>: state.counter &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><p>安装<br>npm install –save react-router-dom</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter, Link, Route, Switch, Redirect&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; <span class="keyword">from</span> <span class="string">"../store/user.redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h3&gt;课程列表&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;li&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Link to="/</span>detail/web<span class="string">"&gt;Web架构师&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;</span></span><br><span class="line"><span class="string">                    &lt;Link to="</span>/detail/python<span class="string">"&gt;Python架构师&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 当前用户信息</span></span><br><span class="line"><span class="string">function About(params) &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;个人中心&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/about/me<span class="string">"&gt;个人信息&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/about/order<span class="string">"&gt;订单查询&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path="</span>/about/me<span class="string">" component=&#123;() =&gt; &lt;div&gt;Me&lt;/div&gt;&#125;/&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path="</span>/about/order<span class="string">" component=&#123;() =&gt; &lt;div&gt;order&lt;/div&gt;&#125;/&gt;</span></span><br><span class="line"><span class="string">                &lt;Redirect to="</span>/about/me<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function NoMatch(&#123;location&#125;) &#123;</span></span><br><span class="line"><span class="string">    return &lt;div&gt;404, &#123;location.pathname&#125;不存在&lt;/div&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 传递进来路由器对象</span></span><br><span class="line"><span class="string">function Detail(props) &#123;</span></span><br><span class="line"><span class="string">    // 1.history: 导航指令</span></span><br><span class="line"><span class="string">    // 2.match: 获取参数信息</span></span><br><span class="line"><span class="string">    // 3.location: 当前url信息</span></span><br><span class="line"><span class="string">    console.log(props);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            当前课程：&#123;props.match.params.course&#125;</span></span><br><span class="line"><span class="string">            &lt;button onClick=&#123;props.history.goBack&#125;&gt;后退&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 路由守卫</span></span><br><span class="line"><span class="string">// 希望用法：&lt;PrivateRoute component=&#123;About&#125; path="</span>/about<span class="string">" ...&gt;</span></span><br><span class="line"><span class="string">const PrivateRoute = connect(state =&gt; (&#123;isLogin: state.user.isLogin&#125;))(</span></span><br><span class="line"><span class="string">    (&#123;component: Comp, isLogin, ...rest&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">        // 做认证</span></span><br><span class="line"><span class="string">        // render:根据条件动态渲染组件</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;Route</span></span><br><span class="line"><span class="string">                &#123;...rest&#125;</span></span><br><span class="line"><span class="string">                render=&#123;props =&gt;</span></span><br><span class="line"><span class="string">                    isLogin ? (</span></span><br><span class="line"><span class="string">                        &lt;Comp/&gt;</span></span><br><span class="line"><span class="string">                    ) : (</span></span><br><span class="line"><span class="string">                        &lt;Redirect</span></span><br><span class="line"><span class="string">                            to=&#123;&#123;</span></span><br><span class="line"><span class="string">                                pathname: "</span>/login<span class="string">",</span></span><br><span class="line"><span class="string">                                state: &#123;redirect: props.location.pathname&#125;</span></span><br><span class="line"><span class="string">                            &#125;&#125;</span></span><br><span class="line"><span class="string">                        /&gt;</span></span><br><span class="line"><span class="string">                    )</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            /&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 登录组件</span></span><br><span class="line"><span class="string">const Login = connect(</span></span><br><span class="line"><span class="string">    state =&gt; (&#123;</span></span><br><span class="line"><span class="string">        isLogin: state.user.isLogin,</span></span><br><span class="line"><span class="string">        loading: state.user.loading</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    &#123;login&#125;</span></span><br><span class="line"><span class="string">)(function (&#123;location, isLogin, login, loading&#125;) &#123;</span></span><br><span class="line"><span class="string">    const redirect = location.state.redirect || "</span>/<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (isLogin) &#123;</span></span><br><span class="line"><span class="string">        return &lt;Redirect to=&#123;redirect&#125;/&gt;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;用户登录&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;hr/&gt;</span></span><br><span class="line"><span class="string">            &lt;button onClick=&#123;login&#125; disabled=&#123;loading&#125;&gt;</span></span><br><span class="line"><span class="string">                &#123;loading ? "</span>登录中...<span class="string">" : "</span>登录<span class="string">"&#125;</span></span><br><span class="line"><span class="string">            &lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default function RouteSample() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;BrowserRouter&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &#123;/* 导航链接 */&#125;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;Link to="</span>/<span class="string">"&gt;首页&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                        &lt;Link to="</span>/about<span class="string">"&gt;关于&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &#123;/* 路由配置：路由即组件 */&#125;</span></span><br><span class="line"><span class="string">                    &#123;/* 路由匹配默认是包容性质 */&#125;</span></span><br><span class="line"><span class="string">                    &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route path="</span>/detail/:course<span class="string">" component=&#123;Detail&#125;/&gt;</span></span><br><span class="line"><span class="string">                        &lt;PrivateRoute path="</span>/about<span class="string">" component=&#123;About&#125;/&gt;</span></span><br><span class="line"><span class="string">                        &lt;Route path="</span>/login<span class="string">" component=&#123;Login&#125;/&gt;</span></span><br><span class="line"><span class="string">                        &#123;/* 404：没有path，必然匹配 */&#125;</span></span><br><span class="line"><span class="string">                        &lt;Route component=&#123;NoMatch&#125;/&gt;</span></span><br><span class="line"><span class="string">                    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>user.redux.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">  isLogin: <span class="literal">false</span>,</span><br><span class="line">  loading: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> user = <span class="function">(<span class="params">state = initial, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"requestLogin"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        isLogin: <span class="literal">false</span>,</span><br><span class="line">        loading: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"login"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        isLogin: <span class="literal">true</span>,</span><br><span class="line">        loading: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action creator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: <span class="string">"requestLogin"</span> &#125;);</span><br><span class="line">  <span class="comment">//   做异步操作</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">"login"</span> &#125;);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">"redux-logger"</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer &#125; <span class="keyword">from</span> <span class="string">"./count.redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; user &#125; <span class="keyword">from</span> <span class="string">"./user.redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  combineReducers(&#123; <span class="attr">counter</span>: counterReducer, user &#125;),</span><br><span class="line">  applyMiddleware(logger, thunk)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><h2 id="redux-saga使用–异步"><a href="#redux-saga使用–异步" class="headerlink" title="redux-saga使用–异步"></a>redux-saga使用–异步</h2><p>安装：npm install –save redux-saga<br>使用：用户登录redux-saga实现<br>创建./store/sagas.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;call, put, takeEvery&#125; <span class="keyword">from</span> <span class="string">"redux-saga/effects"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟登录</span></span><br><span class="line"><span class="keyword">const</span> UserService = &#123;</span><br><span class="line">        login(uname) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (uname === <span class="string">"Jerry"</span>) &#123;</span><br><span class="line">                        resolve(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"Jerry"</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        reject(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">1000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker Saga</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">login</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">"requestLogin"</span>&#125;);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">yield</span> call(UserService.login, action.uname);</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">"loginSuccess"</span>, result&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (message) &#123;</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">"loginFailure"</span>, message&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> takeEvery(<span class="string">"login"</span>, login);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure></p><p>修改user.redux.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> user = (</span><br><span class="line">    state = &#123;<span class="attr">isLogin</span>: <span class="literal">false</span>, <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: <span class="string">""</span>&#125;,</span><br><span class="line">    action) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"requestLogin"</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">isLogin</span>: <span class="literal">false</span>, <span class="attr">loading</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="string">""</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"loginSuccess"</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">isLogin</span>: <span class="literal">true</span>, <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: <span class="string">""</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"loginFailure"</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">isLogin</span>: <span class="literal">false</span>, <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: action.message&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">uname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>: <span class="string">"login"</span>, uname&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export function login() &#123;</span></span><br><span class="line"><span class="comment">//     return dispatch =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         dispatch(&#123;type: "requestLogin"&#125;);</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             dispatch(&#123;type: "login"&#125;);</span></span><br><span class="line"><span class="comment">//         &#125;, 2000);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>注册redux-saga，./store/index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;user&#125; <span class="keyword">from</span> <span class="string">"./user.redux"</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">"redux-saga"</span>;</span><br><span class="line"><span class="keyword">import</span> mySaga <span class="keyword">from</span> <span class="string">"./sagas"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    combineReducers(&#123;user&#125;),</span><br><span class="line"></span><br><span class="line">    applyMiddleware(logger, sagaMiddleware));</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(mySaga);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>使用状态，RouteSample.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Login = connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">        isLogin: state.user.isLogin, <span class="attr">loading</span>: state.user.loading, <span class="attr">error</span>: state.user.error <span class="comment">// 登录错误信息</span></span><br><span class="line">    &#125;), &#123;login&#125;)(<span class="function">(<span class="params">&#123;location, isLogin, login, loading, error&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> redirect = location.state.redirect || <span class="string">"/"</span>;</span><br><span class="line">        <span class="keyword">const</span> [uname, setUname] = useState(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (isLogin) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;redirect&#125;/</span>&gt;</span>;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        return (</span></span><br><span class="line">            &lt;div&gt;&lt;p&gt;用户登录&lt;/p&gt;</span><br><span class="line">                &lt;hr/&gt;</span><br><span class="line">                &#123;/* 显示错误信息 */&#125;</span><br><span class="line">                &#123;error &amp;&amp; &lt;p&gt;&#123;error&#125;&lt;/p&gt;&#125;</span><br><span class="line">                &#123;/* 输入用户名 */&#125;</span><br><span class="line">                &lt;input type="text"</span><br><span class="line">                       onChange=&#123;e =&gt; setUname(e.target.value)&#125;</span><br><span class="line">                       value=&#123;uname&#125;/&gt; &#123;/* 登录传参 */&#125;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; login(uname)&#125; disabled=&#123;loading&#125;&gt; &#123;loading ? "登录中..." : "登录"&#125; &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">            ;</span><br><span class="line">    &#125;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></p><h2 id="umi"><a href="#umi" class="headerlink" title="umi"></a>umi</h2><p><a href="https://umijs.org/zh/guide/develop-umi-ui-plugin.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">https://umijs.org/zh/guide/develop-umi-ui-plugin.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Redis</title>
      <link href="/2019/12/19/python-Redis/"/>
      <url>/2019/12/19/python-Redis/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>中文文档：<br><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p><a href="https://www.cnblogs.com/allen-w/p/9472033.html" target="_blank" rel="noopener">https://www.cnblogs.com/allen-w/p/9472033.html</a></p><p>命令参考：<br><a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p><p>关闭服务：<br>ps aux | grep redis<br>然后<br>sudo kill - 9 pid</p><p>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SELECT <span class="number">5</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">5</span>]&gt; SELECT <span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment">#默认16个数据库</span></span><br></pre></td></tr></table></figure></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>字符串string</li><li>哈希hash</li><li>列表list</li><li>集合set</li><li>有序集合zset</li></ul><h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><p><a href="http://www.redis.cn/commands.html#string" target="_blank" rel="noopener">http://www.redis.cn/commands.html#string</a><br>可以是图片信息也可以是json对象描述信息，value最多可以容纳长度是512M</p><ul><li><p>增 改<br>  set设置值，存在则更新</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; KEYS *</span><br><span class="line">(empty list <span class="keyword">or</span> set)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name hans</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">"hans"</span></span><br></pre></td></tr></table></figure><p>  mset设置多个值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MSET a1 java a2 c</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get a1</span><br><span class="line"><span class="string">"java"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get a2</span><br><span class="line"><span class="string">"c"</span></span><br></pre></td></tr></table></figure><p>  追加信息</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; APPEND a1 aaa</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get a1</span><br><span class="line"><span class="string">"javaaaa"</span></span><br></pre></td></tr></table></figure></li><li><p>查<br>  get key<br>  获取多个值:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mget key1 key2</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MGET a1 a2</span><br><span class="line"><span class="number">1</span>) <span class="string">"javaaaa"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"c"</span></span><br></pre></td></tr></table></figure></li><li><p>删<br>  获取所有键：<br>  key pattern 支持正则表达式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; KEYS *</span><br><span class="line"><span class="number">1</span>) <span class="string">"a1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"a2"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"app"</span></span><br></pre></td></tr></table></figure><p>  判断是否存在exists key</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; EXISTS a1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; EXISTS a5</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure><p>  查看key的类型</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; TYPE a1</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>  删除del</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> a1 a2</span><br><span class="line">(integer) <span class="number">2</span></span><br></pre></td></tr></table></figure><p>  设置过期时间<br>  expire ‘a1’ 3</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; EXPIRE name <span class="number">3</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">"hans"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>  查看过期时间TTL，永久有效是-1</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; TTL app</span><br><span class="line">(integer) <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><pre><code>hash用于存储对象，对象的结构的属性、值值的类型为string</code></pre><ul><li><p>增 改</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET user name hans</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET user name hanss</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure><p>  设置多个：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET user age <span class="number">18</span> name hans</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li><p>查<br>  获取指定键所有属性hkeys key</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS user</span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"age"</span></span><br></pre></td></tr></table></figure><p>  获取一个属性值：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET user name</span><br><span class="line"><span class="string">"hans"</span></span><br></pre></td></tr></table></figure><p>  获取多个属性的值：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET user name age</span><br><span class="line"><span class="number">1</span>) <span class="string">"hans"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"18"</span></span><br></pre></td></tr></table></figure><p>  获取所有的值：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS user</span><br><span class="line"><span class="number">1</span>)  <span class="string">"hans"</span></span><br><span class="line"><span class="number">2</span>)  <span class="string">"18"</span></span><br></pre></td></tr></table></figure></li><li><p>删<br>  删除某个属性的值:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HDEL user name</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS user</span><br><span class="line"><span class="number">1</span>) <span class="string">"age"</span></span><br></pre></td></tr></table></figure><p>  删除某个key</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> user</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS user</span><br><span class="line">(empty list <span class="keyword">or</span> set)</span><br></pre></td></tr></table></figure></li></ul><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><p>列表元素类型为string<br>查找插入顺序排序</p><ul><li><p>增<br>从左侧插入数据</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH a <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure><p>从右侧插入数据   </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH a1 <span class="number">0</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure><p>指定元素的前或后插入新元素<br>  在前：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LINSERT a before <span class="number">3</span> <span class="number">11</span></span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><p>  在后：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LINSERT a after <span class="number">3</span> <span class="number">12</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>查<br>  -1代表全部<br>  LRANGE a  0 -1</p></li><li><p>改</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LSET a <span class="number">1</span> <span class="number">55</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"55"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除<br>  删除指定元素<br>  lrem key count value<br>  count&gt;0 从头往尾移除<br>  count&lt;0 从尾往头移除<br>  count=0 移除所有</p><p>  从a列表右侧开始删除2个 ‘2’</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"55"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">7</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">8</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LREM a <span class="number">-2</span> <span class="number">2</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE a  <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"11"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"55"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><p>无序集合<br>元素为string类型<br>元素具有唯一性，不重复<br>说明：对于集合没有修改操作</p><ul><li><p>增加</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD a3 zhangsan lisi wangwu</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>获取</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS a3</span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS a3</span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM a3 wangwu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS a3</span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="zset类型"><a href="#zset类型" class="headerlink" title="zset类型"></a>zset类型</h3><p>有序集合<br>元素为string类型<br>元素唯一性，不重复<br>每个元素关联一个double类型的score，表示权重元素从小到大排序</p><ul><li><p>增加</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD a4 <span class="number">4</span> lisi <span class="number">5</span> wangwu <span class="number">3</span> zhangsan</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>查找</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE a4 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br></pre></td></tr></table></figure><p>  查看权值3-4之间的</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE a4 <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br></pre></td></tr></table></figure><p>  返回权值:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZSCORE  a4 zhangsan</span><br><span class="line"><span class="string">"3"</span></span><br></pre></td></tr></table></figure></li><li><p>删除<br>  指定数据，可以是多值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZREM a4 zhangsan</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE a4 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><p>  删除权重在指定范围的元素</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE a4 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZSCORE a4</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'zscore'</span> command</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZREMRANGEBYSCORE a4 <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE a4 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="与python交互"><a href="#与python交互" class="headerlink" title="与python交互"></a>与python交互</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure><p>引入模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p><p>StrictRedis对象用于连接redis服务器<br><a href="https://pypi.org/project/redis/" target="_blank" rel="noopener">https://pypi.org/project/redis/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: r = redis.Redis()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: r.set(<span class="string">'foo'</span>,<span class="string">'bar'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: r.get(<span class="string">'foo'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">b'bar'</span></span><br></pre></td></tr></table></figure><p>sessions的操作：<br><a href="https://pypi.org/project/django-redis-sessions/0.6.1/" target="_blank" rel="noopener">https://pypi.org/project/django-redis-sessions/0.6.1/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE = <span class="string">'redis_sessions.session'</span></span><br><span class="line">SESSION_REDIS = &#123;</span><br><span class="line">    <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'port'</span>: <span class="number">6379</span>,</span><br><span class="line">    <span class="string">'db'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># 'password': 'password',</span></span><br><span class="line">    <span class="string">'prefix'</span>: <span class="string">'session'</span>,</span><br><span class="line">    <span class="string">'socket_timeout'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置sessions后查看redis数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt; SELECT <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt; KEYS *</span><br><span class="line"><span class="number">1</span>) <span class="string">"session:2l30v1i2qy241y56ovm1ty11qa5hnrmp"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt; GET session:<span class="number">2l</span>30v1i2qy241y56ovm1ty11qa5hnrmp</span><br><span class="line"><span class="string">"ZmU1M2MzNDIwNzBmNGUzYzVmNjljYmI2ODJlZjQzOWVlYWQ2YjAwZjp7Im51bTEiOjJ9"</span></span><br></pre></td></tr></table></figure></p><p>base64解码后：<br>fe53c342070f4e3c5f69cbb682ef439eead6b00f:{“num1”:2}<br>num1即为设置的session</p><h2 id="redis搭建主从-备份-读写分离"><a href="#redis搭建主从-备份-读写分离" class="headerlink" title="redis搭建主从-备份 读写分离"></a>redis搭建主从-备份 读写分离</h2><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django图片上传、分页</title>
      <link href="/2019/12/18/python-Django%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E5%88%86%E9%A1%B5/"/>
      <url>/2019/12/18/python-Django%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="配置上传的保存目录"><a href="#配置上传的保存目录" class="headerlink" title="配置上传的保存目录"></a>配置上传的保存目录</h2><ul><li><p>新建保存目录，可以在任意位置新建，也可以在static下面新建media目录</p></li><li><p>配置上传的文件保存目录（settings.py）<br> MEDIA_ROOT = MEDIA_ROOT = os.path.join(BASE_DIR,’static/media’)</p></li></ul><h2 id="后台管理页面上传图片"><a href="#后台管理页面上传图片" class="headerlink" title="后台管理页面上传图片"></a>后台管理页面上传图片</h2><ul><li>新建模型类： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PicTest</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">goods_pic = models.ImageField(upload_to=<span class="string">'books'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>生成迁移文件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure></li><li><p>在admin里面注册</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo,HeroInfo,PicTest</span><br><span class="line">admin.site.register(PicTest)</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/WX20191219-102524@2x.png" alt="image"><br><img src="/images/WX20191219-102655.png" alt="image"></p><h2 id="用户自定义页面上传图片"><a href="#用户自定义页面上传图片" class="headerlink" title="用户自定义页面上传图片"></a>用户自定义页面上传图片</h2><p><a href="https://yiyibooks.cn/xx/django_182/topics/http/file-uploads.html" target="_blank" rel="noopener">https://yiyibooks.cn/xx/django_182/topics/http/file-uploads.html</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/upload_action/"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上传处理器<br>(“django.core.files.uploadhandler.MemoryFileUploadHandler”,<br> “django.core.files.uploadhandler.TemporaryFileUploadHandler”,)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''上传图片处理'''</span></span><br><span class="line">    pic = request.FILES[<span class="string">'pic'</span>]</span><br><span class="line">    print(type(pic))</span><br><span class="line">    <span class="comment">#django.core.files.uploadhandler.MemoryFileUploadHandler 不大于2.5M</span></span><br><span class="line">    <span class="comment">#django.core.files.uploadhandler.TemporaryFileUploadHandler 不于2.5M</span></span><br><span class="line">    path  = <span class="string">'%s/books/%s'</span>%(settings.MEDIA_ROOT,pic.name)</span><br><span class="line">    <span class="keyword">with</span> open(path,<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> pic.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line"></span><br><span class="line">    PicTest.objects.create(goods_pic=<span class="string">'books/%s'</span>%pic.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p> select * from books_pictest;<br> +—-+——————————–+<br>| id | goods_pic                      |<br>+—-+——————————–+<br>|  1 | books/screen.png               |<br>|  2 | books/技术方案整理.pages       |<br>+—-+——————————–+</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><a href="https://yiyibooks.cn/xx/django_182/topics/pagination.html" target="_blank" rel="noopener">https://yiyibooks.cn/xx/django_182/topics/pagination.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>objects = [<span class="string">'john'</span>, <span class="string">'paul'</span>, <span class="string">'george'</span>, <span class="string">'ringo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Paginator(objects, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.count</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.num_pages</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.page_range</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1 = p.page(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1</span><br><span class="line">&lt;Page <span class="number">1</span> of <span class="number">2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1.object_list</span><br><span class="line">[<span class="string">'john'</span>, <span class="string">'paul'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2 = p.page(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.object_list</span><br><span class="line">[<span class="string">'george'</span>, <span class="string">'ringo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.has_next()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.has_previous()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.has_other_pages()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.next_page_number()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">EmptyPage: That page contains no results</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.previous_page_number()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.start_index() <span class="comment"># The 1-based index of the first item on this page</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.end_index() <span class="comment"># The 1-based index of the last item on this page</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.page(<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">EmptyPage: That page number <span class="keyword">is</span> less than <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.page(<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">EmptyPage: That page contains no results</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 基础重点</title>
      <link href="/2019/12/13/python-%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/"/>
      <url>/2019/12/13/python-%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="ord函数可以将字符的ASCII码值转换为数字"><a href="#ord函数可以将字符的ASCII码值转换为数字" class="headerlink" title="ord函数可以将字符的ASCII码值转换为数字"></a>ord函数可以将字符的ASCII码值转换为数字</h2><h2 id="查找python保留的关键字"><a href="#查找python保留的关键字" class="headerlink" title="查找python保留的关键字"></a>查找python保留的关键字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">6</span>]: keyword.kwlist</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">[<span class="string">'False'</span>,</span><br><span class="line"> <span class="string">'None'</span>,</span><br><span class="line"> <span class="string">'True'</span>,</span><br><span class="line"> <span class="string">'and'</span>,</span><br><span class="line"> <span class="string">'as'</span>,</span><br><span class="line"> <span class="string">'assert'</span>,</span><br><span class="line"> <span class="string">'async'</span>,</span><br><span class="line"> <span class="string">'await'</span>,</span><br><span class="line"> <span class="string">'break'</span>,</span><br><span class="line"> <span class="string">'class'</span>,</span><br><span class="line"> <span class="string">'continue'</span>,</span><br><span class="line"> <span class="string">'def'</span>,</span><br><span class="line"> <span class="string">'del'</span>,</span><br><span class="line"> <span class="string">'elif'</span>,</span><br><span class="line"> <span class="string">'else'</span>,</span><br><span class="line"> <span class="string">'except'</span>,</span><br><span class="line"> <span class="string">'finally'</span>,</span><br><span class="line"> <span class="string">'for'</span>,</span><br><span class="line"> <span class="string">'from'</span>,</span><br><span class="line"> <span class="string">'global'</span>,</span><br><span class="line"> <span class="string">'if'</span>,</span><br><span class="line"> <span class="string">'import'</span>,</span><br><span class="line"> <span class="string">'in'</span>,</span><br><span class="line"> <span class="string">'is'</span>,</span><br><span class="line"> <span class="string">'lambda'</span>,</span><br><span class="line"> <span class="string">'nonlocal'</span>,</span><br><span class="line"> <span class="string">'not'</span>,</span><br><span class="line"> <span class="string">'or'</span>,</span><br><span class="line"> <span class="string">'pass'</span>,</span><br><span class="line"> <span class="string">'raise'</span>,</span><br><span class="line"> <span class="string">'return'</span>,</span><br><span class="line"> <span class="string">'try'</span>,</span><br><span class="line"> <span class="string">'while'</span>,</span><br><span class="line"> <span class="string">'with'</span>,</span><br><span class="line"> <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><h2 id="python的命名规则"><a href="#python的命名规则" class="headerlink" title="python的命名规则"></a>python的命名规则</h2><p>由字母、下划线_和数字组成 不能是特殊字符 但是可以是汉字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: 我 = <span class="string">'就是我'</span></span><br><span class="line">In [<span class="number">9</span>]: print(我)</span><br><span class="line">就是我</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 数字类型 </span></span><br><span class="line">整数的位数是任意的 当超过计算机的计算功能时，会自动转用高精度计算</span><br><span class="line"></span><br><span class="line">浮点数计算时，可能会出现小数位数不确定的情况，所有语言都存在这个问题</span><br><span class="line">``` python</span><br><span class="line">In [<span class="number">11</span>]: <span class="number">0.1</span>+<span class="number">0.2</span></span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure></p><p>字符转可以是单引号 双引号 三引号 三引号可以分布在连续的多行上 其他的必须在一行显示</p><p>布尔值可以和数值进行计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">False</span>+<span class="number">2</span></span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">True</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>// 取整数<br>/ 除<br>** 幂</p><h2 id="序列结构"><a href="#序列结构" class="headerlink" title="序列结构"></a>序列结构</h2><p>python中内置了5个人常用的序列结构，分别是列表、元祖、集合、字典和字符串</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引可以是负数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: verse=[<span class="string">'湖人'</span>,<span class="string">'火箭'</span>,<span class="string">'勇士'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: verse[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'勇士'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: verse[<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'勇士'</span></span><br></pre></td></tr></table></figure></p><p>负数可以做索引，最后一个元素的下标是-1</p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>sname[start:end:step]<br>step:默认步数是1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: print(verse[:])</span><br><span class="line">[<span class="string">'湖人'</span>, <span class="string">'火箭'</span>, <span class="string">'勇士'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: print(verse[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line">[<span class="string">'火箭'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: print(verse[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">[<span class="string">'湖人'</span>, <span class="string">'火箭'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: print(verse[<span class="number">0</span>:<span class="number">2</span>:<span class="number">2</span>])</span><br><span class="line">[<span class="string">'湖人'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h3><p>在python中，支持两种相同类型的序列相加操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: print(num+verse)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'湖人'</span>, <span class="string">'火箭'</span>, <span class="string">'勇士'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="序列乘法"><a href="#序列乘法" class="headerlink" title="序列乘法"></a>序列乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: print(num*<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="检查某个元素是否存在"><a href="#检查某个元素是否存在" class="headerlink" title="检查某个元素是否存在"></a>检查某个元素是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: print(<span class="number">2</span> <span class="keyword">in</span> num)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="序列长度、最大值、最小值"><a href="#序列长度、最大值、最小值" class="headerlink" title="序列长度、最大值、最小值"></a>序列长度、最大值、最小值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: len(num)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: max(num)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: min(num)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>创建空列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: ls = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: list(range(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">23</span>]: [<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: ls = list(range(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: print(ls)</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">del</span> ls</span><br></pre></td></tr></table></figure></p><p>遍历：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: <span class="keyword">for</span> item <span class="keyword">in</span> ls:</span><br><span class="line">    ...:     print(item)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">//方法<span class="number">2</span></span><br><span class="line">In [<span class="number">31</span>]: <span class="keyword">for</span> index,item <span class="keyword">in</span> enumerate(ls):</span><br><span class="line">    ...:     print(index,item)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">12</span></span><br><span class="line"><span class="number">2</span> <span class="number">14</span></span><br><span class="line"><span class="number">3</span> <span class="number">16</span></span><br><span class="line"><span class="number">4</span> <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>添加元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: ls.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: print(ls)</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><p>查找按索引</p><p>删除：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: <span class="keyword">del</span> ls[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: print(ls)</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">1</span>]</span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">In [<span class="number">39</span>]: ls.remove(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: print(ls)</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>统计元素出现的个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: print(ls)</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: print(ls.count(<span class="number">10</span>))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>排序：使用list中用sort方法或者使用内置的sorted()函数</p><p>不同点：<br>sorted()，会建立一个原列表的副本，改副本为排序后的列表</p><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>1、生成指定返回的数值列表，语法格式如下(生成随机数列表)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: randomnum= [random.randint(<span class="number">10</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span>  range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: print(randomnum)</span><br><span class="line">[<span class="number">65</span>, <span class="number">51</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">83</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">96</span>]</span><br></pre></td></tr></table></figure></p><p>2、根据列表生成指定需求的列表，语法格式如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: newnum = [int(x*<span class="number">0.5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> randomnum]</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: print(newnum)</span><br><span class="line">[<span class="number">32</span>, <span class="number">25</span>, <span class="number">34</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">35</span>, <span class="number">21</span>, <span class="number">48</span>]</span><br></pre></td></tr></table></figure></p><p>3、从列表中选择符合条件的元素组成新的元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">60</span>]: num = [x <span class="keyword">for</span> x <span class="keyword">in</span> newnum <span class="keyword">if</span> x &gt;<span class="number">30</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: print(num)</span><br><span class="line">[<span class="number">32</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">35</span>, <span class="number">48</span>]</span><br></pre></td></tr></table></figure></p><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><p>元祖和列表的主要区别是元祖是不可变序列，列表是可变序列</p><p>创建空元祖：<br>tuple = ()<br>创建数值元祖：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: tuple(range(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">Out[<span class="number">63</span>]: (<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure></p><p>删除使用del</p><p>查找元素使用下标</p><p>修改元素只能重新赋值但是可以使用+进行连接组合：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: c = b+(<span class="number">100</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: print(c)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h3 id="元祖推导式"><a href="#元祖推导式" class="headerlink" title="元祖推导式"></a>元祖推导式</h3><p>和列表的推导式类似，不同的是元祖推导出来的结果是生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: randomnumber = (random.randint(<span class="number">10</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: print(randomnumber)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1109e8660</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: print(tuple(randomnumber))</span><br><span class="line">(<span class="number">49</span>, <span class="number">75</span>, <span class="number">21</span>, <span class="number">100</span>, <span class="number">73</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>遍历生成器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">103</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> randomnumber:</span><br><span class="line">     ...:     print(i,end=<span class="string">" "</span>)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line"><span class="number">11</span> <span class="number">16</span> <span class="number">46</span> <span class="number">97</span> <span class="number">45</span> <span class="number">79</span> <span class="number">11</span> <span class="number">29</span> <span class="number">98</span> <span class="number">62</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>:使用__next__方法</span><br><span class="line">In [<span class="number">105</span>]: print(randomnumber.__next__())</span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: print(randomnumber.__next__())</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure></p><p>遍历后原生成器对象已经不存在了</p><p>元祖和列表比较</p><ul><li>元祖比列表的访问和处理速度快</li><li>列表不能作为字典的键，而元祖则可以</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类的命令满足大驼峰命名法</p><h3 id="dir内置函数"><a href="#dir内置函数" class="headerlink" title="dir内置函数"></a>dir内置函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: a = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: dir(a)</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">[<span class="string">'__add__'</span>,</span><br><span class="line"> <span class="string">'__class__'</span>,</span><br><span class="line"> <span class="string">'__contains__'</span>,</span><br><span class="line"> <span class="string">'__delattr__'</span>,</span><br><span class="line"> <span class="string">'__delitem__'</span>,</span><br><span class="line"> <span class="string">'__dir__'</span>,</span><br><span class="line"> <span class="string">'__doc__'</span>,</span><br><span class="line"> <span class="string">'__eq__'</span>,</span><br><span class="line"> <span class="string">'__format__'</span>,</span><br><span class="line"> <span class="string">'__ge__'</span>,</span><br><span class="line"> <span class="string">'__getattribute__'</span>,</span><br><span class="line"> <span class="string">'__getitem__'</span>,</span><br><span class="line"> <span class="string">'__gt__'</span>,</span><br><span class="line"> <span class="string">'__hash__'</span>,</span><br><span class="line"> <span class="string">'__iadd__'</span>,</span><br><span class="line"> <span class="string">'__imul__'</span>,</span><br><span class="line"> <span class="string">'__init__'</span>,</span><br><span class="line"> <span class="string">'__init_subclass__'</span>,</span><br><span class="line"> <span class="string">'__iter__'</span>,</span><br><span class="line"> <span class="string">'__le__'</span>,</span><br><span class="line"> <span class="string">'__len__'</span>,</span><br><span class="line"> <span class="string">'__lt__'</span>,</span><br><span class="line"> <span class="string">'__mul__'</span>,</span><br><span class="line"> <span class="string">'__ne__'</span>,</span><br><span class="line"> <span class="string">'__new__'</span>,</span><br><span class="line"> <span class="string">'__reduce__'</span>,</span><br><span class="line"> <span class="string">'__reduce_ex__'</span>,</span><br><span class="line"> <span class="string">'__repr__'</span>,</span><br><span class="line"> <span class="string">'__reversed__'</span>,</span><br><span class="line"> <span class="string">'__rmul__'</span>,</span><br><span class="line"> <span class="string">'__setattr__'</span>,</span><br><span class="line"> <span class="string">'__setitem__'</span>,</span><br><span class="line"> <span class="string">'__sizeof__'</span>,</span><br><span class="line"> <span class="string">'__str__'</span>,</span><br><span class="line"> <span class="string">'__subclasshook__'</span>,</span><br><span class="line"> <span class="string">'append'</span>,</span><br><span class="line"> <span class="string">'clear'</span>,</span><br><span class="line"> <span class="string">'copy'</span>,</span><br><span class="line"> <span class="string">'count'</span>,</span><br><span class="line"> <span class="string">'extend'</span>,</span><br><span class="line"> <span class="string">'index'</span>,</span><br><span class="line"> <span class="string">'insert'</span>,</span><br><span class="line"> <span class="string">'pop'</span>,</span><br><span class="line"> <span class="string">'remove'</span>,</span><br><span class="line"> <span class="string">'reverse'</span>,</span><br><span class="line"> <span class="string">'sort'</span>]</span><br></pre></td></tr></table></figure><h3 id="给对象增加属性"><a href="#给对象增加属性" class="headerlink" title="给对象增加属性"></a>给对象增加属性</h3><p>增加临时属性：只需要在类的外部的代码中直接通过 . 来设置一个属性<br>虽然简单，不推荐</p><h3 id="self在类的封装的方法中输出对象属性"><a href="#self在类的封装的方法中输出对象属性" class="headerlink" title="self在类的封装的方法中输出对象属性"></a>self在类的封装的方法中输出对象属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">    ...:         print(self.name,<span class="string">"eat"</span>)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: tom = Cat()</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: tom.name = <span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: tom.eat()</span><br><span class="line">tom eat</span><br></pre></td></tr></table></figure><h3 id="初始化方法中定义属性"><a href="#初始化方法中定义属性" class="headerlink" title="初始化方法中定义属性"></a>初始化方法中定义属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s eat'</span>%self.name)</span><br><span class="line">cat = Cat(<span class="string">'tom'</span>)</span><br><span class="line">cat.eat()</span><br></pre></td></tr></table></figure><h3 id="del方法"><a href="#del方法" class="headerlink" title="del方法"></a><strong>del</strong>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s eat'</span>%self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'我去了'</span>)</span><br><span class="line">cat = Cat(<span class="string">'tom'</span>)</span><br><span class="line">cat.eat()</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tom eat</span><br><span class="line">--------------------------------------------------</span><br><span class="line">我去了</span><br></pre></td></tr></table></figure><p>del方法会在对象销毁前调用（在这个例子中时程序运行结束的时候），也可以手动调用del方法进行销毁</p><h3 id="str方法"><a href="#str方法" class="headerlink" title="str方法"></a><strong>str</strong>方法</h3><p>print(cat)打印对象时定义输出的文案</p><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>is：x is y 类似于 id(x) == id(y)<br>is not: x is not y，类似 id(x) != id(y)</p><p>is：判断两个对象的内存地址<br>==：判断两个对象的值</p><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><p>前面加两个下划线</p><p>python中没有真正意义上的私有,可以使用<em>类名__属性，</em>类名__方法进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s eat'</span>%self.__name)</span><br><span class="line">cat = Cat(<span class="string">'tom'</span>)</span><br><span class="line">print(cat._Cat__name);</span><br><span class="line">cat._Cat__eat()</span><br></pre></td></tr></table></figure><ul><li>xx：共有变量</li><li>_x：单前置下划线，私有化属性或方法，from somemodule import * 禁止导入，类对象和子类可以访问</li><li>__xx：双前置下划线，避免与子类中的属性命名冲突，无法在外部直接访问（名字重整所以访问不到）</li><li>__xx__：双前后下划线，用户名字控件的魔法对象或属性。例如：__init__,__不要自己发明这样的名字</li><li>xx__：单后置下划线，用于避免与Python关键字的冲突</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"eat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"dog eat"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># super().eat() //3.0</span></span><br><span class="line">        Animal.eat(self) // <span class="number">2.0</span></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dog eat</span><br><span class="line">eat</span><br></pre></td></tr></table></figure></p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A test"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A demo"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B test"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B demo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.test()</span><br><span class="line">c.demo()</span><br><span class="line"></span><br><span class="line">print(C.__mro__)</span><br></pre></td></tr></table></figure><p>如果存在同样的属性和方法，用mro方法搜索顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'Parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        Parent.__init__(self, name,*args,**kwargs)</span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Son2的init开始被调用'</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        Parent.__init__(self, name)</span><br><span class="line">        print(<span class="string">'Son2的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1,Son2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        Son1.__init__(self, name, age)</span><br><span class="line">        Son2.__init__(self, name, gender)</span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>,<span class="number">12</span>,<span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.name)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.age)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.gender)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Grandson的init开始被调用</span><br><span class="line">Son1的init开始被调用</span><br><span class="line">Parent的init开始被调用</span><br><span class="line">Parent的init结束被调用</span><br><span class="line">Son1的init结束被调用</span><br><span class="line">Son2的init开始被调用</span><br><span class="line">Parent的init开始被调用</span><br><span class="line">Parent的init结束被调用</span><br><span class="line">Son2的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名：  grandson</span><br><span class="line">姓名：  <span class="number">12</span></span><br><span class="line">姓名：  男</span><br></pre></td></tr></table></figure></p><p>上面Parent的构造函数会执行两次，这是我们所不希望了，为了避免这个问题，使用super<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'Parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        super().__init__(name,*args,**kwargs)</span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Son2的init开始被调用'</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        super().__init__(name,*args,**kwargs)</span><br><span class="line">        print(<span class="string">'Son2的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1,Son2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        super().__init__(name, age,gender)</span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>,<span class="number">12</span>,<span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.name)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.age)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.gender)</span><br><span class="line">print(Grandson.__mro__)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Grandson的init开始被调用</span><br><span class="line">Son1的init开始被调用</span><br><span class="line">Son2的init开始被调用</span><br><span class="line">Parent的init开始被调用</span><br><span class="line">Parent的init结束被调用</span><br><span class="line">Son2的init结束被调用</span><br><span class="line">Son1的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名：  grandson</span><br><span class="line">姓名：  <span class="number">12</span></span><br><span class="line">姓名：  男</span><br><span class="line">(&lt;class '__main__.Grandson'&gt;, &lt;class '__main__.Son1'&gt;, &lt;class '__main__.Son2'&gt;, &lt;class '__main__.Parent'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p><p>super的调用顺序是有<strong>mro</strong>的顺序决定的，采用的是C3算法，可以使用super(Son2,self).<strong>init</strong>(name, age,gender)的方式，跳过某些构造函数的调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'Parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        super().__init__(name,*args,**kwargs)</span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Son2的init开始被调用'</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        super().__init__(name,*args,**kwargs)</span><br><span class="line">        print(<span class="string">'Son2的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1,Son2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        super(Son2,self).__init__(name, age,gender)</span><br><span class="line">        <span class="comment"># super().__init__(name, age,gender)</span></span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line">print(Grandson.__mro__)</span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>,<span class="number">12</span>,<span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名： '</span>,gs.name)</span><br><span class="line"><span class="comment"># print('姓名： ',gs.age)</span></span><br><span class="line"><span class="comment"># print('姓名： ',gs.gender)</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class '__main__.Grandson'&gt;, &lt;class '__main__.Son1'&gt;, &lt;class '__main__.Son2'&gt;, &lt;class '__main__.Parent'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">Grandson的init开始被调用</span><br><span class="line">Parent的init开始被调用</span><br><span class="line">Parent的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名：  grandson</span><br></pre></td></tr></table></figure></p><h3 id="新式类和经典类"><a href="#新式类和经典类" class="headerlink" title="新式类和经典类"></a>新式类和经典类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(dir(A()))</span><br></pre></td></tr></table></figure><p>新式类继承自object类，其中包含了object中的所有内置属性和方法<br>在python3.0中默认继承object，python2.0需要手动继承</p><h3 id="类是一个特殊对象"><a href="#类是一个特殊对象" class="headerlink" title="类是一个特殊对象"></a>类是一个特殊对象</h3><p>class AAA: 定义的类属于类对象<br>obj = AAA() 属于实例对象</p><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>类属性所有类共享：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tool()</span><br><span class="line">print(Tool.count)</span><br><span class="line">Tool()</span><br><span class="line">print(Tool.count)</span><br></pre></td></tr></table></figure><h3 id="属性获取机制"><a href="#属性获取机制" class="headerlink" title="属性获取机制"></a>属性获取机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tool1 = Tool()</span><br><span class="line">print(tool1.count)</span><br><span class="line">tool1.count = <span class="number">2</span></span><br><span class="line">print(Tool.count)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>tool1.count也能获取类对象里面的属性（不建议使用）查找顺序</p><ul><li>首先会在实例属性中查找</li><li>然后在类属性里面找<br>对象.类属性 = 值 赋值语句，只会给对象添加一个属性，而不会影响到类属性的值，如上面例子</li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"count:%d"</span> % cls.count)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Tool()</span><br><span class="line">Tool.show_count()</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> 静态方法名<span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(MusicPlayer())</span><br><span class="line">print(MusicPlayer())</span><br></pre></td></tr></table></figure><p>使用<strong>new</strong>内置方法</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>捕获异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#尝试运行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">3</span>,错误类型<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"无论是否有异常，都会执行的代码"</span>)</span><br></pre></td></tr></table></figure><p>抛出异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> Exception(<span class="string">'xxxx'</span>)</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span>,模块<span class="number">2</span></span><br><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span> <span class="keyword">as</span> 模块别名</span><br><span class="line"><span class="keyword">from</span> 模块<span class="number">1</span> <span class="keyword">import</span> 工具名</span><br><span class="line"><span class="keyword">from</span> 模块<span class="number">1</span> <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>如果导入两个模块中同名的方法，调用的时候后面的方法会覆盖掉前面的方法，可以用别名进行区别</p><h3 id="模块的搜索顺序"><a href="#模块的搜索顺序" class="headerlink" title="模块的搜索顺序"></a>模块的搜索顺序</h3><p>1、首先会在当前目录中进行查找，如果有就直接导入<br>2、如果没有，在搜索系统目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.__file__)</span><br></pre></td></tr></table></figure><p>使用<strong>file</strong>内置属性可以查看模块的完整路径</p><h3 id="导入文件时会执行没有缩进的代码"><a href="#导入文件时会执行没有缩进的代码" class="headerlink" title="导入文件时会执行没有缩进的代码"></a>导入文件时会执行没有缩进的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"当前模块"</span>)</span><br></pre></td></tr></table></figure><p>使用内置属性<strong>name</strong>来区分是否是在当前模块中运行</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>包是一个包含多个模块的特殊目录</li><li>目录下有一个特殊的文件<strong>init</strong>.py</li><li>包名的命名方式和变量名一致，小写字母+_</li></ul><h3 id="封装模块，设置-init-和外界导入包"><a href="#封装模块，设置-init-和外界导入包" class="headerlink" title="封装模块，设置__init__和外界导入包"></a>封装模块，设置__init__和外界导入包</h3><p>__init__:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br></pre></td></tr></table></figure><p>receive_message:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"receive"</span>)</span><br></pre></td></tr></table></figure><p>外界使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  message</span><br><span class="line">message.send_message.send()</span><br><span class="line">message.receive_message.receive()</span><br></pre></td></tr></table></figure></p><h3 id="发布、安装模块压缩包"><a href="#发布、安装模块压缩包" class="headerlink" title="发布、安装模块压缩包"></a>发布、安装模块压缩包</h3><h3 id="pip安装第三方模块"><a href="#pip安装第三方模块" class="headerlink" title="pip安装第三方模块"></a>pip安装第三方模块</h3><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file = open(<span class="string">"README"</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">text = file.read()</span><br><span class="line">print(text)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>readline:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file = open(<span class="string">"README"</span>)</span><br><span class="line"><span class="comment"># 读取、</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    text = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(text, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(text)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span> % i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span> % i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'--开始--：%s'</span>%time.ctime())</span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        length = len(threading.enumerate())</span><br><span class="line">        print(<span class="string">'当前线程数为，%d'</span> % length)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--开始--：Mon Mar 23 21:49:09 2020</span><br><span class="line">正在唱歌...0</span><br><span class="line">正在跳舞...0</span><br><span class="line">当前线程数为，3</span><br><span class="line">正在唱歌...1</span><br><span class="line">正在跳舞...1</span><br><span class="line">当前线程数为，3</span><br><span class="line">当前线程数为，3</span><br><span class="line">正在跳舞...2</span><br><span class="line">正在唱歌...2</span><br><span class="line">当前线程数为，1</span><br></pre></td></tr></table></figure></p><p>注意：调用start的时候才会创建线程</p><h3 id="通过继承Thread类完成创建线程"><a href="#通过继承Thread类完成创建线程" class="headerlink" title="通过继承Thread类完成创建线程"></a>通过继承Thread类完成创建线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span> + self.name + <span class="string">' @ '</span> + str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="多线程共享全局变量"><a href="#多线程共享全局变量" class="headerlink" title="多线程共享全局变量"></a>多线程共享全局变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">nums = [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    nums.append(<span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">print(num)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><p>如果全局变量指向的内存地址改变了，需要加上global（字符串、数字、元祖）如上面num变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(temp)</span>:</span></span><br><span class="line">    temp.append(<span class="number">33</span>)</span><br><span class="line">    print(<span class="string">'test1--%s'</span> % str(temp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(temp)</span>:</span></span><br><span class="line">    print(<span class="string">'test2--%s'</span> % str(temp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g_nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=test1, args=(g_nums,))</span><br><span class="line">    t2 = threading.Thread(target=test2, args=(g_nums,))</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'main--%s'</span> % g_nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test1--[11, 22, 33]</span><br><span class="line">test2--[11, 22, 33]</span><br><span class="line">main--[11, 22, 33]</span><br></pre></td></tr></table></figure></p><h3 id="互斥锁解决资源竞争的问题"><a href="#互斥锁解决资源竞争的问题" class="headerlink" title="互斥锁解决资源竞争的问题"></a>互斥锁解决资源竞争的问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    print(<span class="string">'test1--%d'</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    print(<span class="string">'test2--%d'</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=test1, args=(<span class="number">100000</span>,))</span><br><span class="line">    t2 = threading.Thread(target=test2, args=(<span class="number">100000</span>,))</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">'main--%d'</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用threading.Lock()给存在资源竞争的地方加锁</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'--1'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'--2'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p1 = multiprocessing.Process(target=test1)</span><br><span class="line">    p2 = multiprocessing.Process(target=test2)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><p>线程不能独立执行，必须依存在于进程中</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(q)</span>:</span></span><br><span class="line">    data = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> data:</span><br><span class="line">        q.put(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(q)</span>:</span></span><br><span class="line">    new_data = list()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line">        new_data.append(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'获取到的数据-- %s'</span> % str(new_data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = multiprocessing.Queue()</span><br><span class="line">    p1 = multiprocessing.Process(target=test1, args=(q,))</span><br><span class="line">    p2 = multiprocessing.Process(target=test2, args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>线程不共享数据，使用Queue队列来保存数据</p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">'%s开始执行，进程号为%d'</span> % (msg, os.getpid()))</span><br><span class="line">    time.sleep(random.random() * <span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg, <span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop - t_start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">po = Pool(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    po.apply_async(worker, (i,))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---start---'</span>)</span><br><span class="line">po.close()</span><br><span class="line">po.join()</span><br><span class="line">print(<span class="string">'---end---'</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">---start---</span><br><span class="line">0开始执行，进程号为14311</span><br><span class="line">1开始执行，进程号为14312</span><br><span class="line">2开始执行，进程号为14313</span><br><span class="line">2 执行完毕，耗时0.94</span><br><span class="line">3开始执行，进程号为14313</span><br><span class="line">0 执行完毕，耗时1.37</span><br><span class="line">4开始执行，进程号为14311</span><br><span class="line">4 执行完毕，耗时0.08</span><br><span class="line">5开始执行，进程号为14311</span><br><span class="line">5 执行完毕，耗时0.12</span><br><span class="line">6开始执行，进程号为14311</span><br><span class="line">1 执行完毕，耗时1.65</span><br><span class="line">7开始执行，进程号为14312</span><br><span class="line">3 执行完毕，耗时1.20</span><br><span class="line">8开始执行，进程号为14313</span><br><span class="line">6 执行完毕，耗时0.66</span><br><span class="line">9开始执行，进程号为14311</span><br><span class="line">8 执行完毕，耗时0.67</span><br><span class="line">7 执行完毕，耗时1.63</span><br><span class="line">9 执行完毕，耗时1.12</span><br><span class="line">---end---</span><br></pre></td></tr></table></figure></p><p>使用Pool创建线程</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">print(isinstance([<span class="number">11</span>,<span class="number">22</span>],Iterable))</span><br><span class="line">print(isinstance(<span class="number">100</span>,Iterable))</span><br></pre></td></tr></table></figure><p>判断对象是否可以迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">print(isinstance([<span class="number">11</span>, <span class="number">22</span>], Iterable))</span><br><span class="line">print(isinstance(<span class="number">100</span>, Iterable))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classmate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.names = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.names.append(name)</span><br><span class="line">    <span class="comment"># 如果要称之为可迭代的对象，必须实现下面方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ClassIterator(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self.obj = obj</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; len(self.obj.names):</span><br><span class="line">            ret = self.obj.names[self.current_num]</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classmate = Classmate()</span><br><span class="line">classmate.add(<span class="string">"老王"</span>)</span><br><span class="line">classmate.add(<span class="string">"王二"</span>)</span><br><span class="line">classmate.add(<span class="string">"张三"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print("判断classmate是否是可以迭代的对象", isinstance(classmate, Iterable))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># classmate_iterator = iter(classmate)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print("判断classmate是否是迭代器", isinstance(classmate_iterator, Iterator))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(next(classmate_iterator))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> classmate:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>也可以用下面的方式实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">print(isinstance([<span class="number">11</span>, <span class="number">22</span>], Iterable))</span><br><span class="line">print(isinstance(<span class="number">100</span>, Iterable))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classmate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.names = list()</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; len(self.names):</span><br><span class="line">            ret = self.names[self.current_num]</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classmate = Classmate()</span><br><span class="line">classmate.add(<span class="string">"老王"</span>)</span><br><span class="line">classmate.add(<span class="string">"王二"</span>)</span><br><span class="line">classmate.add(<span class="string">"张三"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> classmate:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure></p><p>迭代器肯定是可迭代的对象，反之不成立</p><p>菲波那切数列：类似range() 保存的是生成数的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, all_num)</span>:</span></span><br><span class="line">        self.all_num = all_num</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; self.all_num:</span><br><span class="line">            ret = self.a</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> Fibonacci(<span class="number">10</span>):</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span><span class="params">(all_num)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    current_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = create_num(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ret = next(obj)</span></span><br><span class="line"><span class="comment">#print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> obj:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><p>使用yield关键字创建生成器，生成器是特殊的迭代器</p><p>send方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span><span class="params">(all_num)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    current_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        ret = <span class="keyword">yield</span> a</span><br><span class="line">        print(<span class="string">'ret-&gt;'</span>,ret)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = create_num(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">ret = next(obj)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">ret = obj.send(<span class="string">"haha"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">ret-&gt; haha</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>使用yield完成多任务:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'---1---'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'---2---'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = task_1()</span><br><span class="line">    t2 = task_2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        next(t1)</span><br><span class="line">        next(t2)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><p>交替执行，并发执行，单线程</p><p>因此协程是实现多任务效率最高的</p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---1---</span><br><span class="line">---2---</span><br><span class="line">---1---</span><br><span class="line">---2---</span><br><span class="line">---1---</span><br><span class="line">---2---</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>使用greenlet和gevent实现多任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'---1---'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'---2---'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gr1 = greenlet(task_1)</span><br><span class="line">gr2 = greenlet(task_2)</span><br><span class="line"></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><p>gevent:跟geenlet不同的是，当有阻塞时自动执行gevent中的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f1,<span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f2,<span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f3,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure></p><p>进程、线程、协程对比：</p><ul><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源最大，效率很低</li><li>线程切换需要的资源一般，效率一般（当然不考虑GIL的情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中所以是并发</li></ul><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><p>计算密集型：进程</p><p>io密集型：线程、协程</p><ul><li>python与GIL没有关系，由于历史原因在CPython虚拟机（解释器），难以移除</li><li>GIL：全局解释器锁。每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码</li><li>线程释放GIL锁的情况：在IO操作等可能引起阻塞的system call之前，可以暂时释放GIL，但是在执行完毕后重新h获取GIL Python3.x使用计时器（执行时间到达后阈值后，当前线程释放GIL）或者Python 2.x tickets计数达到100</li><li>Python使用多进程是可以利用多核的CPU资源的</li><li>多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁<br>解决GIL问题：</li><li>更换python解释器</li><li>用其他语言替代多任务里面执行的东西</li></ul><h2 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h2><p>浅拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">b = [<span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">c = [a, b]</span><br><span class="line">d = c</span><br><span class="line">e = copy.copy(c)</span><br><span class="line">print(id(c))</span><br><span class="line">print(id(e))</span><br><span class="line">print(id(c[<span class="number">0</span>]))</span><br><span class="line">print(id(e[<span class="number">0</span>]))</span><br><span class="line">a.append(<span class="number">55</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4485137160</span><br><span class="line">4485000008</span><br><span class="line">4484885576</span><br><span class="line">4484885576</span><br><span class="line">[[11, 22, 55], [33, 44]]</span><br><span class="line">[[11, 22, 55], [33, 44]]</span><br></pre></td></tr></table></figure></p><p>深拷贝：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">b = [<span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">c = [a, b]</span><br><span class="line">d = c</span><br><span class="line">e = copy.deepcopy(c)</span><br><span class="line">print(id(c))</span><br><span class="line">print(id(e))</span><br><span class="line">print(id(c[<span class="number">0</span>]))</span><br><span class="line">print(id(e[<span class="number">0</span>]))</span><br><span class="line">a.append(<span class="number">55</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4407096200</span><br><span class="line">4406958792</span><br><span class="line">4406844488</span><br><span class="line">4407101704</span><br><span class="line">[[11, 22, 55], [33, 44]]</span><br><span class="line">[[11, 22], [33, 44]]</span><br></pre></td></tr></table></figure></p><p>浅拷贝拷贝数组、元祖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line"></span><br><span class="line">a = [11, 22]</span><br><span class="line"></span><br><span class="line">b = copy.copy(a)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line"></span><br><span class="line">a = (11, 22)</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4395318280</span><br><span class="line">4395570632</span><br><span class="line">4394256648</span><br><span class="line">4394256648</span><br></pre></td></tr></table></figure></p><p>如果copy.copy拷贝的是元祖，那么它不会进行浅拷贝，仅仅是指向<br>因为元祖是不可变类型，不能修改</p><p>注意：如果用copy.copy、copy.deepcopy对一个全部都是不可变类型的数据进行拷贝，那么他们的结果相同，都是引用指向<br>如果拷贝的是一个拥有不可变类型的数据，即使元祖是最顶层，那么copy.deepcopy依然是深拷贝，而copy.copy还是指向。如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">b = [<span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">c = (a,b)</span><br><span class="line">d = c</span><br><span class="line">e = copy.copy(c)</span><br><span class="line">print(id(c))</span><br><span class="line">print(id(e))</span><br><span class="line">print(id(c[<span class="number">0</span>]))</span><br><span class="line">print(id(e[<span class="number">0</span>]))</span><br><span class="line">a.append(<span class="number">55</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(e)</span><br><span class="line">print(<span class="number">5</span>*<span class="string">'-'</span>)</span><br><span class="line">a = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">b = [<span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">c = (a,b)</span><br><span class="line">d = c</span><br><span class="line">e = copy.deepcopy(c)</span><br><span class="line">print(id(c))</span><br><span class="line">print(id(e))</span><br><span class="line">print(id(c[<span class="number">0</span>]))</span><br><span class="line">print(id(e[<span class="number">0</span>]))</span><br><span class="line">a.append(<span class="number">55</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4323163336</span><br><span class="line">4323163336</span><br><span class="line">4323163272</span><br><span class="line">4323163272</span><br><span class="line">([11, 22, 55], [33, 44])</span><br><span class="line">([11, 22, 55], [33, 44])</span><br><span class="line">-----</span><br><span class="line">4323414216</span><br><span class="line">4323416520</span><br><span class="line">4323414984</span><br><span class="line">4323420552</span><br><span class="line">([11, 22, 55], [33, 44])</span><br><span class="line">([11, 22], [33, 44])</span><br></pre></td></tr></table></figure></p><ul><li>列表切片d =c [:]属于浅拷贝d = copy.copy(c)</li><li>字典d.copy()属于浅拷贝</li></ul><h2 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h2><p>装饰器的实现方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sise</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">print(obj.sise)</span><br></pre></td></tr></table></figure><p>经典类使用python只有上面一种方式，新式类有三种：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @size.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @size.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">print(obj.size)</span><br><span class="line">obj.size = <span class="number">200</span></span><br><span class="line">print(obj.size)</span><br><span class="line"><span class="keyword">del</span> obj.size</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure></p><p>@property、 @size.setter、 @size.deleter</p><p>类属性的实现方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_size</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.value</span><br><span class="line"></span><br><span class="line">    BAR = property(set_size, get_size, del_size, <span class="string">'des'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">print(obj.BAR)</span><br><span class="line">obj.BAR = <span class="number">200</span></span><br><span class="line">print(obj.BAR)</span><br><span class="line"><span class="keyword">del</span> obj.BAR</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure></p><h2 id="魔法属性、方法"><a href="#魔法属性、方法" class="headerlink" title="魔法属性、方法"></a>魔法属性、方法</h2><ul><li>__doc__表示类的描述信息</li><li>__module__ 表示当前操作的对象在那个模块</li><li>__class__ 表示当前操作的对象的类是什么</li><li>__init__ 初始化方法，通过类创建对象时，自动触发执行</li><li>__del__ 当对象在内存中被释放时，自动触发执行</li><li>__call__ 对象后面加括号，触发执行</li><li>__dict__ 类或对象中的所有属性</li><li>__str__ 打印对象时，默认输出该方法的返回值</li><li>__getItem__、__setItem__、__delItem__ 用于索引操作，如字典。以上分别表示获取、设置、删除数据</li><li>__getslice__、__setslice__、__delslice__ 该三个方法用于分片操作，如：列表</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django后台管理、静态文件、中间件</title>
      <link href="/2019/12/11/python-Django%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E3%80%81%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2019/12/11/python-Django%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E3%80%81%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>在setttings.py中添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问静态文件存放的物理目录</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR,<span class="string">'static'</span>)]<span class="comment">#设置静态文件的保存路径</span></span><br></pre></td></tr></table></figure></p><p>加载的目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">static_test</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(settings.STATICFILES_FINDERS)</span><br><span class="line">    <span class="comment">#['django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder']</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'books/static_test.html'</span>)</span><br></pre></td></tr></table></figure><p>首先去STATICFILES_DIRS去找，然后在app下static文件里面去找</p><p>动态获取拼接地址</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;静态文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">"/abc/images/icon_comment_dark.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"&#123;% static 'images/icon_comment_dark.png' %&#125;"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件函数是djang框架给我们预留的函数接口，让我们可以干预请求和应答过程</p><p>获取浏览器端的ip地址：<br>使用request对象的META属性：request.META[‘REMOTE_ADDR’]</p><p>使用中中间件：<br>拦截IP可以是用修饰器 但是需要在每个视图views里面进行装饰，比较繁琐，这时可以使用中间件</p><ul><li>在app目录下新建middleware.py</li><li><p>定义中间件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BolockIPMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">IPS = [<span class="string">'127.0.0.1'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        <span class="string">'''视图函数调用之前会执行'''</span></span><br><span class="line">        ip = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">in</span> BolockIPMiddleware.IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;Forbidden&lt;/h1&gt;'</span>)</span><br></pre></td></tr></table></figure></li><li><p>注册中间件类，在setttings.py里面</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line"><span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line"><span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line"><span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line"><span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line"><span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line"><span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line"><span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line"><span class="string">'books.middleware.BolockIPMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">    self.get_response = get_response</span><br><span class="line">    print(<span class="string">'__init__'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">    print(<span class="string">'process_request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request, view_func, *view_args, **view_kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'process_view'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request, response)</span>:</span></span><br><span class="line">    print(<span class="string">'process_response'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>返回的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br><span class="line">process_request</span><br><span class="line">process_view</span><br><span class="line">process_response</span><br></pre></td></tr></table></figure></p><p>可以在process_request和process_view方法中干预执行过程，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        print(<span class="string">'__init__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(<span class="string">'process_request'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request, view_func, *view_args, **view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'process_view'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p><p>返回的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br><span class="line">process_request</span><br><span class="line">process_response</span><br></pre></td></tr></table></figure></p><p>当视图函数报错的时候会执行process_exception<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request, exception)</span>:</span></span><br><span class="line">    print(<span class="string">'process_exception'</span>)</span><br></pre></td></tr></table></figure></p><p>process_exception在settitngs里配置的中间件的执行的顺序和其他方法是相反的，倒序</p><h2 id="Admin后台管理"><a href="#Admin后台管理" class="headerlink" title="Admin后台管理"></a>Admin后台管理</h2><p>首先在settings.py修改语言和时区<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = 'en-us'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TIME_ZONE = 'UTC'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure></p><p>创建超级管理员：创建账号密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>在admin.py注册模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure></p><p>自定义管理页面<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'public_date'</span>,<span class="string">'comment'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'gender'</span>,<span class="string">'book'</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo,BookInfoAdmin)</span><br><span class="line">admin.site.register(HeroInfo,HeroInfoAdmin)</span><br></pre></td></tr></table></figure></p><p><img src="/images/WX20191211-190732@2x.png" alt="image"></p><h3 id="列表页选项"><a href="#列表页选项" class="headerlink" title="列表页选项"></a>列表页选项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'姓名'</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    gender = models.BooleanField(default= <span class="keyword">False</span>)</span><br><span class="line">    book = models.ForeignKey(<span class="string">'BookInfo'</span>,on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hero_title</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book_title</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.book.title</span><br><span class="line"></span><br><span class="line">    hero_title.admin_order_field = <span class="string">'name'</span></span><br><span class="line">    hero_title.short_description = <span class="string">'标题'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment">#每页显示10条</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'gender'</span>,<span class="string">'book'</span>,<span class="string">'hero_title'</span>,<span class="string">'book_title'</span>]</span><br><span class="line">    actions_on_bottom = <span class="keyword">True</span></span><br><span class="line">    actions_on_top = <span class="keyword">False</span></span><br><span class="line">    list_filter = [<span class="string">'name'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><p><img src="/images/WX20191218-180829@2x.png" alt="image"></p><h3 id="编辑页选项"><a href="#编辑页选项" class="headerlink" title="编辑页选项"></a>编辑页选项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment">#每页显示10条</span></span><br><span class="line">    <span class="comment"># list_per_page = 10</span></span><br><span class="line">    <span class="comment"># list_display = ['id','name','gender','book','hero_title','book_title']</span></span><br><span class="line">    <span class="comment"># actions_on_bottom = True</span></span><br><span class="line">    <span class="comment"># actions_on_top = False</span></span><br><span class="line">    <span class="comment"># list_filter = ['name']</span></span><br><span class="line">    <span class="comment"># search_fields = ['name']</span></span><br><span class="line"></span><br><span class="line">    fields = [<span class="string">'book'</span>,<span class="string">'gender'</span>,<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><p>fields 可以设置详情页的顺序<br><img src="/images/WX20191218-182002@2x.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># title = models.CharField(max_length=20)</span></span><br><span class="line">    <span class="comment"># public_date = models.DateField()</span></span><br><span class="line">    <span class="comment"># comment =models.IntegerField(default=0)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title;</span><br><span class="line"><span class="comment"># class HeroInfo(models.Model):</span></span><br><span class="line"><span class="comment">#     name = models.CharField(verbose_name='姓名',max_length=20)</span></span><br><span class="line"><span class="comment">#     gender = models.BooleanField(default= False)</span></span><br><span class="line"><span class="comment">#     book = models.ForeignKey('BookInfo',on_delete=models.CASCADE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def hero_title(self):</span></span><br><span class="line"><span class="comment">#         return self.name</span></span><br><span class="line"><span class="comment">#     def book_title(self):</span></span><br><span class="line"><span class="comment">#         return self.book.title</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     hero_title.admin_order_field = 'name'</span></span><br><span class="line"><span class="comment">#     hero_title.short_description = '标题'</span></span><br></pre></td></tr></table></figure><p>重新实现<strong>str</strong>方法使book显示title的信息</p><p>还可以分组fieldsets和fields只能使用一个<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment">#每页显示10条</span></span><br><span class="line">    <span class="comment"># list_per_page = 10</span></span><br><span class="line">    <span class="comment"># list_display = ['id','name','gender','book','hero_title','book_title']</span></span><br><span class="line">    <span class="comment"># actions_on_bottom = True</span></span><br><span class="line">    <span class="comment"># actions_on_top = False</span></span><br><span class="line">    <span class="comment"># list_filter = ['name']</span></span><br><span class="line">    <span class="comment"># search_fields = ['name']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># fields = ['book','gender','name']</span></span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="string">'基本'</span>,&#123;<span class="string">'fields'</span>:[<span class="string">'name'</span>,<span class="string">'gender'</span>]&#125;),</span><br><span class="line">        (<span class="string">'高级'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'book'</span>]&#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><p><img src="/images/WX20191218-182337@2x.png" alt="image"></p><h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><p>在一对多的关系中，在一端的便以页面中编辑多端的对象包括表格、块两种</p><p>块的形式：</p><ul><li><p>打开admin.py文件，创建</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoStackInline</span><span class="params">(admin.StackedInline)</span>:</span></span><br><span class="line">    <span class="comment">#写多类的名字</span></span><br><span class="line">    model = HeroInfo</span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'public_date'</span>,<span class="string">'comment'</span>]</span><br><span class="line">    <span class="comment">#在一类里面写</span></span><br><span class="line">    inlines = [HeroInfoStackInline]</span><br></pre></td></tr></table></figure><p>  <img src="/images/WX20191218-183532@2x.png" alt="image"></p></li><li><p>表格的形式：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class HeroInfoStackInline(admin.StackedInline):</span></span><br><span class="line"><span class="comment">#     #写多类的名字</span></span><br><span class="line"><span class="comment">#     model = HeroInfo</span></span><br><span class="line"><span class="comment">#     extra = 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoTabularInline</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    <span class="comment">#写多类的名字</span></span><br><span class="line">    model = HeroInfo</span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'public_date'</span>,<span class="string">'comment'</span>]</span><br><span class="line">    <span class="comment"># inlines = [HeroInfoStackInline]</span></span><br><span class="line">    inlines = [HeroInfoTabularInline]</span><br></pre></td></tr></table></figure><p>  <img src="/images/WX20191218-183941@2x.png" alt="image"></p></li></ul><h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><p>需要在site-packages里面找到Django-contrib-admin-templates-admin下面的模板文件<br>可以复制到现有project里面新建在templates文件夹下面新建admin文件夹在放入需要修改的模板文件<br>因为templates会优先加载project,所以会现在自己修改的页面信息</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python flask</title>
      <link href="/2019/12/11/python-flask/"/>
      <url>/2019/12/11/python-flask/</url>
      
        <content type="html"><![CDATA[<p>重量级的框架：为方便业务程序的开发，提供了丰富的工具、组件，如：Django<br>轻量级的框架：只提供web框架的核心功能，自由、灵活、高度定制，如flask</p><p>diango：<br>django-admin 快速创建项目工程目录<br>manage.py 管理项目工具<br>orm 模型（数据库抽象层）<br>admin 后台管理站点<br>缓存机制<br>文件存储系统<br>用户认证系统<br>而只写，flask都没有，都需要扩展包来提供</p><p>Hello World!：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">'/python'</span>,<span class="comment">#访问静态资源的url前缀，默认值是static</span></span><br><span class="line">            static_folder=<span class="string">'static_files'</span>,<span class="comment">#静态文件的目录，默认就是static</span></span><br><span class="line">            template_folder=<span class="string">'tempplates'</span><span class="comment">#模板文件的目录，默认是templates</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、使用配置文件，创建config.cfg文件</span></span><br><span class="line"><span class="comment"># app.config.from_pyfile("config.cfg")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用对象配置参数</span></span><br><span class="line"><span class="comment"># class Config(object):</span></span><br><span class="line"><span class="comment">#     DEBUG = True</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># app.config.from_object(Config)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、直接操作config的字典对象</span></span><br><span class="line"><span class="comment"># app.config["DEBUG"] = True</span></span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ul><li><p>使用app.config.get()</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">'/python'</span>,  <span class="comment"># 访问静态资源的url前缀，默认值是static</span></span><br><span class="line">            static_folder=<span class="string">'static_files'</span>,  <span class="comment"># 静态文件的目录，默认就是static</span></span><br><span class="line">            template_folder=<span class="string">'tempplates'</span>  <span class="comment"># 模板文件的目录，默认是templates</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、使用配置文件</span></span><br><span class="line"><span class="comment"># app.config.from_pyfile("config.cfg")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用对象配置参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    DEBUG = <span class="keyword">True</span></span><br><span class="line">    TEXT = <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、直接操作config的字典对象</span></span><br><span class="line"><span class="comment"># app.config["DEBUG"] = True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> app.config.get(<span class="string">'TEXT'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>使用current_app，全局的app</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">'/python'</span>,  <span class="comment"># 访问静态资源的url前缀，默认值是static</span></span><br><span class="line">            static_folder=<span class="string">'static_files'</span>,  <span class="comment"># 静态文件的目录，默认就是static</span></span><br><span class="line">            template_folder=<span class="string">'tempplates'</span>  <span class="comment"># 模板文件的目录，默认是templates</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、使用配置文件</span></span><br><span class="line"><span class="comment"># app.config.from_pyfile("config.cfg")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用对象配置参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    DEBUG = <span class="keyword">True</span></span><br><span class="line">    TEXT = <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、直接操作config的字典对象</span></span><br><span class="line"><span class="comment"># app.config["DEBUG"] = True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># return app.config.get('TEXT')</span></span><br><span class="line">    <span class="keyword">return</span> current_app.config.get(<span class="string">'TEXT'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h2 id="指定端口号和ip"><a href="#指定端口号和ip" class="headerlink" title="指定端口号和ip"></a>指定端口号和ip</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">5000</span>,debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>debug参数也可以在这里设置</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>可以用app.url_map可以查看整个flask中的路由信息</p><h3 id="设置请求方式"><a href="#设置请求方式" class="headerlink" title="设置请求方式"></a>设置请求方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/post',methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'post'</span></span><br></pre></td></tr></table></figure><p>默认是GET，如果要支持POST，必须自己设置</p><h3 id="视图函数绑定了相同的路径"><a href="#视图函数绑定了相同的路径" class="headerlink" title="视图函数绑定了相同的路径"></a>视图函数绑定了相同的路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello 1'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello 2'</span></span><br></pre></td></tr></table></figure><p>请求/hello会显示hello 1 ，以第一个视图函数为准，可以根据请求方式的不同来区分</p><h3 id="一个视图函数绑定了不同的路径"><a href="#一个视图函数绑定了不同的路径" class="headerlink" title="一个视图函数绑定了不同的路径"></a>一个视图函数绑定了不同的路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hi1')</span></span><br><span class="line"><span class="meta">@app.route('/hi2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi page'</span></span><br></pre></td></tr></table></figure><h3 id="重定向、反解析url"><a href="#重定向、反解析url" class="headerlink" title="重定向、反解析url"></a>重定向、反解析url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect,url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(hello_world))</span><br></pre></td></tr></table></figure><p>使用redirect进行重定向，使用url_for反解析url</p><h3 id="提取参数与自定义路由转化器"><a href="#提取参数与自定义路由转化器" class="headerlink" title="提取参数与自定义路由转化器"></a>提取参数与自定义路由转化器</h3><p>默认三种转化器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/goods/&lt;int:goods_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goods_detail</span><span class="params">(goods_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s'</span> % goods_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/goods1/&lt;float:goods_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goods_detail1</span><span class="params">(goods_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s'</span> % goods_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/goods2/&lt;goods_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goods_detail2</span><span class="params">(goods_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s'</span> % goods_id</span><br></pre></td></tr></table></figure></p><p>自定义转化器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    DEBUG = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义转化器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="string">""""自定义"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url_map, param)</span>:</span></span><br><span class="line">        super(RegexConverter, self).__init__(url_map)</span><br><span class="line">        self.regex = param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、将自定义的转换器添加到flask的应用中</span></span><br><span class="line">app.url_map.converters[<span class="string">'re'</span>] = RegexConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/send/&lt;re(r'1[3456]\d&#123;9&#125;'):mobile&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(mobile)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'send sms to %s '</span> % mobile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(app.url_map)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>进阶：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    DEBUG = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义转化器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="string">""""自定义"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url_map, param)</span>:</span></span><br><span class="line">        super(RegexConverter, self).__init__(url_map)</span><br><span class="line">        self.regex = param</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># value是在路径进行正则表达式匹配的时候提取的参数</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"15111111111"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、将自定义的转换器添加到flask的应用中</span></span><br><span class="line">app.url_map.converters[<span class="string">'re'</span>] = RegexConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/send/&lt;re(r'1[3456]\d&#123;9&#125;'):mobile&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(mobile)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'send sms to %s '</span> % mobile</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    url = url_for(<span class="string">"send_sms"</span>,mobile=<span class="number">15012345678</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(app.url_map)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>send_sms会提取to_python返回值作为参数mobile的值，index会提取to_url返回值作为参数mobile的值</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><h4 id="form、data、args-json的用法"><a href="#form、data、args-json的用法" class="headerlink" title="form、data、args,json的用法"></a>form、data、args,json的用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index", methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># form和data是用来提取请求体数据</span></span><br><span class="line">    <span class="comment"># request.form可以直接提取请求体中的表单格式的数据，是一个类字典的对象</span></span><br><span class="line">    <span class="comment"># 通过get方法只能拿到多个同名参数的第一个</span></span><br><span class="line">    name = request.form.get(<span class="string">"name"</span>)</span><br><span class="line">    age = request.form.get(<span class="string">"age"</span>)</span><br><span class="line">    <span class="comment"># 同名参数可以用getlist获取</span></span><br><span class="line">    name_li = request.form.getlist(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">print</span> (request.data)</span><br><span class="line">    <span class="comment"># args是用来提取url中的参数（查询字符串）</span></span><br><span class="line">    city = request.args.get(<span class="string">"city"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello name=%s,age=%s,city=%s,name_li=%s,request.data=%s,request.json=%s"</span> % (name, age, city, name_li,request.data,request.json)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>request.method:获取请求方式<br>request.url:获取请求的url<br>request.data:可以获取未经处理过的原始数据，如果数据格式是json的，则取得的是json字符串，排序和请求参数一致<br>request.json:将请求参数做了处理，得到的是字典格式的，因此排序会打乱依据字典排序规则</p><h4 id="上传文件："><a href="#上传文件：" class="headerlink" title="上传文件："></a>上传文件：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    file_obj = request.files.get(<span class="string">'pic'</span>)</span><br><span class="line">    file_obj.save(<span class="string">'./1.png'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'上传成功'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="abort函数、自定义错误处理方法"><a href="#abort函数、自定义错误处理方法" class="headerlink" title="abort函数、自定义错误处理方法"></a>abort函数、自定义错误处理方法</h3><p>abort函数：终止视图函数的执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.form.get(<span class="string">'name'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">"zhangsan"</span> <span class="keyword">or</span> pwd != <span class="string">"admin"</span>:</span><br><span class="line">        <span class="comment"># 使用abort函数可以立即终止视图函数的执行</span></span><br><span class="line">        <span class="comment"># 并可以返回给前端特定的信息</span></span><br><span class="line">        <span class="comment"># 1、传递状态码，必须是b标准的http状态码</span></span><br><span class="line">        <span class="comment"># abort(403)</span></span><br><span class="line">        <span class="comment"># 2、传递响应体信息</span></span><br><span class="line">        resp = Response(<span class="string">'login failed'</span>)</span><br><span class="line">        abort(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>自定义错误处理方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.form.get(<span class="string">'name'</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">"zhangsan"</span> <span class="keyword">or</span> pwd != <span class="string">"admin"</span>:</span><br><span class="line">        <span class="comment"># 使用abort函数可以立即终止视图函数的执行</span></span><br><span class="line">        <span class="comment"># 并可以返回给前端特定的信息</span></span><br><span class="line">        <span class="comment"># 1、传递状态码，必须是b标准的http状态码</span></span><br><span class="line">        <span class="comment"># abort(403)</span></span><br><span class="line">        <span class="comment"># 2、传递响应体信息</span></span><br><span class="line">        resp = Response(<span class="string">'login failed'</span>)</span><br><span class="line">        abort(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_404_error</span><span class="params">(err)</span>:</span></span><br><span class="line">    <span class="string">"""自定义错误信息"""</span></span><br><span class="line">    <span class="comment"># 这个函数的返回值会是前端用户看到的最终结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">u"404错误，错误信息：%s"</span> % err</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><h3 id="设置响应信息"><a href="#设置响应信息" class="headerlink" title="设置响应信息"></a>设置响应信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, Response, make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、使用元祖，返回自定义响应信息</span></span><br><span class="line">    <span class="comment"># return "index page",400,[("city":"chengdu")]</span></span><br><span class="line">    <span class="comment"># return "index page", 400, &#123;"city": "chengdu"&#125;</span></span><br><span class="line">    <span class="comment"># return "index page", 666, &#123;"city": "chengdu"&#125;</span></span><br><span class="line">    <span class="comment"># return "index page", "666 status", &#123;"city": "chengdu"&#125;</span></span><br><span class="line">    <span class="comment"># 2、使用make_response来构造响应信息</span></span><br><span class="line">    resp = make_response(<span class="string">"index"</span>)</span><br><span class="line">    resp.status = <span class="string">"999 status"</span></span><br><span class="line">    resp.headers[<span class="string">"city"</span>] = <span class="string">'chengdu'</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>按照响应体，状态码，响应头，状态码可以随意设置，如果需要设置状态码的信息，使用字符串，状态码和说明用空格隔开</p><h4 id="返回json数据"><a href="#返回json数据" class="headerlink" title="返回json数据"></a>返回json数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, Response, make_response, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># json.dumps将python的字典转换为json字符串</span></span><br><span class="line">    <span class="comment"># json.loads将字符串转换为python中的字典</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># json_str = json.dumps(data)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># return json_str, 200, &#123;"Content-Type": "application/json"&#125;</span></span><br><span class="line">    <span class="comment"># jsonify帮助转为json数据，并设置响应头Content-Type为application/json</span></span><br><span class="line">    <span class="comment"># return jsonify(data)</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(city=<span class="string">"sz"</span>, country=<span class="string">"china"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>jsonify帮助转为json数据，并设置响应头Content-Type为application/json</p><p>jsonify可以传字典或者键值对</p><h4 id="设置cookie、session"><a href="#设置cookie、session" class="headerlink" title="设置cookie、session"></a>设置cookie、session</h4><p>设置cookie：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, Response, make_response, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/set_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(<span class="string">'success'</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">'test'</span>, <span class="string">'1'</span>)</span><br><span class="line">    <span class="comment"># max_age 设置有效期，单位：秒</span></span><br><span class="line">    resp.set_cookie(<span class="string">'test2'</span>, <span class="string">"3"</span>, max_age=<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> request.cookies.get(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(<span class="string">'del'</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">'test2'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>设置session：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flask的session需要用到秘钥字符串</span></span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = <span class="string">"dasdafasda"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># flask默认吧session保存到了cookie中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/set_session')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'name'</span>] = <span class="string">'python'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get_session')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><h3 id="请求上下文、应用上下文"><a href="#请求上下文、应用上下文" class="headerlink" title="请求上下文、应用上下文"></a>请求上下文、应用上下文</h3><p>request, session都属于请求上下文对象<br>current_app,g都属于应用上下文<br>current_app：表示当前运行程序文件的程序实例<br>g：处理请求时，用于临时存储的对象，每次请求都会重设这个变量</p><h3 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_before_first_request</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""在第一次请求处理之前先被执行"""</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"handler_before_first_request"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_before_request</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""每次请求前都被执行"""</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"handler_before_request"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_after_request</span><span class="params">(reponse)</span>:</span></span><br><span class="line">    <span class="string">"""每次请求之后都被执行，前提是视图函数没有出现异常"""</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"handler_after_request"</span>)</span><br><span class="line">    <span class="keyword">return</span> reponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_teardown_request</span><span class="params">(reponse)</span>:</span></span><br><span class="line">    <span class="string">"""每次请求之后都被执行，无论视图函数是否出现异常，都被执行"""</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"handler_teardown_request"</span>)</span><br><span class="line">    path = request.path</span><br><span class="line">    <span class="keyword">if</span> path <span class="keyword">in</span> [url_for(<span class="string">"index"</span>),url_for(<span class="string">"index1"</span>)]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> path == url_for(<span class="string">"index"</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> reponse</span><br><span class="line">    <span class="keyword">return</span> reponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index page"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index1 page"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="flask-script脚本的扩展使用"><a href="#flask-script脚本的扩展使用" class="headerlink" title="flask_script脚本的扩展使用"></a>flask_script脚本的扩展使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># app.run(debug=True)</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>启动方式类似于Django<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜   python _manager.py runserver --<span class="built_in">help</span></span><br><span class="line">usage: _manager.py runserver [-?] [-h HOST] [-p PORT] [--threaded]</span><br><span class="line">                             [--processes PROCESSES] [--passthrough-errors]</span><br><span class="line">                             [-d] [-D] [-r] [-R] [--ssl-crt SSL_CRT]</span><br><span class="line">                             [--ssl-key SSL_KEY]</span><br><span class="line"></span><br><span class="line">Runs the Flask development server i.e. app.run()</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -?, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -h HOST, --host HOST</span><br><span class="line">  -p PORT, --port PORT</span><br><span class="line">  --threaded</span><br><span class="line">  --processes PROCESSES</span><br><span class="line">  --passthrough-errors</span><br><span class="line">  -d, --debug           <span class="built_in">enable</span> the Werkzeug debugger (DO NOT use <span class="keyword">in</span> production</span><br><span class="line">                        code)</span><br><span class="line">  -D, --no-debug        <span class="built_in">disable</span> the Werkzeug debugger</span><br><span class="line">  -r, --reload          monitor Python files <span class="keyword">for</span> changes (not 100% safe <span class="keyword">for</span></span><br><span class="line">                        production use)</span><br><span class="line">  -R, --no-reload       <span class="keyword">do</span> not monitor Python files <span class="keyword">for</span> changes</span><br><span class="line">  --ssl-crt SSL_CRT     Path to ssl certificate</span><br><span class="line">  --ssl-key SSL_KEY     Path to ssl key</span><br></pre></td></tr></table></figure></p><p>shell：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜   python _manager.py shell --<span class="built_in">help</span>    </span><br><span class="line">usage: _manager.py shell [-?] [--no-ipython] [--no-bpython] [--no-ptipython]</span><br><span class="line">                         [--no-ptpython]</span><br><span class="line"></span><br><span class="line">Runs a Python shell inside Flask application context.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -?, --<span class="built_in">help</span>      show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --no-ipython    Do not use the IPython shell</span><br><span class="line">  --no-bpython    Do not use the BPython shell</span><br><span class="line">  --no-ptipython  Do not use the PtIPython shell</span><br><span class="line">  --no-ptpython   Do not use the PtPython shell</span><br></pre></td></tr></table></figure></p><h2 id="Jinja2模板"><a href="#Jinja2模板" class="headerlink" title="Jinja2模板"></a>Jinja2模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># return render_template("index.html", name="python", age=18)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, **data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/WX20200508-172844@2x.png" alt="image"></p><h3 id="字符串过滤球"><a href="#字符串过滤球" class="headerlink" title="字符串过滤球"></a>字符串过滤球</h3><p>safe：禁用转义<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; '<span class="tag">&lt;<span class="name">em</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">em</span>&gt;</span>' | safe&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>capitalize：把变量值的首字母转成大写，其余字母传小写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; 'hello' | capitalize&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>lower：把值转化小写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; 'HELLO' | lower&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>upper：把值转成大写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; 'hello' | upper&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>title：把每个单词的首字母转化成大写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; 'hello' | title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>trim：把值的首位空格去掉<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; ' hello ' | trim&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>自定义过滤器：<br>两种方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"my_list"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># return render_template("index.html", name="python", age=18)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, **data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_step_2</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="string">"""自定义过滤器"""</span></span><br><span class="line">    <span class="keyword">return</span> li[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_template_filter(list_step_2, <span class="string">"li2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter("li3")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_step_3</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="string">"""自定义过滤器"""</span></span><br><span class="line">    <span class="keyword">return</span> li[::<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; my_list | li2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name=&#123;&#123; my_list | li3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=[1, 3, 5]</span><br><span class="line"></span><br><span class="line">name=[1, 4]</span><br></pre></td></tr></table></figure></p><h3 id="使用-WTForms-进行表单验证"><a href="#使用-WTForms-进行表单验证" class="headerlink" title="使用 WTForms 进行表单验证"></a>使用 WTForms 进行表单验证</h3><p><a href="https://dormousehole.readthedocs.io/en/latest/patterns/wtforms.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/patterns/wtforms.html</a><br>当你必须处理浏览器提交的表单数据时，视图代码很快会变得难以阅读。有一些库可 以简化这个工作， WTForms 便是其中之一 ，下面我们将介绍这个库。如果你必 须处理许多表单，那么应当尝试使用这个库</p><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p><a href="https://dormousehole.readthedocs.io/en/latest/patterns/templateinheritance.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/patterns/templateinheritance.html</a><br>Jinja 最有力的部分就是模板继承。模板继承允许你创建一个基础“骨架”模板。这 个模板中包含站点的常用元素，定义可以被子模板继承的 块<br>（extends继承，include包含）</p><h3 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h3><p><a href="https://dormousehole.readthedocs.io/en/latest/patterns/flashing.html（记录消息供模块使用）" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/patterns/flashing.html（记录消息供模块使用）</a><br>一个好的应用和用户界面都需要良好的反馈。如果用户得不到足够的反馈，那么应用 最终会被用户唾弃。 Flask 的闪现系统提供了一个良好的反馈方式。闪现系统的基 本工作方式是：在且只在下一个请求中访问上一个请求结束时记录的消息。一般我们 结合布局模板来使用闪现系统。注意，浏览器会限制 cookie 的大小，有时候网络服 务器也会。这样如果消息比会话 cookie 大的话，那么会导致消息闪现静默失败</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django模板类templates</title>
      <link href="/2019/12/10/python-Django%E6%A8%A1%E6%9D%BF%E7%B1%BBtemplates/"/>
      <url>/2019/12/10/python-Django%E6%A8%A1%E6%9D%BF%E7%B1%BBtemplates/</url>
      
        <content type="html"><![CDATA[<p>配置href时前面加/是相对于域名，如果前面没有加的话当url后面有/会直接添加到后面</p><p><a href="https://docs.djangoproject.com/zh-hans/3.0/ref/templates/builtins/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/3.0/ref/templates/builtins/</a></p><p>1.8.2：比较全的中文翻译<br><a href="https://yiyibooks.cn/xx/django_182/ref/templates/builtins.html" target="_blank" rel="noopener">https://yiyibooks.cn/xx/django_182/ref/templates/builtins.html</a></p><h2 id="模板文件的使用"><a href="#模板文件的使用" class="headerlink" title="模板文件的使用"></a>模板文件的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_render</span><span class="params">(request,teplate_path,context=&#123;&#125;)</span>:</span></span><br><span class="line">    <span class="comment">#加载模板文件</span></span><br><span class="line">    temp = loader.get_template(teplate_path)</span><br><span class="line">    <span class="comment">#定义模板上下文</span></span><br><span class="line">    context = RequestContext(request,context)</span><br><span class="line">    <span class="comment">#模板渲染</span></span><br><span class="line">    res_html = temp.render(context)</span><br><span class="line">    <span class="comment">#返回应答</span></span><br><span class="line">    <span class="keyword">return</span>  HttpResponse(res_html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># return  render(request,'books/index.html',&#123;'content':131&#125;)</span></span><br><span class="line">    my_render(request,<span class="string">'books/index.html'</span>,&#123;<span class="string">'content'</span>:<span class="number">131</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/QQ20191215-225033.png" alt="image"></p><h2 id="模板文件的加载顺序"><a href="#模板文件的加载顺序" class="headerlink" title="模板文件的加载顺序"></a>模板文件的加载顺序</h2><p><img src="/images/WX20191216-111953@2x.png" alt="image"></p><ul><li>首先会去配置的模板目录下面去找模板文件</li><li><p>在去INSTALLED_APPS下面每个应用去找模板文件，前提是应用中必须有templates文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'books'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="模板语言"><a href="#模板语言" class="headerlink" title="模板语言"></a>模板语言</h2><h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p>模板变量的解析顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;book.title&#125;&#125;</span><br></pre></td></tr></table></figure><p>1、当成一个字典 title当成键名，进行取值book[‘title’]<br>2、当成一个对象 title当成对象属性，进行取值book.title<br>3、当成一个对象 title当成对象方法，进行取值book.title()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;book<span class="number">.0</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>1、当成一个字段 title当成键名，进行取值book[0]<br>2、当成一个列表 title当成对象属性，进行取值book[0]</p></li></ul><h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> b <span class="keyword">in</span> bks %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; forloop.counter &#125;&#125;&#123;&#123; b.title &#125;&#125; - &#123;&#123; b.public_date &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>关系比较操作符：&gt; &lt; &gt;= &lt;= == !=<br>注意：进行比较操作时，比较操作符两边必须有空格</p><h3 id="模板过滤器"><a href="#模板过滤器" class="headerlink" title="模板过滤器"></a>模板过滤器</h3><p>date:改变日期的显示格式<br>length:求长度<br>default:设置模板变量的默认值<br>格式：模板变量|过滤器：参数<br>自定义过滤器<br><a href="https://yiyibooks.cn/xx/django_182/howto/custom-template-tags.html" target="_blank" rel="noopener">https://yiyibooks.cn/xx/django_182/howto/custom-template-tags.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> b <span class="keyword">in</span> bks %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; forloop.counter &#125;&#125;&#123;&#123; b.title &#125;&#125; - &#123;&#123; b.public_date|date:'Y年年年-m月-d日'&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>自定义过滤器<br>应用下新建一个templatetags 目录，和models.py、views.py等文件处于同一级别目录下</p><p>例如，你的自定义标签/过滤器在一个名为filters的文件中，那么你的app目录结构看起来应该是这样的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    templatetags/</span><br><span class="line">        __init__.py</span><br><span class="line">        filters.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></p><p>为了让 标签工作，包含自定义标签的应用必须在INSTALLED_APPS中</p><p>然后你可以在模板中像如下这样使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load filters %&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/WX20191216-160907.png" alt="image"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&#123;% load filters %&#125;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;图书信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> b <span class="keyword">in</span> bks %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> b.id|mod_val:<span class="number">2</span> %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; forloop.counter &#125;&#125;&#123;&#123; b.title &#125;&#125; - &#123;&#123; b.public_date|date:'Y年年年-m月-d日'&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>自定义的过滤器函数，至少有一个参数，最多两个</p><h3 id="模板注释"><a href="#模板注释" class="headerlink" title="模板注释"></a>模板注释</h3><ul><li><p>单行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># 注释 #&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 &#123;% comment %&#125; 和 &#123;% endcomment %&#125;，之间的内容会被忽略，作为注释。在第一个标签可以插入一个可选的记录。 比如，当要注释掉一些代码时，可以用此来记录代码被注释掉的原因</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Rendered text with &#123;&#123; pub_date|date:"c" &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% comment <span class="string">"Optional note"</span> %&#125;</span><br><span class="line">    &lt;p&gt;Commented out text with &#123;&#123; create_date|date:"c" &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endcomment %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p><a href="https://yiyibooks.cn/xx/django_182/ref/templates/language.html#template-inheritance" target="_blank" rel="noopener">https://yiyibooks.cn/xx/django_182/ref/templates/language.html#template-inheritance</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125; (要有引号).继承名为&quot;base.html&quot;的父模板</span><br></pre></td></tr></table></figure><p>新建base.html </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;My amazing site&#123;%/span&gt; endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">        &#123;% block sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子模版可能看起来是这样的：修改模板中的title、content<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;My amazing blog&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% for entry in blog_entries %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; entry.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; block.super &#125;&#125;可以引用模板中的数据</span><br></pre></td></tr></table></figure><h3 id="html转义"><a href="#html转义" class="headerlink" title="html转义"></a>html转义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render(request,<span class="string">'books/index.html'</span>,&#123;<span class="string">'content'</span>:<span class="string">"&lt;script&gt;alert('hello')&lt;/script&gt;"</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/WX20191216-172348@2x.png" alt="image"></p><p>如上图，会被转义<br>如果不想被转义可以使用下面方法：</p><ul><li><p>用于独立变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This will be escaped: &#123;&#123; data &#125;&#125;</span><br><span class="line">This will <span class="keyword">not</span> be escaped: &#123;&#123; data|safe &#125;&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This will be escaped: &amp;lt;b&amp;gt;</span><br><span class="line">This will <span class="keyword">not</span> be escaped: &lt;b&gt;</span><br></pre></td></tr></table></figure></li><li><p>用于模板代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% autoescape off %&#125;</span><br><span class="line">    Hello &#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="csrf攻击"><a href="#csrf攻击" class="headerlink" title="csrf攻击"></a>csrf攻击</h2><p>很多页面都需要在登录后才能访问，此时可以用装饰器来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(view_func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request,*view_args,**view_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.session.has_key(<span class="string">'islogin'</span>):</span><br><span class="line">            <span class="keyword">return</span> view_func(request,*view_args,**view_kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">'books/index.html'</span>,&#123;<span class="string">'content'</span>:<span class="string">"&lt;script&gt;alert('hello')&lt;/script&gt;"</span>&#125;)</span><br><span class="line">    <span class="comment"># my_render(request,'books/index',&#123;'content':"&lt;script&gt;alert('hello')&lt;/script&gt;"&#125;)</span></span><br></pre></td></tr></table></figure><p>django默认启用了csrf防护，在setttings.py里面，只针对post提交<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在使用POST 表单的模板中，对于内部的URL请在<form> 元素中使用csrf_token 标签：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></form></p><p>原理：在csrf_token的模板页面会生成一个隐藏域，并且会返回一个cookie信息，提交的时候会一并两个值提交给服务器进行验证</p><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>首先在project urls.py文件里面添加namespace：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>,include((<span class="string">'books.urls'</span>,<span class="string">'books'</span>),namespace=<span class="string">'books'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后在app urls.py文件里面添加name 和app_name ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app_name = <span class="string">'books'</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">   urlpatterns = [</span><br><span class="line">    path(<span class="string">'index2/'</span>, views.index,name = <span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'url_reverse/'</span>, views.url_reverse),</span><br><span class="line">]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>最后在模板文件里面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">跳转到首页<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:index' %&#125;"</span>&gt;</span>跳转到首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><p>捕捉位置参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">'^showargs/(\d+)/(\d+)/$'</span>, views.showargs,name = <span class="string">'showargs'</span>),</span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:showargs' 1  2 %&#125;"</span>&gt;</span>跳转到位置参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>捕捉关键字</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">'^showkwargs/(?P&lt;c&gt;\d+)/(?P&lt;d&gt;\d+)/$'</span>, views.showkwargs,name = <span class="string">'showkwargs'</span>),</span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:showkwargs' c=1  d=2 %&#125;"</span>&gt;</span>跳转到关键字参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在视图里面使用反向解析：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader,RequestContext</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_redirect</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># url = reverse('books:index')</span></span><br><span class="line">    <span class="comment"># url = reverse('books:showkwargs',args=(1,2))</span></span><br><span class="line">    url = reverse(<span class="string">'books:showkwargs'</span>,kwargs=&#123;<span class="string">'c'</span>:<span class="number">3</span>,<span class="string">'d'</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span>  redirect(url)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django视图类views</title>
      <link href="/2019/12/10/python-Django%E8%A7%86%E5%9B%BE%E7%B1%BBviews/"/>
      <url>/2019/12/10/python-Django%E8%A7%86%E5%9B%BE%E7%B1%BBviews/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/index'</span>)</span><br></pre></td></tr></table></figure><p>重定向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/index'</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 错误页面</span></span><br><span class="line"></span><br><span class="line">开发模式下的错误如下：</span><br><span class="line"></span><br><span class="line">![image](/images/WX20191213<span class="number">-181303</span>@<span class="number">2</span>x.png)</span><br><span class="line"></span><br><span class="line">可以在settings.py中设置</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line"><span class="comment"># DEBUG = True</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ALLOWED_HOSTS = []</span></span><br><span class="line">DEBUG = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><p>DEBUG改为False</p><p>如果想使用自定义的错误页面可以在templates下面新建一个404.html页面（或者500）<br><img src="/images/WX20191213-181900@2x.png" alt="image"><br>request_path 可以输出当前访问的路径<br><img src="/images/WX20191213-182036@2x.png" alt="image"></p><h2 id="捕获url参数"><a href="#捕获url参数" class="headerlink" title="捕获url参数"></a>捕获url参数</h2><p>在urls.py中配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">'^showarg(\d+)/$'</span>, views.showarg),</span><br></pre></td></tr></table></figure></p><p>在views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showarg</span><span class="params">(request,num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure></p><p><img src="/images/WX20191213-183019@2x.png" alt="image"></p><p>关键字参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">'^showarg(?P&lt;num&gt;\d+)/$'</span>, views.showarg)</span><br></pre></td></tr></table></figure></p><p> 关键字参数，视图中参数名必须和正则表达式组名一致<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showarg</span><span class="params">(request,num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure></p><p>上面必须是<font color="#ff0000">num</font></p><h2 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h2><p>request.POST 和 request.GET  返回是QueryDict<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> QueryDict</span><br><span class="line">q = QueryDict(<span class="string">'a=1&amp;b=1&amp;c=2'</span>)</span><br><span class="line">q[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure></p><p> request.path：去除域名和后面的参数<br> request.method：GET POST<br> request.encoding<br> request.FILES<br> request.COOKIES<br> request.session</p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>在settings.py里面<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR,<span class="string">'static'</span>)]<span class="comment">#设置静态文件的保存路径</span></span><br></pre></td></tr></table></figure></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie 是由服务器生成的，存储在浏览器端的一小段文本信息<br>cookie的特点：</p><ul><li>以键值对方式进行存储</li><li>通过浏览器访问一个网站时，会对浏览器存储的跟网站相关的所有cookie信息发送给改网站的服务器。request.COOKIES</li><li>cookie是基于域名安全的</li><li>cookie 是有过期时间的，如果不指定，默认关闭浏览器之后cookie就会过期<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = HttpResponse(<span class="string">'设置cookie'</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'num'</span>,<span class="number">1</span>,max_age=<span class="number">14</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">    <span class="comment"># response.set_cookie('num',1,expires=datetime.now()+timedelta(days=14))</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">(request)</span>:</span></span><br><span class="line">    num = request.COOKIES[<span class="string">'num'</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure></li></ul><p>设置过期时间max_age和expires两种方式</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session存储在服务器端</p><ul><li>session是以为键值对细腻系存储的</li><li>session依赖于cookie。唯一的标识码在sessionid cookie中</li><li>session也是有过期时间的，如果不确定，默认两周就会过期<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session</span><span class="params">(request)</span>:</span></span><br><span class="line">    request.session[<span class="string">'num1'</span>]=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'设置session'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">(request)</span>:</span></span><br><span class="line">    num = request.session[<span class="string">'num1'</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure></li></ul><p>当调用set_session时，会在Django数据库中django_session生成session数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------+----------------------------------------------------------------------+----------------------------+</span><br><span class="line">| session_key                      | session_data                                                         | expire_date                |</span><br><span class="line">+----------------------------------+----------------------------------------------------------------------+----------------------------+</span><br><span class="line">| azisw30yieoyz6oxas77ffeikzv3381q | ZmU1M2MzNDIwNzBmNGUzYzVmNjljYmI2ODJlZjQzOWVlYWQ2YjAwZjp7Im51bTEiOjJ9 | 2019-12-29 12:33:42.981954 |</span><br><span class="line">+----------------------------------+----------------------------------------------------------------------+----------------------------+</span><br></pre></td></tr></table></figure></p><p>session_data：设置的session值经过base64编码</p><p>session的方法：</p><ul><li>读取值也可以用request.session.get(‘键’，默认值)</li><li>清除存储中删除值的部分(经过base64编码后的键值对)request.session.clear()</li><li>删除整条数据request.session.flush()</li><li>删除某个键及对应的值del  request.session[‘num1’]</li><li><p>设置过期时间默认14天request.session.set_expiry(value)</p><ul><li>value是一个整数，多少秒后过期</li><li>value=0则会在用户的浏览器关闭时过期</li><li>None：代表默认14天</li></ul><h2 id="cookie和session使用场景"><a href="#cookie和session使用场景" class="headerlink" title="cookie和session使用场景"></a>cookie和session使用场景</h2><p>cookie：记住用户名<br>session：银行卡账号，密码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django模型类model</title>
      <link href="/2019/12/10/python-Django%E6%A8%A1%E5%9E%8B%E7%B1%BBmodel/"/>
      <url>/2019/12/10/python-Django%E6%A8%A1%E5%9E%8B%E7%B1%BBmodel/</url>
      
        <content type="html"><![CDATA[<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>在settings.py中默认使用的是sqlite3数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改为mysql：</p><p>首先使用mysql -uroot -p登录数据库<br>创建数据库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> books <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="comment"># 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'books'</span>,<span class="comment">#使用数据库的名字，数据库必须手动创建</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'wt123456'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,<span class="comment">#指定mysql数据库的所在电脑ip</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,<span class="comment">#mysql服务的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></p><p>出现下面异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure><p>需要运行下面的命令，安装一下pymysql模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><p>然后需要在<strong>init</strong>文件里面添加导入该模块<br><img src="/images/WX20191210-175726@2x.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></p><p>然后运行又会出现下面异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3</span><br></pre></td></tr></table></figure></p><p>Django连接MySQL时默认使用MySQLdb驱动，但MySQLdb不支持Python3</p><p>需要注释掉下面两行代码<br><img src="/images/WX20191210-181326@2x.png" alt="image"></p><p>运行还会报错需要修改下面你的方法<br><img src="/images/WX20191210-181708@2x.png" alt="image"></p><p>附：下面是site-packages包的所在路劲，可以直接去修改上面两个文件对应的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from distutils.sysconfig import get_python_lib</span><br><span class="line">print(get_python_lib())</span><br></pre></td></tr></table></figure></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>在models.py里面创建models:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class BookInfo(models.Model):</span><br><span class="line">    title = models.CharField(max_length=20)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=0)</span><br><span class="line"></span><br><span class="line">class HeroInfo(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20)</span><br><span class="line">    gender = models.BooleanField(default= False)</span><br><span class="line">    book = models.ForeignKey(&apos;BookInfo&apos;,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure></p><p>生成迁移文件python manage.py makemigrations<br>执行迁移文件python manage.py migrate </p><p>然后就可以查看数据库里面的表结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_books            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| books_bookinfo             |</span><br><span class="line">| books_heroinfo             |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc books_bookinfo;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id          | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| title       | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| public_date | date        | NO   |     | NULL    |                |</span><br><span class="line">| comment     | int(11)     | NO   |     | NULL    |                |</span><br><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc books_heroinfo;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id      | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name    | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| gender  | tinyint(1)  | NO   |     | NULL    |                |</span><br><span class="line">| book_id | int(11)     | NO   | MUL | NULL    |                |</span><br><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p>说明表已经创建成功</p><p>现在可以往里面添加数据:可以使用python manage.py shell也可以直接使用sql语句如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">insert into books_bookinfo(title,public_date,comment)values</span><br><span class="line">(&apos;射雕英雄传&apos;,&apos;1980-5-1&apos;,34),</span><br><span class="line">(&apos;天龙八部&apos;,&apos;1986-7-1&apos;,40),</span><br><span class="line">(&apos;笑傲江湖&apos;,&apos;1981-12-1&apos;,80),</span><br><span class="line">(&apos;雪山飞狐&apos;,&apos;1983-11-11&apos;,90);</span><br><span class="line">insert into books_heroinfo(name,gender,book_id)values</span><br><span class="line">(&apos;郭靖&apos;,1,1),</span><br><span class="line">(&apos;黄蓉&apos;,0,1),</span><br><span class="line">(&apos;黄药师&apos;,1,1),</span><br><span class="line">(&apos;欧阳锋&apos;,1,1),</span><br><span class="line">(&apos;梅超风&apos;,0,1),</span><br><span class="line">(&apos;乔峰&apos;,1,2),</span><br><span class="line">(&apos;段誉&apos;,1,2),</span><br><span class="line">(&apos;虚竹&apos;,1,2),</span><br><span class="line">(&apos;王语嫣&apos;,0,2),</span><br><span class="line">(&apos;令狐冲&apos;,1,3),</span><br><span class="line">(&apos;岳不群&apos;,1,3),</span><br><span class="line">(&apos;东方不败&apos;,0,3),</span><br><span class="line">(&apos;胡斐&apos;,1,4),</span><br><span class="line">(&apos;苗若兰&apos;,0,4);</span><br></pre></td></tr></table></figure></p><h2 id="设置mysql日志"><a href="#设置mysql日志" class="headerlink" title="设置mysql日志"></a>设置mysql日志</h2><p>进入mysql环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>打开日志功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on;</span><br></pre></td></tr></table></figure></p><p>查找日志文件地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;general_log_file&apos;;</span><br><span class="line"></span><br><span class="line">+------------------+---------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                       |</span><br><span class="line">+------------------+---------------------------------------------+</span><br><span class="line">| general_log_file | /usr/local/mysql/data/hansdeMacBook-Pro.log |</span><br><span class="line">+------------------+---------------------------------------------+</span><br></pre></td></tr></table></figure></p><p>实时监控日志信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tail -f /usr/local/mysql/data/hansdeMacBook-Pro.log</span><br></pre></td></tr></table></figure></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  books.models <span class="keyword">import</span> BookInfo</span><br><span class="line">b = BookInfo.objects.get(id=<span class="number">1</span>)</span><br><span class="line">b = BookInfo.objects.get(id=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>如果查询的对象不存在，异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books.models.BookInfo.DoesNotExist: BookInfo matching query does not exist</span><br></pre></td></tr></table></figure></p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>查询所有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = BookInfo.objects.all()</span><br><span class="line">type(b)</span><br><span class="line"></span><br><span class="line">django.db.models.query.QuerySet</span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><pre><code>查询多个用filter，单个用get</code></pre><ul><li><p>判等</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.get(id__exact = <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>模糊 查询</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(title__contains=<span class="string">'传'</span>)</span><br><span class="line">BookInfo.objects.filter(title__endswith=<span class="string">'传'</span>)</span><br><span class="line">BookInfo.objects.filter(title__startswith=<span class="string">'传'</span>)</span><br></pre></td></tr></table></figure></li><li><p>空查询</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(title__isnull=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>范围查询</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(id__in = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure></li><li><p>比较查询<br>  大于gt 小于lt 大于等于gte 小于等于lte</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(id__gt = <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>日期查询</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(public_date__year = <span class="number">1980</span>)</span><br></pre></td></tr></table></figure><p>  查询某个日期之后</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date </span><br><span class="line">BookInfo.objects.filter(public_date__gt= date(<span class="number">1980</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><p>查询不等于3的图书<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.exclude(id = <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><h3 id="order-by"><a href="#order-by" class="headerlink" title="order_by"></a>order_by</h3><p>查看所有信息，按照id从小到大进行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.all().order_by(<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure></p><p>查看所有信息，按照id从大到小进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.all().order_by(<span class="string">'-id'</span>)</span><br></pre></td></tr></table></figure><h2 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h2><p>用于查询时条件之前存在与或非的逻辑关系<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">BookInfo.objects.filter(Q(id__gt = <span class="number">3</span>) &amp; Q(title__contains = <span class="string">'传'</span>))</span><br><span class="line">BookInfo.objects.filter(Q(id__gt = <span class="number">3</span>) | Q(title__contains = <span class="string">'传'</span>))</span><br><span class="line">BookInfo.objects.filter(~Q(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure></p><h2 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h2><p>用于类属性之前的比较<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">BookInfo.objects.filter(id__gt=F(<span class="string">'comment'</span>))</span><br><span class="line">BookInfo.objects.filter(id__gt=F(<span class="string">'comment'</span>)*<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>对查询结果进行聚合操作<br>sum count avg max min </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum,Count,Avg,Max,Min</span><br><span class="line">BookInfo.objects.all().aggregate(Count(<span class="string">'id'</span>))</span><br><span class="line">BookInfo.objects.aggregate(Count(<span class="string">'id'</span>))</span><br></pre></td></tr></table></figure><p>返回值：{‘id__count’: 4}</p><p>内置count函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.all().count()</span><br><span class="line">BookInfo.objects.count()</span><br></pre></td></tr></table></figure><p>返回值：4</p><h3 id="查询集"><a href="#查询集" class="headerlink" title="查询集"></a>查询集</h3><p>all filter exclude orderby 调用这些函数会产生一个查询集<br>特性：</p><ul><li>惰性查询<br>  只有在实际使用数据的是时候才会发生对数据库的真正查询</li><li>缓存<br>  当使用同一个查询集之后再使用这个查询集时，使用的是缓存中的结果</li></ul><p>限制查询集：<br>可以对一个查询集进行取下标和切片操作来限制查询集的记过。对一个查询集进行切片操作会产生一个新的查询集,下标不能为负数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = BookInfo.objects.all()</span><br><span class="line">b[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">b[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>exits() 方法：查询集是否存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.exists()</span><br></pre></td></tr></table></figure></p><h2 id="模型类之间的关系"><a href="#模型类之间的关系" class="headerlink" title="模型类之间的关系"></a>模型类之间的关系</h2><p>一对多的关系<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.ForeignKey()</span><br></pre></td></tr></table></figure></p><p>多对多关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.ManyToManyField()</span><br></pre></td></tr></table></figure><p>一对一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.OneToOneField()</span><br></pre></td></tr></table></figure></p><p>多对多和一对一随便定义在那个类里面都行</p><h2 id="关联查询-一对多"><a href="#关联查询-一对多" class="headerlink" title="关联查询(一对多)"></a>关联查询(一对多)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    gender = models.BooleanField(default= <span class="keyword">False</span>)</span><br><span class="line">    book = models.OneToOneField(<span class="string">'BookInfo'</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>查询 id为1的图书关联的所有英雄信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = BookInfo.objects.get(id = <span class="number">1</span>)</span><br><span class="line">b.heroinfo_set.all()</span><br></pre></td></tr></table></figure></p><p>查询 id为1的英雄关联的图书信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h = HeroInfo.objects.get(id =<span class="number">1</span>)</span><br><span class="line">h.book</span><br></pre></td></tr></table></figure></p><p>通过模型类实现关联查询</p><ul><li><p>查询图书，图书关联的英雄名字包含‘风’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(heroinfo__name__contains=<span class="string">'风'</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询图书，英雄id大于3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.objects.filter(heroinfo__id__gt=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询‘天龙八部’的所有英雄信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HeroInfo.objects.filter(book__title=<span class="string">'天龙八部'</span>)</span><br></pre></td></tr></table></figure></li></ul><font color="#ff0000">注意：类里面有关联属性，直接写关联数据类似上面的book</font><h2 id="插入、更新和删除"><a href="#插入、更新和删除" class="headerlink" title="插入、更新和删除"></a>插入、更新和删除</h2><p>插入和更新<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = HeroInfo()</span><br><span class="line">h.name =<span class="string">"段誉"</span></span><br><span class="line">h.gender = <span class="keyword">False</span></span><br><span class="line">h.book = b</span><br><span class="line">h.save()</span><br></pre></td></tr></table></figure></p><p>也可以使用create方法进行插入操作</p><p>删除：调用delete方法</p><h2 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h2><p>比如省市县<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.ForeignKey(self)</span><br></pre></td></tr></table></figure></p><p>需要遵循上面一对多的查询原则</p><h2 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h2><p>Manager对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(BookInfo.objects)</span><br><span class="line">django.db.models.manager.Manager</span><br></pre></td></tr></table></figure></p><p>定义一个book属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    book = models.Manager()</span><br></pre></td></tr></table></figure><p>使用book属性查询数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.book.all()</span><br></pre></td></tr></table></figure></p><p>其他：</p><ul><li>改变查询结果集<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">'''模型管理器类'''</span></span><br><span class="line">    <span class="comment">#改变查询结果集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span><br><span class="line">        books = super().all()</span><br><span class="line">        books = books.filter(id = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    books = BookInfoManager()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BookInfo.books.all()</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&lt;BookInfo: BookInfo object (<span class="number">1</span>)&gt;]&gt;</span><br></pre></td></tr></table></figure><ul><li>封装函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">'''模型管理器类'''</span></span><br><span class="line">    <span class="comment">#改变查询结果集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span><br><span class="line">        books = super().all()</span><br><span class="line">        books = books.filter(id = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line"></span><br><span class="line">    <span class="comment">#封装函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span><span class="params">(self, title, public_date)</span>:</span></span><br><span class="line">        <span class="comment"># obj = BookInfo()</span></span><br><span class="line">        <span class="comment">#获取self所在的模型类</span></span><br><span class="line">        obj = self.model</span><br><span class="line">        obj.title = title</span><br><span class="line">        obj.public_date = public_date</span><br><span class="line">        obj.save()</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    books = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @classmethod</span></span><br><span class="line">    <span class="comment"># def create_book(cls, title, public_date):</span></span><br><span class="line">    <span class="comment">#     obj = cls()</span></span><br><span class="line">    <span class="comment">#     obj.title = title</span></span><br><span class="line">    <span class="comment">#     obj.public_date = public_date</span></span><br><span class="line">    <span class="comment">#     obj.save()</span></span><br><span class="line">    <span class="comment">#     return obj</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    gender = models.BooleanField(default= <span class="keyword">False</span>)</span><br><span class="line">    book = models.OneToOneField(<span class="string">'BookInfo'</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure></li></ul><p>使用下面语句插入数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = BookInfo.books.create_book(<span class="string">'test'</span>,<span class="string">'1900-1-1'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h2><p>Django默认生成的表名：<br>应用名小写_模型类名小写<br>元选项：<br>需要在模型类中定义一个元素Meta，在里面定义一个累属性db_table就可以执行表名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    public_date = models.DateField()</span><br><span class="line">    comment =models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    books = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @classmethod</span></span><br><span class="line">    <span class="comment"># def create_book(cls, title, public_date):</span></span><br><span class="line">    <span class="comment">#     obj = cls()</span></span><br><span class="line">    <span class="comment">#     obj.title = title</span></span><br><span class="line">    <span class="comment">#     obj.public_date = public_date</span></span><br><span class="line">    <span class="comment">#     obj.save()</span></span><br><span class="line">    <span class="comment">#     return obj</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'book'</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Django基本配置</title>
      <link href="/2019/12/10/python-Django%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/10/python-Django%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>可以用直接用pycharm创建一个Django项目，也可以使用下面的命令行<br>创建：django-admin startproject DjangoDemo创建django 项目<br>运行：python manage.py runserver<br>创建成功后可以打开<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br>如果如下图则创建成功<br><img src="/images/WX20191210-142321.png" alt="image"></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>__init__: 说明这是一个python包</li><li>settings.py: 项目的配置文件</li><li>urls.py: 进行url路由配置</li><li>wsgi.py: web服务器和Django交互的入口</li><li>manage.py: 项目的管理文件</li></ul><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>进入DjangoDemo目录<br>创建应用使用：python manage.py startapp books<br><!-- - 生成迁移文件python manage.py makemigrations --><br><!-- - 执行迁移文件python manage.py migrate  --></p><!-- 控制台可以使用python manage.py shell --><ul><li><p>注册应用：<br>  在settings.py中<br>  <img src="/images/WX20191210-144129@2x.png" alt="image"></p></li><li><p>注册模板：如果存在可以省略这一步<br>  在根目录新建templates文件夹<br>  在在settings.py注册</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]</span><br></pre></td></tr></table></figure><p>  <img src="/images/WX20191210-144946@2x.png" alt="image"></p></li><li><p>在urls.py里面配置url</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    path(&apos;&apos;,include(&apos;books.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>  <img src="/images/WX20191210-145832@2x.png" alt="image"><br>  在books目录下面新建urls.py,之后url请求都在books下面urls.py文件中进行配置<br>  如下：<br>  <img src="/images/WX20191210-150228@2x.png" alt="image"><br>  指向了views.py中的index方法</p></li><li><p>配置views.py<br>  <img src="/images/WX20191210-150606@2x.png" alt="image"></p></li></ul><p>此时就会成功显示hello world<br><img src="/images/WX20191210-150938.png" alt="image"></p><p>具体MVT使用见其他章节</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python APP自动化测试</title>
      <link href="/2019/12/07/python-APP%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/12/07/python-APP%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>jdk</li><li>android sdk</li><li>python</li><li>appium</li><li>nodejs</li><li>appium-python-client</li></ul><p>需要配置上面几个环境，具体的网上教程很多，不再赘述</p><h2 id="生成测试报告"><a href="#生成测试报告" class="headerlink" title="生成测试报告"></a>生成测试报告</h2><p><a href="http://tungwaiyip.info/software/HTMLTestRunner.html" target="_blank" rel="noopener">http://tungwaiyip.info/software/HTMLTestRunner.html</a></p><p>需要下载HTMLTestRunner模块，可以直接导入到python环境中也可以直接copy在项目中直接使用，但是使用的过程中，因为里面的方法中有些语法在python3中不支持，运行会报错，所以需要修改下，下面是我修改后的py文件可以直接使用</p><p>具体的使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time, os, unittest</span><br><span class="line"><span class="keyword">from</span> baseView.HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">''' Run test '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cases=<span class="string">"./"</span>, title=<span class="string">u'自动化测试报告'</span>, description=<span class="string">u'模块单元测试'</span>)</span>:</span></span><br><span class="line">        self.cases = cases</span><br><span class="line">        self.title = title</span><br><span class="line">        self.des = description</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># for filename in os.listdir(self.cases):</span></span><br><span class="line">        <span class="comment">#     if filename == "report":</span></span><br><span class="line">        <span class="comment">#         break</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     os.mkdir(self.cases + '/report')</span></span><br><span class="line"></span><br><span class="line">        now = time.strftime(<span class="string">"%Y-%m-%d_%H_%M_%S"</span>)</span><br><span class="line">        fp = open(<span class="string">"../reports/"</span> + now + <span class="string">"result.html"</span>, <span class="string">'wb'</span>)</span><br><span class="line">        tests = unittest.defaultTestLoader.discover(<span class="string">"../test_case"</span>, pattern=<span class="string">'test_photopick.py'</span>, top_level_dir=<span class="keyword">None</span>)</span><br><span class="line">        runner = HTMLTestRunner(stream=fp, title=self.title, description=self.des)</span><br><span class="line">        runner.run(tests)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self)</span>:</span></span><br><span class="line">        tests = unittest.defaultTestLoader.discover(self.cases, pattern=<span class="string">'*sta.py'</span>, top_level_dir=<span class="keyword">None</span>)</span><br><span class="line">        runner = unittest.TextTestRunner()</span><br><span class="line">        runner.run(tests)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = TestRunner()</span><br><span class="line">    test.run()</span><br></pre></td></tr></table></figure><p>文件地址：<a href="/file/HTMLTestRunnerA.py">HTMLTestRunner.py</a><br>如果需要在测试报告中查看日志输出，可以使用下面的方式：</p><ul><li><p>显示在表上面</p><p>  <a href="https://stackoverrun.com/cn/q/13119187" target="_blank" rel="noopener">https://stackoverrun.com/cn/q/13119187</a></p><p>  <img src="/images/image-20191207181035986.png" alt="image-20191207181035986"><br>  文件地址：<a href="/file/HTMLTestRunnerB.py">HTMLTestRunner.py</a> </p></li><li><p>显示在每个测试用例里面</p><p>  <a href="https://www.cnblogs.com/fengf233/p/10871055.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengf233/p/10871055.html</a></p><p>  <img src="/images/image-20191207215905816.png" alt="image-20191207215905816"><br>  文件地址：<a href="/file/HTMLTestRunnerC.py">HTMLTestRunner.py</a> </p></li><li><p>可以进一步美化测试报告:</p><p>  <a href="https://github.com/findyou/HTMLTestRunnerCN/tree/dev" target="_blank" rel="noopener">https://github.com/findyou/HTMLTestRunnerCN/tree/dev</a></p><p>  文件地址：<a href="/file/HTMLTestRunnerD.py">HTMLTestRunner.py</a><br>  <img src="/images/WX20191209-155317.png" alt="image-20191207215905816"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意事项</title>
      <link href="/2018/06/01/frist-day/"/>
      <url>/2018/06/01/frist-day/</url>
      
        <content type="html"><![CDATA[<h3 id="签证"><a href="#签证" class="headerlink" title="签证"></a>签证</h3><p>从2015年6月10日开始，印尼巴厘岛对中国公民免签，离境税也取消了，不再收25美金的离境税。</p><h3 id="入境"><a href="#入境" class="headerlink" title="入境"></a>入境</h3><p>印尼雅加达和巴厘岛都有免签，中国人直接过去一般的过境通道就好，不要去Visa on arrival那里(一个是“Visa Free”办理免签，一个是“Visa on Arrival”办理落地签)，印尼海关不会提醒你可以免签的，宰一个是一个<br>然后，下了飞机走快点，后面排队人多的话海关不会要求贿赂，有要求可以跟他耗</p><p>相信这个很多人都中招过，入境的边检人员明目张胆地问你要小费，而且基本只针对中国人。为什么会这样？ 都是中国旅游团惯出来的！跟团的人，自己动手能力不强，有些人不会填入境卡，或者有些填得不对，不完整，所以印尼的边检人员就理所当然要小费。旅游团的导游怕惹事，干脆让所有跟团游客准备小费，入境的时候不管对方要不要，都在护照里夹上钱，递过去。渐渐的，巴厘岛的边检被惯出毛病，只要看到中国人，就开口（注意，是用中文）说：“小费啦，100块！”有人还被要过300块人民币。实际上，入境海关是根本不需要给小费的，就算入境卡或者申报表填得不完整，拿笔补好就是。</p><p>巴厘岛边检的勒索套路如下：</p><ol><li>中国旅游团入境，几乎都得给小费；</li><li>自助游的人，巴厘岛边检首先会翻你的护照；</li><li>如果护照上没有签证，一片空白，那么他们试你英文水平，其实都是很简单的问题，比如有没有返程机票、住什么地方、呆多久；</li><li>如果你护照上显示没有去过什么地方，英文也不行，那就是他们下手最佳对象，要个100-300人民币轻轻松松。</li></ol><p><img src="/images/visa.jpg" alt="..."></p><h3 id="插头"><a href="#插头" class="headerlink" title="插头"></a>插头</h3><p>德国标准，需要购买德标转插头</p><p><img src="/images/plug.jpg" alt="..."></p><p>最好准备好转换头</p><h3 id="“小费、小费”"><a href="#“小费、小费”" class="headerlink" title="“小费、小费”"></a>“小费、小费”</h3><p>当你跟巴厘岛边检斗智斗勇，终于入境之后，取好行李，松了一口气，走出机场。这个时候，几个当地人会过来帮你拿行李，有些甚至带”抢“的味道。<br>之后会发生什么，大家也知道了，给少了还不让你走。</p><h3 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h3><p>1人民币=2,163.9559印尼卢比<br>当地的现金兑换点鱼龙混杂，因为印尼盾面值大，有可能会少给你；也有的兑换点外面的汇率标的很高，但会收额外佣金，所以要找有明确标识“no commission（无佣金）”的店</p><h3 id="机场出租车"><a href="#机场出租车" class="headerlink" title="机场出租车"></a>机场出租车</h3><p>出机场右转可以看到机场出租汽车售票处，根据到达的地区不同收费（库塔50,000印尼盾；萨努尔95,000印尼盾；努沙杜瓦95,000印尼盾；乌布195,000印尼盾），价格供参考，可能会随时间淡旺季有所变化。缴费后出具单子，然后由出租车（黑色车身）司机载你去酒店。因为机场出租车是被垄断的，其他公司出租车不得进入载客，所以价格较贵。番友@wxcwx分享：出机场千万别打黑车 黑的比机场内出租厉害 而且乱送酒店 kuta我被黑过 200000！</p><h3 id="巴厘岛购物"><a href="#巴厘岛购物" class="headerlink" title="巴厘岛购物"></a>巴厘岛购物</h3><p>砍价：岛上小贩标价很随意，一般还价从1折起，二折成交。一个技巧是把单位换算成“千”，比如20，000，想成20千，然后直接想成人民币，然后你在脑子里想这东西到底值多少钱就容易了。简单的说，巴厘岛不适合喜欢购物的人，购物还是去机场吧。</p><ul><li>巴厘岛免税店<br>巴厘岛有多家大型的DFS，包括库塔、登巴萨、从萨努尔至奴沙杜瓦的路上以及机场，不过建议大家还是在机场购买，因为可以直接拿走，如果岛上购买需要先付钱然后凭单据至机场DFS店领取。</li></ul><ul><li>DISCOVERY<br>库塔最高档的商场，囊括购物、餐饮、娱乐等设置，地下一层还设有一个SOGO百货，可以考虑在这里购买POLO衫，商场里POLO衫专柜很多，一般都有折扣优惠，购买多见还能获得更高的折扣。一层是Sogo，和国内的一样，价格也和国内差不多~ 家乐福可以买点当地的小零食给家人。<br>地址：Jalan Kartika Plasa Kuta</li></ul><ul><li>太阳百货<br>和围绕在它周围的一些商店，构成了一个滨临海滩的购物商业街，中国人熟悉的肯德基、麦当劳和必胜客都有门店。太阳百货的一楼是一个超市，化妆防晒品、食品、水果、工艺品等一应俱全。</li></ul><h3 id="换汇骗局"><a href="#换汇骗局" class="headerlink" title="换汇骗局"></a>换汇骗局</h3><ol><li>借口说，你的美金有问题，比如年代不对，或者有折痕、太旧等，绕乱你的视线，跟你打心理战，让你想速速换钱走人。</li><li>用很多小面额的钱兑换给你，让你要数半天。等你数完，如果正确，赶紧把钱收好。我们3个在印度被骗，就是因为第一次数下来正确的，换钱的人说：来，我再帮你数一遍。把钱拿过去，数完不知道什么时候抽走一张大钞。此时已经数了3遍，一般的人不会再数第4遍。</li><li>赌你不核对。换钱的人当着你的面，嘴上念1、2、3、4、5……，但是钱会少放一两张给你，10张一摞，当发现你开始点钱之后，他后面会把少放的钱添加进去，整个过程很快，你不细心根本看不出破绽。所以一定要点钱！</li><li>玩数字游戏，比如，应该给你3960000印尼盾，结果给你3096000印尼盾。印尼的钱，面额实在太大了，而且又很难分，如果你不细心，很容易就被蒙骗了。</li></ol><p>尽量用中国的借记卡在巴厘岛的ATM机上取钱，目前平安银行每天取钱第一笔免手续费、华夏银行每个月第一笔免手续费。只要巴厘岛的ATM机上有中国银联的标志，都可以取现金，有的银行ATM机还有中文界面。<br><img src="/images/atm.jpg" alt="..."></p><h3 id="巴厘岛当地交通"><a href="#巴厘岛当地交通" class="headerlink" title="巴厘岛当地交通"></a>巴厘岛当地交通</h3><ul><li>出租车（TAXI）</li></ul><p>巴厘岛的出租车分5种，分别是浅蓝灰色的Bali Taxi、绿色的 Panwirthi Taxi、橘色的Praja Taxi、白色的Ngurah Rai Taxi和黑 色的机场出租车。其中Bali Taxi口碑最佳，在挡风玻璃上标 有“BlueBird Group”和蓝色鸟的标记所以也称蓝鸟出租车，司机 有礼貌、基本跳表计费。巴厘岛可以使用Uber.</p><p>当地出租车很黑，就算是蓝鸟的的士，都是不打表的，而且态度很差。要出行的可以下载当地一个打车软件，Grab， 可以打到摩托车，还能送快递…碉堡了…虽然送快递没什么卵用(°_°)…<br>假蓝色出租车：<br>巴厘岛的蓝鸟出租是由外国人经营的，且有规模的Blue Bird Group集团，司机都经过严格的训练、有严格的管理，价格公道，不会宰客。</p><p><img src="/images/taxi.jpg" alt="..."><br>以上这些全是假的！！</p><p>如何分辨真正的蓝鸟出租呢？看清楚，真的蓝鸟，在挡风玻璃前，有“Blue Bird Group”一行英文。<br>大部分的蓝鸟出租是丰田的车，而且后车门上也有蓝鸟的Logo，跟车顶的一模一样。<br><img src="/images/taxi1.jpg" alt="..."></p><p>巴厘岛有Uber，可以试试，比蓝鸟便宜，而且还比较正规。</p><p>小贴士：Bali Taxi 叫车电话：701111；Praja Taxi 叫车电话：289090</p><ul><li>公交车（BUS）</li></ul><p>Perama是巴厘岛最大的旅游巴士公司，办事处和代理商遍布整个巴厘岛，每天会有至少一班固定的班车往返与各旅行景点包括库塔、 乌布、萨努尔、奴沙杜瓦、罗威纳、京打马尼等地。价格比较公 道，具体班次及价格可查询Perama公司官网。</p><p>官网：<a href="http://www.peramatour.com" target="_blank" rel="noopener">http://www.peramatour.com</a></p><ul><li>小巴士（Bemo Bemo）</li></ul><p>固定线路的小巴在巴厘岛称为“Bemo”，是当地人常用的传统交通工具，有很大的自由度，可以到达很多地方。车窗上贴着线路，沿线设有站牌，也可以招手停。方便而且价 格便宜，不过经常都比较拥挤而且没有空调。城镇之间也设有小巴，有固定的站点和路线，按人收费。</p><p>小贴士：司机往往会向外国游客收取更高的费用。</p><ul><li>租车（SELF-DRIVE CAR）</li></ul><p>租车出行相对来说自由度较高，租车费用在20-30美金一天，但是在巴厘岛开车很考验驾驶技术，首先印尼为左行国家，汽车驾驶座在右侧，再者巴厘岛山区比较多坡，基本都是两车道，又窄，没有路肩，像乌布的街道又比较拥挤，摩托车常快速通过，所以要格外小心驾驶。 库塔很多地方都有租车，不需要国际驾照。中国驾照没有问题，但是你要确认你的驾驶技术没问题。</p><ul><li>包车</li></ul><p>包车是游巴厘岛最方便的出行方式。包车基本上有两种形式，第1种是找代理，在国内通过邮件先联系好当地的司机，确定全部用车行程和价格，如果包车3天以上可以跟司机谈提供免费机场接送；第2 种是到当地找司机，在乌布和库塔街头到处都是拉客的司机，可以 分单程和包整天，包整天一般是一天8小时30-40美金左右。</p><p>小贴士：在确定包车费用的时候要确认是不是包括油费、过路费、司机餐 费、停车费等，一般这些都是包括在整体价格上的，不过小费还是需要的，一般是一天1美金或者10,000卢比。</p><h3 id="中国驻印度尼西亚共和国大使馆"><a href="#中国驻印度尼西亚共和国大使馆" class="headerlink" title="中国驻印度尼西亚共和国大使馆"></a>中国驻印度尼西亚共和国大使馆</h3><p>国家地区号：0062-21(雅加达）<br>办公室：5761037，5761038（电话兼传真）<br>官网：<a href="http://id.china-embassy.org/chn/" target="_blank" rel="noopener">http://id.china-embassy.org/chn/</a><br>地址：Jl. Mega Kuningan No.2, Jakarta Selatan 12950, Indonesia<br>对外办公时间：（周一至周五）上午08:30－12:00，下午02:00－05:00</p><!-- ### 巴厘岛![...](/images/1.jpg)![...](/images/quandao.jpeg)![...](/images/kuta1.jpeg)![...](/images/kuta2.jpeg)![...](/images/kuta3.jpeg) -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/31/hello-world/"/>
      <url>/2018/05/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
